// <auto-generated/>
#pragma warning disable 0067, 0108, 0618
namespace FinanceAnalyzer.Moles
{
    /// <summary>Mole of Account</summary>
    [global::Microsoft.Stubs.Framework.MoleClass(typeof(global::FinanceAnalyzer.Account))]
    [global::System.CodeDom.Compiler.GeneratedCode("Stubs", "0.16.40915.5")]
    [global::System.Diagnostics.DebuggerDisplay("Mole = Account")]
    [global::System.Diagnostics.DebuggerStepThrough]
    public partial class MAccount
      : global::Microsoft.Stubs.Framework.MoleBase<global::FinanceAnalyzer.Account>
    {
        /// <summary>Initializes a new instance</summary>
        public MAccount()
        : base(typeof(global::FinanceAnalyzer.Account))
        {
        }

        /// <summary>Sets the mole of Account.get_BankRoll()</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("get_BankRoll", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<global::FinanceAnalyzer.Account, double> BankRollGet
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "get_BankRoll", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance);
            }
        }

        /// <summary>Sets the mole of Account.get_BuyTransactionCount()</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("get_BuyTransactionCount", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<global::FinanceAnalyzer.Account, int> BuyTransactionCountGet
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "get_BuyTransactionCount", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance);
            }
        }

        /// <summary>Sets the mole of Account.DoBusiness(DateTime, IStockOper)</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("DoBusiness", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<global::FinanceAnalyzer.Account, global::System.DateTime, global::FinanceAnalyzer.IStockOper, bool> DoBusinessDateTimeIStockOper
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "DoBusiness", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance, 
                typeof(global::System.DateTime), typeof(global::FinanceAnalyzer.IStockOper));
            }
        }

        /// <summary>Sets the mole of Account.get_Holder()</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("get_Holder", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<global::FinanceAnalyzer.Account, global::FinanceAnalyzer.IStockHolder> HolderGet
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "get_Holder", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance);
            }
        }

        /// <summary>Gets an stub instance to bind to Account.get_Holder()</summary>
        public TStub HolderGetAsStub<TStub>()
            where TStub : global::FinanceAnalyzer.IStockHolder, global::Microsoft.Stubs.Framework.IStub, new()
        {
            global::Microsoft.Stubs.Framework
              .StubDelegates.Func<global::FinanceAnalyzer.Account, 
              global::FinanceAnalyzer.IStockHolder> stub
               = base.AttachStubWithReceiver<TStub, global::FinanceAnalyzer.IStockHolder>
                  (ref this._holderGetAsStub);
            if (stub != (global::Microsoft.Stubs.Framework
              .StubDelegates.Func<global::FinanceAnalyzer.Account, 
              global::FinanceAnalyzer.IStockHolder>)null)
              this.HolderGet = stub;
            return (TStub)(this._holderGetAsStub);
        }

        /// <summary>Sets the mole of Account.ProcessBonus(Bonus)</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("ProcessBonus", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Action<global::FinanceAnalyzer.Account, global::FinanceAnalyzer.DB.Bonus> ProcessBonusBonus
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "ProcessBonus", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance, 
                typeof(global::FinanceAnalyzer.DB.Bonus));
            }
        }

        /// <summary>Sets the mole of Account.get_SellTransactionCount()</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("get_SellTransactionCount", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<global::FinanceAnalyzer.Account, int> SellTransactionCountGet
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "get_SellTransactionCount", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance);
            }
        }

        /// <summary>Sets the mole of Account.TotalValue(DateTime)</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("TotalValue", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<global::FinanceAnalyzer.Account, global::System.DateTime, double> TotalValueDateTime
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "TotalValue", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance, 
                typeof(global::System.DateTime));
            }
        }

        private global::Microsoft.Stubs.Framework.IStub _holderGetAsStub;

        /// <summary>Sets the mole of Account.set_BankRoll(Double)</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("set_BankRoll", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Action<global::FinanceAnalyzer.Account, double> set_BankRollGetDouble
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "set_BankRoll", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance, 
                typeof(double));
            }
        }

        /// <summary>Sets the mole of Account.set_Holder(IStockHolder)</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("set_Holder", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Action<global::FinanceAnalyzer.Account, global::FinanceAnalyzer.IStockHolder> set_HolderGetIStockHolder
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "set_Holder", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance, 
                typeof(global::FinanceAnalyzer.IStockHolder));
            }
        }
    }
}
namespace FinanceAnalyzer.DB.Moles
{
    /// <summary>Mole of Bonus</summary>
    [global::Microsoft.Stubs.Framework.MoleClass(typeof(global::FinanceAnalyzer.DB.Bonus))]
    [global::System.CodeDom.Compiler.GeneratedCode("Stubs", "0.16.40915.5")]
    [global::System.Diagnostics.DebuggerDisplay("Mole = Bonus")]
    [global::System.Diagnostics.DebuggerStepThrough]
    public partial class MBonus
      : global::Microsoft.Stubs.Framework.MoleBase<global::FinanceAnalyzer.DB.Bonus>
    {
        /// <summary>Initializes a new instance</summary>
        public MBonus()
        : base(typeof(global::FinanceAnalyzer.DB.Bonus))
        {
        }

        /// <summary>Sets the mole of Bonus.get_BonusCount()</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("get_BonusCount", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<global::FinanceAnalyzer.DB.Bonus, double> BonusCountGet
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "get_BonusCount", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance);
            }
        }

        /// <summary>Sets the mole of Bonus.get_BonusListOn()</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("get_BonusListOn", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<global::FinanceAnalyzer.DB.Bonus, global::System.DateTime> BonusListOnGet
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "get_BonusListOn", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance);
            }
        }

        /// <summary>Sets the mole of Bonus.get_BonusYear()</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("get_BonusYear", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<global::FinanceAnalyzer.DB.Bonus, int> BonusYearGet
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "get_BonusYear", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance);
            }
        }

        /// <summary>Sets the mole of Bonus.get_DividendDate()</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("get_DividendDate", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<global::FinanceAnalyzer.DB.Bonus, global::System.DateTime> DividendDateGet
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "get_DividendDate", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance);
            }
        }

        /// <summary>Sets the mole of Bonus.get_Dividend()</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("get_Dividend", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<global::FinanceAnalyzer.DB.Bonus, double> DividendGet
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "get_Dividend", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance);
            }
        }

        /// <summary>Sets the mole of Bonus.get_ExexDividend()</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("get_ExexDividend", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<global::FinanceAnalyzer.DB.Bonus, global::System.DateTime> ExexDividendGet
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "get_ExexDividend", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance);
            }
        }

        /// <summary>Sets the mole of Bonus.get_RegistOn()</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("get_RegistOn", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<global::FinanceAnalyzer.DB.Bonus, global::System.DateTime> RegistOnGet
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "get_RegistOn", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance);
            }
        }

        /// <summary>Sets the mole of Bonus.get_StockId()</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("get_StockId", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<global::FinanceAnalyzer.DB.Bonus, int> StockIdGet
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "get_StockId", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance);
            }
        }

        /// <summary>Sets the mole of Bonus.set_BonusCount(Double)</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("set_BonusCount", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Action<global::FinanceAnalyzer.DB.Bonus, double> set_BonusCountGetDouble
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "set_BonusCount", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance, 
                typeof(double));
            }
        }

        /// <summary>Sets the mole of Bonus.set_BonusListOn(DateTime)</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("set_BonusListOn", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Action<global::FinanceAnalyzer.DB.Bonus, global::System.DateTime> set_BonusListOnGetDateTime
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "set_BonusListOn", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance, 
                typeof(global::System.DateTime));
            }
        }

        /// <summary>Sets the mole of Bonus.set_BonusYear(Int32)</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("set_BonusYear", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Action<global::FinanceAnalyzer.DB.Bonus, int> set_BonusYearGetInt32
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "set_BonusYear", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance, 
                typeof(int));
            }
        }

        /// <summary>Sets the mole of Bonus.set_DividendDate(DateTime)</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("set_DividendDate", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Action<global::FinanceAnalyzer.DB.Bonus, global::System.DateTime> set_DividendDateGetDateTime
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "set_DividendDate", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance, 
                typeof(global::System.DateTime));
            }
        }

        /// <summary>Sets the mole of Bonus.set_Dividend(Double)</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("set_Dividend", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Action<global::FinanceAnalyzer.DB.Bonus, double> set_DividendGetDouble
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "set_Dividend", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance, 
                typeof(double));
            }
        }

        /// <summary>Sets the mole of Bonus.set_ExexDividend(DateTime)</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("set_ExexDividend", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Action<global::FinanceAnalyzer.DB.Bonus, global::System.DateTime> set_ExexDividendGetDateTime
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "set_ExexDividend", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance, 
                typeof(global::System.DateTime));
            }
        }

        /// <summary>Sets the mole of Bonus.set_RegistOn(DateTime)</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("set_RegistOn", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Action<global::FinanceAnalyzer.DB.Bonus, global::System.DateTime> set_RegistOnGetDateTime
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "set_RegistOn", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance, 
                typeof(global::System.DateTime));
            }
        }

        /// <summary>Sets the mole of Bonus.set_StockId(Int32)</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("set_StockId", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Action<global::FinanceAnalyzer.DB.Bonus, int> set_StockIdGetInt32
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "set_StockId", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance, 
                typeof(int));
            }
        }
    }
}
namespace FinanceAnalyzer.DB.Moles
{
    /// <summary>Mole of BonusReader</summary>
    [global::Microsoft.Stubs.Framework.MoleClass(typeof(global::FinanceAnalyzer.DB.BonusReader))]
    [global::System.CodeDom.Compiler.GeneratedCode("Stubs", "0.16.40915.5")]
    [global::System.Diagnostics.DebuggerDisplay("Mole = BonusReader")]
    [global::System.Diagnostics.DebuggerStepThrough]
    public partial class MBonusReader
      : global::Microsoft.Stubs.Framework.MoleBase<global::FinanceAnalyzer.DB.BonusReader>
    {
        /// <summary>Initializes a new instance</summary>
        public MBonusReader()
        : base(typeof(global::FinanceAnalyzer.DB.BonusReader))
        {
        }

        /// <summary>Sets the mole of BonusReader.Count()</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("Count", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<global::FinanceAnalyzer.DB.BonusReader, int> Count
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, 
                "Count", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance);
            }
        }

        /// <summary>Sets the mole of BonusReader.InsertBonus(Bonus)</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("InsertBonus", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicStatic)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Action<global::FinanceAnalyzer.DB.Bonus> InsertBonusBonus
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "InsertBonus", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicStatic, 
                typeof(global::FinanceAnalyzer.DB.Bonus));
            }
        }

        /// <summary>Sets the mole of BonusReader.LoadAll()</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("LoadAll", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Action<global::FinanceAnalyzer.DB.BonusReader> LoadAll
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "LoadAll", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance);
            }
        }

        /// <summary>Sets the mole of BonusReader.Query(Int32)</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("Query", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<global::FinanceAnalyzer.DB.BonusReader, int, global::System.Collections.Generic.IList<global::FinanceAnalyzer.DB.Bonus>> QueryInt32
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "Query", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance, 
                typeof(int));
            }
        }
    }
}
namespace FinanceAnalyzer.Moles
{
    /// <summary>Mole of ColorMgr</summary>
    [global::Microsoft.Stubs.Framework.MoleClass(typeof(global::FinanceAnalyzer.ColorMgr))]
    [global::System.CodeDom.Compiler.GeneratedCode("Stubs", "0.16.40915.5")]
    [global::System.Diagnostics.DebuggerDisplay("Mole = ColorMgr")]
    [global::System.Diagnostics.DebuggerStepThrough]
    public partial class MColorMgr
      : global::Microsoft.Stubs.Framework.MoleBase<global::FinanceAnalyzer.ColorMgr>
    {
        /// <summary>Initializes a new instance</summary>
        public MColorMgr()
        : base(typeof(global::FinanceAnalyzer.ColorMgr))
        {
        }

        /// <summary>Sets the mole of ColorMgr.get_ColorCount()</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("get_ColorCount", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<global::FinanceAnalyzer.ColorMgr, int> ColorCountGet
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "get_ColorCount", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance);
            }
        }

        /// <summary>Sets the mole of ColorMgr.DiffColor()</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("DiffColor", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<global::FinanceAnalyzer.ColorMgr, global::System.Drawing.Color> DiffColor
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "DiffColor", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance);
            }
        }

        /// <summary>Sets the mole of ColorMgr.StartDiffColor()</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("StartDiffColor", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Action<global::FinanceAnalyzer.ColorMgr> StartDiffColor
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "StartDiffColor", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance);
            }
        }
    }
}
namespace FinanceAnalyzer.Moles
{
    /// <summary>Mole of DateFunc</summary>
    [global::Microsoft.Stubs.Framework.MoleClass(typeof(global::FinanceAnalyzer.DateFunc))]
    [global::System.CodeDom.Compiler.GeneratedCode("Stubs", "0.16.40915.5")]
    [global::System.Diagnostics.DebuggerDisplay("Mole = DateFunc")]
    [global::System.Diagnostics.DebuggerStepThrough]
    public partial class MDateFunc
      : global::Microsoft.Stubs.Framework.MoleBase<global::FinanceAnalyzer.DateFunc>
    {
        /// <summary>Initializes a new instance</summary>
        public MDateFunc()
        : base(typeof(global::FinanceAnalyzer.DateFunc))
        {
        }

        /// <summary>Sets the mole of DateFunc.GetNextWorkDay(DateTime)</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("GetNextWorkDay", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicStatic)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<global::System.DateTime, global::System.DateTime> GetNextWorkDayDateTime
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "GetNextWorkDay", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicStatic, 
                typeof(global::System.DateTime));
            }
        }

        /// <summary>Sets the mole of DateFunc.GetPrevWorkDay(DateTime)</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("GetPrevWorkDay", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicStatic)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<global::System.DateTime, global::System.DateTime> GetPrevWorkDayDateTime
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "GetPrevWorkDay", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicStatic, 
                typeof(global::System.DateTime));
            }
        }

        /// <summary>Sets the mole of DateFunc.IsHoliday(DateTime)</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("IsHoliday", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicStatic)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<global::System.DateTime, bool> IsHolidayDateTime
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "IsHoliday", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicStatic, 
                typeof(global::System.DateTime));
            }
        }

        /// <summary>Sets the mole of DateFunc.ParseString(Object)</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("ParseString", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicStatic)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<object, global::System.DateTime> ParseStringObject
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "ParseString", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicStatic, 
                typeof(object));
            }
        }

        /// <summary>Sets the mole of DateFunc.ParseString(String)</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("ParseString", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicStatic)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<string, global::System.DateTime> ParseStringString
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "ParseString", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicStatic, 
                typeof(string));
            }
        }
    }
}
namespace FinanceAnalyzer.Moles
{
    /// <summary>Mole of DayStock</summary>
    [global::Microsoft.Stubs.Framework.MoleClass(typeof(global::FinanceAnalyzer.DayStock))]
    [global::System.CodeDom.Compiler.GeneratedCode("Stubs", "0.16.40915.5")]
    [global::System.Diagnostics.DebuggerDisplay("Mole = DayStock")]
    [global::System.Diagnostics.DebuggerStepThrough]
    public partial class MDayStock
      : global::Microsoft.Stubs.Framework.MoleBase<global::FinanceAnalyzer.DayStock>
    {
        /// <summary>Initializes a new instance</summary>
        public MDayStock()
        : base(typeof(global::FinanceAnalyzer.DayStock))
        {
        }

        /// <summary>Sets the mole of DayStock.get_EndPrice()</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("get_EndPrice", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<global::FinanceAnalyzer.DayStock, double> EndPriceGet
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "get_EndPrice", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance);
            }
        }

        /// <summary>Sets the mole of DayStock.IsRise(DayStock)</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("IsRise", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<global::FinanceAnalyzer.DayStock, global::FinanceAnalyzer.DayStock, bool> IsRiseDayStock
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "IsRise", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance, 
                typeof(global::FinanceAnalyzer.DayStock));
            }
        }

        /// <summary>Sets the mole of DayStock.IsUp()</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("IsUp", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<global::FinanceAnalyzer.DayStock, bool> IsUp
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, 
                "IsUp", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance);
            }
        }

        /// <summary>Sets the mole of DayStock.get_MaxPrice()</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("get_MaxPrice", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<global::FinanceAnalyzer.DayStock, double> MaxPriceGet
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "get_MaxPrice", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance);
            }
        }

        /// <summary>Sets the mole of DayStock.get_MinPrice()</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("get_MinPrice", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<global::FinanceAnalyzer.DayStock, double> MinPriceGet
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "get_MinPrice", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance);
            }
        }

        /// <summary>Sets the mole of DayStock.get_StartPrice()</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("get_StartPrice", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<global::FinanceAnalyzer.DayStock, double> StartPriceGet
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "get_StartPrice", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance);
            }
        }

        /// <summary>Sets the mole of DayStock.set_EndPrice(Double)</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("set_EndPrice", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Action<global::FinanceAnalyzer.DayStock, double> set_EndPriceGetDouble
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "set_EndPrice", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance, 
                typeof(double));
            }
        }

        /// <summary>Sets the mole of DayStock.set_MaxPrice(Double)</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("set_MaxPrice", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Action<global::FinanceAnalyzer.DayStock, double> set_MaxPriceGetDouble
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "set_MaxPrice", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance, 
                typeof(double));
            }
        }

        /// <summary>Sets the mole of DayStock.set_MinPrice(Double)</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("set_MinPrice", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Action<global::FinanceAnalyzer.DayStock, double> set_MinPriceGetDouble
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "set_MinPrice", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance, 
                typeof(double));
            }
        }

        /// <summary>Sets the mole of DayStock.set_StartPrice(Double)</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("set_StartPrice", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Action<global::FinanceAnalyzer.DayStock, double> set_StartPriceGetDouble
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "set_StartPrice", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance, 
                typeof(double));
            }
        }
    }
}
namespace FinanceAnalyzer.Log.Moles
{
    /// <summary>Mole of DummyLog</summary>
    [global::Microsoft.Stubs.Framework.MoleClass(typeof(global::FinanceAnalyzer.Log.DummyLog))]
    [global::System.CodeDom.Compiler.GeneratedCode("Stubs", "0.16.40915.5")]
    [global::System.Diagnostics.DebuggerDisplay("Mole = DummyLog")]
    [global::System.Diagnostics.DebuggerStepThrough]
    public partial class MDummyLog
      : global::Microsoft.Stubs.Framework.MoleBase<global::FinanceAnalyzer.Log.DummyLog>
    {
        /// <summary>Initializes a new instance</summary>
        public MDummyLog()
        : base(typeof(global::FinanceAnalyzer.Log.DummyLog))
        {
        }

        /// <summary>Sets the mole of DummyLog.Close()</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("Close", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Action<global::FinanceAnalyzer.Log.DummyLog> Close
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, 
                "Close", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance);
            }
        }

        /// <summary>Sets the mole of DummyLog.LogInfo(String)</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("LogInfo", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Action<global::FinanceAnalyzer.Log.DummyLog, string> LogInfoString
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "LogInfo", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance, 
                typeof(string));
            }
        }

        /// <summary>Sets the mole of DummyLog.LogInfo(String, Object)</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("LogInfo", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Action<global::FinanceAnalyzer.Log.DummyLog, string, object> LogInfoStringObject
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "LogInfo", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance, 
                typeof(string), typeof(object));
            }
        }

        /// <summary>Sets the mole of DummyLog.LogInfo(String, Object, Object)</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("LogInfo", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Action<global::FinanceAnalyzer.Log.DummyLog, string, object, object> LogInfoStringObjectObject
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "LogInfo", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance, 
                typeof(string), typeof(object), typeof(object));
            }
        }

        /// <summary>Sets the mole of DummyLog.LogInfo(String, Object, Object, Object)</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("LogInfo", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Action<global::FinanceAnalyzer.Log.DummyLog, string, object, object, object> LogInfoStringObjectObjectObject
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "LogInfo", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance, 
                typeof(string), typeof(object), typeof(object), typeof(object));
            }
        }
    }
}
namespace FinanceAnalyzer.Moles
{
    /// <summary>Mole of FinanceRunner</summary>
    [global::Microsoft.Stubs.Framework.MoleClass(typeof(global::FinanceAnalyzer.FinanceRunner))]
    [global::System.CodeDom.Compiler.GeneratedCode("Stubs", "0.16.40915.5")]
    [global::System.Diagnostics.DebuggerDisplay("Mole = FinanceRunner")]
    [global::System.Diagnostics.DebuggerStepThrough]
    public partial class MFinanceRunner
      : global::Microsoft.Stubs.Framework.MoleBase<global::FinanceAnalyzer.FinanceRunner>
    {
        /// <summary>Initializes a new instance</summary>
        public MFinanceRunner()
        : base(typeof(global::FinanceAnalyzer.FinanceRunner))
        {
        }

        /// <summary>Sets the mole of FinanceRunner.ExecTask(IFinanceStrategy, Double)</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("ExecTask", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Action<global::FinanceAnalyzer.FinanceRunner, global::FinanceAnalyzer.Strategy.IFinanceStrategy, double> ExecTaskIFinanceStrategyDouble
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "ExecTask", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance, 
                typeof(global::FinanceAnalyzer.Strategy.IFinanceStrategy), typeof(double));
            }
        }

        /// <summary>Sets the mole of FinanceRunner.Go()</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("Go", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Action<global::FinanceAnalyzer.FinanceRunner> Go
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, 
                "Go", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance);
            }
        }

        /// <summary>Sets the mole of FinanceRunner.get_Results()</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("get_Results", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<global::FinanceAnalyzer.FinanceRunner, global::FinanceAnalyzer.StrategyResults> ResultsGet
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "get_Results", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance);
            }
        }

        /// <summary>Gets an mole instance to bind to FinanceRunner.get_Results()</summary>
        public TMole ResultsGetAsMole<TMole>()
            where TMole : global::Microsoft.Stubs.Framework.MoleBase<global::FinanceAnalyzer.StrategyResults>, new()
        {
            global::Microsoft.Stubs.Framework
              .StubDelegates.Func<global::FinanceAnalyzer.FinanceRunner, 
              global::FinanceAnalyzer.StrategyResults> mole
               = base.AttachMoleWithReceiver<TMole, global::FinanceAnalyzer.StrategyResults>
                  (ref this._resultsGetAsMole);
            if (mole != (global::Microsoft.Stubs.Framework
              .StubDelegates.Func<global::FinanceAnalyzer.FinanceRunner, 
              global::FinanceAnalyzer.StrategyResults>)null)
              this.ResultsGet = mole;
            return (TMole)(this._resultsGetAsMole);
        }

        private global::Microsoft.Stubs.Framework.MoleBase<global::FinanceAnalyzer.StrategyResults> _resultsGetAsMole;
    }
}
namespace FinanceAnalyzer.UI.Moles
{
    /// <summary>Mole of FormBonus</summary>
    [global::Microsoft.Stubs.Framework.MoleClass(typeof(global::FinanceAnalyzer.UI.FormBonus))]
    [global::System.CodeDom.Compiler.GeneratedCode("Stubs", "0.16.40915.5")]
    [global::System.Diagnostics.DebuggerDisplay("Mole = FormBonus")]
    [global::System.Diagnostics.DebuggerStepThrough]
    public partial class MFormBonus
      : global::Microsoft.Stubs.Framework.MoleBase<global::FinanceAnalyzer.UI.FormBonus>
    {
        /// <summary>Initializes a new instance</summary>
        public MFormBonus()
        : base(typeof(global::FinanceAnalyzer.UI.FormBonus))
        {
        }
    }
}
namespace FinanceAnalyzer.UI.Moles
{
    /// <summary>Mole of FormBonusAdd</summary>
    [global::Microsoft.Stubs.Framework.MoleClass(typeof(global::FinanceAnalyzer.UI.FormBonusAdd))]
    [global::System.CodeDom.Compiler.GeneratedCode("Stubs", "0.16.40915.5")]
    [global::System.Diagnostics.DebuggerDisplay("Mole = FormBonusAdd")]
    [global::System.Diagnostics.DebuggerStepThrough]
    public partial class MFormBonusAdd
      : global::Microsoft.Stubs.Framework.MoleBase<global::FinanceAnalyzer.UI.FormBonusAdd>
    {
        /// <summary>Initializes a new instance</summary>
        public MFormBonusAdd()
        : base(typeof(global::FinanceAnalyzer.UI.FormBonusAdd))
        {
        }
    }
}
namespace FinanceAnalyzer.Moles
{
    /// <summary>Mole of FormCompare</summary>
    [global::Microsoft.Stubs.Framework.MoleClass(typeof(global::FinanceAnalyzer.FormCompare))]
    [global::System.CodeDom.Compiler.GeneratedCode("Stubs", "0.16.40915.5")]
    [global::System.Diagnostics.DebuggerDisplay("Mole = FormCompare")]
    [global::System.Diagnostics.DebuggerStepThrough]
    public partial class MFormCompare
      : global::Microsoft.Stubs.Framework.MoleBase<global::FinanceAnalyzer.FormCompare>
    {
        /// <summary>Initializes a new instance</summary>
        public MFormCompare()
        : base(typeof(global::FinanceAnalyzer.FormCompare))
        {
        }

        /// <summary>Sets the mole of FormCompare.set_Results(StrategyResults)</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("set_Results", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Action<global::FinanceAnalyzer.FormCompare, global::FinanceAnalyzer.StrategyResults> set_ResultsGetStrategyResults
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "set_Results", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance, 
                typeof(global::FinanceAnalyzer.StrategyResults));
            }
        }
    }
}
namespace FinanceAnalyzer.Moles
{
    /// <summary>Mole of FormGraph</summary>
    [global::Microsoft.Stubs.Framework.MoleClass(typeof(global::FinanceAnalyzer.FormGraph))]
    [global::System.CodeDom.Compiler.GeneratedCode("Stubs", "0.16.40915.5")]
    [global::System.Diagnostics.DebuggerDisplay("Mole = FormGraph")]
    [global::System.Diagnostics.DebuggerStepThrough]
    public partial class MFormGraph
      : global::Microsoft.Stubs.Framework.MoleBase<global::FinanceAnalyzer.FormGraph>
    {
        /// <summary>Initializes a new instance</summary>
        public MFormGraph()
        : base(typeof(global::FinanceAnalyzer.FormGraph))
        {
        }

        /// <summary>Sets the mole of FormGraph.set_StockDrawer(IStockDrawer)</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("set_StockDrawer", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Action<global::FinanceAnalyzer.FormGraph, global::FinanceAnalyzer.IStockDrawer> set_StockDrawerGetIStockDrawer
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "set_StockDrawer", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance, 
                typeof(global::FinanceAnalyzer.IStockDrawer));
            }
        }
    }
}
namespace FinanceAnalyzer.UI.Moles
{
    /// <summary>Mole of FormImport</summary>
    [global::Microsoft.Stubs.Framework.MoleClass(typeof(global::FinanceAnalyzer.UI.FormImport))]
    [global::System.CodeDom.Compiler.GeneratedCode("Stubs", "0.16.40915.5")]
    [global::System.Diagnostics.DebuggerDisplay("Mole = FormImport")]
    [global::System.Diagnostics.DebuggerStepThrough]
    public partial class MFormImport
      : global::Microsoft.Stubs.Framework.MoleBase<global::FinanceAnalyzer.UI.FormImport>
    {
        /// <summary>Initializes a new instance</summary>
        public MFormImport()
        : base(typeof(global::FinanceAnalyzer.UI.FormImport))
        {
        }
    }
}
namespace FinanceAnalyzer.Moles
{
    /// <summary>Mole of FormMain</summary>
    [global::Microsoft.Stubs.Framework.MoleClass(typeof(global::FinanceAnalyzer.FormMain))]
    [global::System.CodeDom.Compiler.GeneratedCode("Stubs", "0.16.40915.5")]
    [global::System.Diagnostics.DebuggerDisplay("Mole = FormMain")]
    [global::System.Diagnostics.DebuggerStepThrough]
    public partial class MFormMain
      : global::Microsoft.Stubs.Framework.MoleBase<global::FinanceAnalyzer.FormMain>
    {
        /// <summary>Initializes a new instance</summary>
        public MFormMain()
        : base(typeof(global::FinanceAnalyzer.FormMain))
        {
        }
    }
}
namespace FinanceAnalyzer.Strategy.Moles
{
    /// <summary>Mole of IFinanceStrategy</summary>
    [global::Microsoft.Stubs.Framework.MoleClass(typeof(global::FinanceAnalyzer.Strategy.IFinanceStrategy))]
    [global::System.CodeDom.Compiler.GeneratedCode("Stubs", "0.16.40915.5")]
    [global::System.Diagnostics.DebuggerDisplay("Mole = IFinanceStrategy")]
    [global::System.Diagnostics.DebuggerStepThrough]
    public partial class MIFinanceStrategy
      : global::Microsoft.Stubs.Framework.MoleBase<global::FinanceAnalyzer.Strategy.IFinanceStrategy>
    {
        /// <summary>Initializes a new instance</summary>
        public MIFinanceStrategy()
        : base(typeof(global::FinanceAnalyzer.Strategy.IFinanceStrategy))
        {
        }

        /// <summary>Sets the mole of IFinanceStrategy.get_Holder()</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("get_Holder", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<global::FinanceAnalyzer.Strategy.IFinanceStrategy, global::FinanceAnalyzer.IStockHolder> HolderGet
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "get_Holder", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance);
            }
        }

        /// <summary>Gets an stub instance to bind to IFinanceStrategy.get_Holder()</summary>
        public TStub HolderGetAsStub<TStub>()
            where TStub : global::FinanceAnalyzer.IStockHolder, global::Microsoft.Stubs.Framework.IStub, new()
        {
            global::Microsoft.Stubs.Framework.StubDelegates
              .Func<global::FinanceAnalyzer.Strategy.IFinanceStrategy, 
              global::FinanceAnalyzer.IStockHolder> stub
               = base.AttachStubWithReceiver<TStub, global::FinanceAnalyzer.IStockHolder>
                  (ref this._holderGetAsStub);
            if (stub != (global::Microsoft.Stubs.Framework.StubDelegates
              .Func<global::FinanceAnalyzer.Strategy.IFinanceStrategy, 
              global::FinanceAnalyzer.IStockHolder>)null)
              this.HolderGet = stub;
            return (TStub)(this._holderGetAsStub);
        }

        private global::Microsoft.Stubs.Framework.IStub _holderGetAsStub;

        /// <summary>Sets the mole of IFinanceStrategy.set_Holder(IStockHolder)</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("set_Holder", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Action<global::FinanceAnalyzer.Strategy.IFinanceStrategy, global::FinanceAnalyzer.IStockHolder> set_HolderGetIStockHolder
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "set_Holder", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance, 
                typeof(global::FinanceAnalyzer.IStockHolder));
            }
        }
    }
}
namespace FinanceAnalyzer.Strategy.Rise.Moles
{
    /// <summary>Mole of IRiseJudger</summary>
    [global::Microsoft.Stubs.Framework.MoleClass(typeof(global::FinanceAnalyzer.Strategy.Rise.IRiseJudger))]
    [global::System.CodeDom.Compiler.GeneratedCode("Stubs", "0.16.40915.5")]
    [global::System.Diagnostics.DebuggerDisplay("Mole = IRiseJudger")]
    [global::System.Diagnostics.DebuggerStepThrough]
    public partial class MIRiseJudger
      : global::Microsoft.Stubs.Framework.MoleBase<global::FinanceAnalyzer.Strategy.Rise.IRiseJudger>
    {
        /// <summary>Initializes a new instance</summary>
        public MIRiseJudger()
        : base(typeof(global::FinanceAnalyzer.Strategy.Rise.IRiseJudger))
        {
        }

        /// <summary>Sets the mole of IRiseJudger.get_Holder()</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("get_Holder", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<global::FinanceAnalyzer.Strategy.Rise.IRiseJudger, global::FinanceAnalyzer.IStockHolder> HolderGet
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "get_Holder", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance);
            }
        }

        /// <summary>Gets an stub instance to bind to IRiseJudger.get_Holder()</summary>
        public TStub HolderGetAsStub<TStub>()
            where TStub : global::FinanceAnalyzer.IStockHolder, global::Microsoft.Stubs.Framework.IStub, new()
        {
            global::Microsoft.Stubs.Framework.StubDelegates
              .Func<global::FinanceAnalyzer.Strategy.Rise.IRiseJudger, 
              global::FinanceAnalyzer.IStockHolder> stub
               = base.AttachStubWithReceiver<TStub, global::FinanceAnalyzer.IStockHolder>
                  (ref this._holderGetAsStub);
            if (stub != (global::Microsoft.Stubs.Framework.StubDelegates
              .Func<global::FinanceAnalyzer.Strategy.Rise.IRiseJudger, 
              global::FinanceAnalyzer.IStockHolder>)null)
              this.HolderGet = stub;
            return (TStub)(this._holderGetAsStub);
        }

        private global::Microsoft.Stubs.Framework.IStub _holderGetAsStub;

        /// <summary>Sets the mole of IRiseJudger.set_Holder(IStockHolder)</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("set_Holder", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Action<global::FinanceAnalyzer.Strategy.Rise.IRiseJudger, global::FinanceAnalyzer.IStockHolder> set_HolderGetIStockHolder
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "set_Holder", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance, 
                typeof(global::FinanceAnalyzer.IStockHolder));
            }
        }
    }
}
namespace FinanceAnalyzer.KDJ.Moles
{
    /// <summary>Mole of KdjCalculator</summary>
    [global::Microsoft.Stubs.Framework.MoleClass(typeof(global::FinanceAnalyzer.KDJ.KdjCalculator))]
    [global::System.CodeDom.Compiler.GeneratedCode("Stubs", "0.16.40915.5")]
    [global::System.Diagnostics.DebuggerDisplay("Mole = KdjCalculator")]
    [global::System.Diagnostics.DebuggerStepThrough]
    internal partial class MKdjCalculator
      : global::Microsoft.Stubs.Framework.MoleBase<global::FinanceAnalyzer.KDJ.KdjCalculator>
    {
        /// <summary>Initializes a new instance</summary>
        public MKdjCalculator()
        : base(typeof(global::FinanceAnalyzer.KDJ.KdjCalculator))
        {
        }

        /// <summary>Sets the mole of KdjCalculator.Calc(StockHistory)</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("Calc", global::Microsoft.Stubs.Framework.MoleBindingFlags.NonPublicInstance)]
        internal global::Microsoft.Stubs.Framework.StubDelegates.Action<global::FinanceAnalyzer.KDJ.KdjCalculator, global::FinanceAnalyzer.StockHistory> CalcStockHistory
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "Calc", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.NonPublicInstance, 
                typeof(global::FinanceAnalyzer.StockHistory));
            }
        }

        /// <summary>Sets the mole of KdjCalculator.GetStorage()</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("GetStorage", global::Microsoft.Stubs.Framework.MoleBindingFlags.NonPublicInstance)]
        internal global::Microsoft.Stubs.Framework.StubDelegates.Func<global::FinanceAnalyzer.KDJ.KdjCalculator, global::FinanceAnalyzer.KDJ.IKdjStorage> GetStorage
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "GetStorage", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.NonPublicInstance);
            }
        }
    }
}
namespace FinanceAnalyzer.KDJ.Moles
{
    /// <summary>Mole of KdjStorage</summary>
    [global::Microsoft.Stubs.Framework.MoleClass(typeof(global::FinanceAnalyzer.KDJ.KdjStorage))]
    [global::System.CodeDom.Compiler.GeneratedCode("Stubs", "0.16.40915.5")]
    [global::System.Diagnostics.DebuggerDisplay("Mole = KdjStorage")]
    [global::System.Diagnostics.DebuggerStepThrough]
    internal partial class MKdjStorage
      : global::Microsoft.Stubs.Framework.MoleBase<global::FinanceAnalyzer.KDJ.KdjStorage>
    {
        /// <summary>Initializes a new instance</summary>
        public MKdjStorage()
        : base(typeof(global::FinanceAnalyzer.KDJ.KdjStorage))
        {
        }

        /// <summary>Sets the mole of KdjStorage.GetD(DateTime)</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("GetD", global::Microsoft.Stubs.Framework.MoleBindingFlags.NonPublicInstance)]
        internal global::Microsoft.Stubs.Framework.StubDelegates.Func<global::FinanceAnalyzer.KDJ.KdjStorage, global::System.DateTime, double> GetDDateTime
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "GetD", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.NonPublicInstance, 
                typeof(global::System.DateTime));
            }
        }

        /// <summary>Sets the mole of KdjStorage.GetJ(DateTime)</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("GetJ", global::Microsoft.Stubs.Framework.MoleBindingFlags.NonPublicInstance)]
        internal global::Microsoft.Stubs.Framework.StubDelegates.Func<global::FinanceAnalyzer.KDJ.KdjStorage, global::System.DateTime, double> GetJDateTime
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "GetJ", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.NonPublicInstance, 
                typeof(global::System.DateTime));
            }
        }

        /// <summary>Sets the mole of KdjStorage.GetK(DateTime)</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("GetK", global::Microsoft.Stubs.Framework.MoleBindingFlags.NonPublicInstance)]
        internal global::Microsoft.Stubs.Framework.StubDelegates.Func<global::FinanceAnalyzer.KDJ.KdjStorage, global::System.DateTime, double> GetKDateTime
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "GetK", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.NonPublicInstance, 
                typeof(global::System.DateTime));
            }
        }

        /// <summary>Sets the mole of KdjStorage.SetD(DateTime, Double)</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("SetD", global::Microsoft.Stubs.Framework.MoleBindingFlags.NonPublicInstance)]
        internal global::Microsoft.Stubs.Framework.StubDelegates.Action<global::FinanceAnalyzer.KDJ.KdjStorage, global::System.DateTime, double> SetDDateTimeDouble
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "SetD", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.NonPublicInstance, 
                typeof(global::System.DateTime), typeof(double));
            }
        }

        /// <summary>Sets the mole of KdjStorage.SetK(DateTime, Double)</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("SetK", global::Microsoft.Stubs.Framework.MoleBindingFlags.NonPublicInstance)]
        internal global::Microsoft.Stubs.Framework.StubDelegates.Action<global::FinanceAnalyzer.KDJ.KdjStorage, global::System.DateTime, double> SetKDateTimeDouble
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "SetK", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.NonPublicInstance, 
                typeof(global::System.DateTime), typeof(double));
            }
        }
    }
}
namespace FinanceAnalyzer.Moles
{
    /// <summary>Mole of LogMgr</summary>
    [global::Microsoft.Stubs.Framework.MoleClass(typeof(global::FinanceAnalyzer.LogMgr))]
    [global::System.CodeDom.Compiler.GeneratedCode("Stubs", "0.16.40915.5")]
    [global::System.Diagnostics.DebuggerDisplay("Mole = LogMgr")]
    [global::System.Diagnostics.DebuggerStepThrough]
    public partial class MLogMgr
      : global::Microsoft.Stubs.Framework.MoleBase<global::FinanceAnalyzer.LogMgr>
    {
        /// <summary>Initializes a new instance</summary>
        public MLogMgr()
        : base(typeof(global::FinanceAnalyzer.LogMgr))
        {
        }

        /// <summary>Sets the mole of LogMgr.Close()</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("Close", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicStatic)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Action Close
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, 
                "Close", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicStatic);
            }
        }

        /// <summary>Sets the mole of LogMgr.get_Logger()</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("get_Logger", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicStatic)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<global::FinanceAnalyzer.Log.ILog> LoggerGet
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "get_Logger", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicStatic);
            }
        }

        /// <summary>Gets an stub instance to bind to LogMgr.get_Logger()</summary>
        public TStub LoggerGetAsStub<TStub>()
            where TStub : global::FinanceAnalyzer.Log.ILog, global::Microsoft.Stubs.Framework.IStub, new()
        {
            global::Microsoft.Stubs.Framework
              .StubDelegates.Func<global::FinanceAnalyzer.Log.ILog> stub
               = base.AttachStub<TStub, global::FinanceAnalyzer.Log.ILog>
                  (ref this._loggerGetAsStub);
            if (stub != (global::Microsoft.Stubs.Framework
              .StubDelegates.Func<global::FinanceAnalyzer.Log.ILog>)null)
              this.LoggerGet = stub;
            return (TStub)(this._loggerGetAsStub);
        }

        private global::Microsoft.Stubs.Framework.IStub _loggerGetAsStub;

        /// <summary>Sets the mole of LogMgr.set_Logger(ILog)</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("set_Logger", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicStatic)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Action<global::FinanceAnalyzer.Log.ILog> set_LoggerGetILog
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "set_Logger", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicStatic, 
                typeof(global::FinanceAnalyzer.Log.ILog));
            }
        }
    }
}
namespace FinanceAnalyzer.Moles
{
    /// <summary>Mole of OperType</summary>
    [global::Microsoft.Stubs.Framework.MoleClass(typeof(global::FinanceAnalyzer.OperType))]
    [global::System.CodeDom.Compiler.GeneratedCode("Stubs", "0.16.40915.5")]
    [global::System.Diagnostics.DebuggerDisplay("Mole = OperType")]
    [global::System.Diagnostics.DebuggerStepThrough]
    public partial class MOperType
      : global::Microsoft.Stubs.Framework.MoleBase
    {
        /// <summary>Initializes a new instance</summary>
        public MOperType()
        : base(typeof(global::FinanceAnalyzer.OperType))
        {
        }
    }
}
namespace FinanceAnalyzer.Strategy.Condition.Moles
{
    /// <summary>Mole of PriceCondition</summary>
    [global::Microsoft.Stubs.Framework.MoleClass(typeof(global::FinanceAnalyzer.Strategy.Condition.PriceCondition))]
    [global::System.CodeDom.Compiler.GeneratedCode("Stubs", "0.16.40915.5")]
    [global::System.Diagnostics.DebuggerDisplay("Mole = PriceCondition")]
    [global::System.Diagnostics.DebuggerStepThrough]
    public partial class MPriceCondition
      : global::Microsoft.Stubs.Framework.MoleBase<global::FinanceAnalyzer.Strategy.Condition.PriceCondition>
    {
        /// <summary>Initializes a new instance</summary>
        public MPriceCondition()
        : base(typeof(global::FinanceAnalyzer.Strategy.Condition.PriceCondition))
        {
        }

        /// <summary>Sets the mole of PriceCondition.get_Holder()</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("get_Holder", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<global::FinanceAnalyzer.Strategy.Condition.PriceCondition, global::FinanceAnalyzer.IStockHolder> HolderGet
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "get_Holder", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance);
            }
        }

        /// <summary>Gets an stub instance to bind to PriceCondition.get_Holder()</summary>
        public TStub HolderGetAsStub<TStub>()
            where TStub : global::FinanceAnalyzer.IStockHolder, global::Microsoft.Stubs.Framework.IStub, new()
        {
            global::Microsoft.Stubs.Framework.StubDelegates
              .Func<global::FinanceAnalyzer.Strategy.Condition.PriceCondition, 
              global::FinanceAnalyzer.IStockHolder> stub
               = base.AttachStubWithReceiver<TStub, global::FinanceAnalyzer.IStockHolder>
                  (ref this._holderGetAsStub);
            if (stub != (global::Microsoft.Stubs.Framework
              .StubDelegates.Func<global::FinanceAnalyzer.Strategy.Condition
                .PriceCondition, global::FinanceAnalyzer.IStockHolder>)null)
              this.HolderGet = stub;
            return (TStub)(this._holderGetAsStub);
        }

        /// <summary>Sets the mole of PriceCondition.Judge(IStockOper)</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("Judge", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<global::FinanceAnalyzer.Strategy.Condition.PriceCondition, global::FinanceAnalyzer.IStockOper, bool> JudgeIStockOper
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "Judge", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance, 
                typeof(global::FinanceAnalyzer.IStockOper));
            }
        }

        private global::Microsoft.Stubs.Framework.IStub _holderGetAsStub;

        /// <summary>Sets the mole of PriceCondition.set_Holder(IStockHolder)</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("set_Holder", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Action<global::FinanceAnalyzer.Strategy.Condition.PriceCondition, global::FinanceAnalyzer.IStockHolder> set_HolderGetIStockHolder
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "set_Holder", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance, 
                typeof(global::FinanceAnalyzer.IStockHolder));
            }
        }
    }
}
namespace FinanceAnalyzer.Moles
{
    /// <summary>Mole of Program</summary>
    [global::Microsoft.Stubs.Framework.MoleClass(typeof(global::FinanceAnalyzer.Program))]
    [global::System.CodeDom.Compiler.GeneratedCode("Stubs", "0.16.40915.5")]
    [global::System.Diagnostics.DebuggerDisplay("Mole = Program")]
    [global::System.Diagnostics.DebuggerStepThrough]
    internal partial class MProgram
      : global::Microsoft.Stubs.Framework.MoleBase
    {
        /// <summary>Initializes a new instance</summary>
        public MProgram()
        : base(typeof(global::FinanceAnalyzer.Program))
        {
        }
    }
}
namespace FinanceAnalyzer.Properties.Moles
{
    /// <summary>Mole of Resources</summary>
    [global::Microsoft.Stubs.Framework.MoleClass(typeof(global::FinanceAnalyzer.Properties.Resources))]
    [global::System.CodeDom.Compiler.GeneratedCode("Stubs", "0.16.40915.5")]
    [global::System.Diagnostics.DebuggerDisplay("Mole = Resources")]
    [global::System.Diagnostics.DebuggerStepThrough]
    internal partial class MResources
      : global::Microsoft.Stubs.Framework.MoleBase<global::FinanceAnalyzer.Properties.Resources>
    {
        /// <summary>Initializes a new instance</summary>
        public MResources()
        : base(typeof(global::FinanceAnalyzer.Properties.Resources))
        {
        }

        /// <summary>Sets the mole of Resources.get_Culture()</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("get_Culture", global::Microsoft.Stubs.Framework.MoleBindingFlags.NonPublicStatic)]
        internal global::Microsoft.Stubs.Framework.StubDelegates.Func<global::System.Globalization.CultureInfo> CultureGet
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "get_Culture", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.NonPublicStatic);
            }
        }

        /// <summary>Gets an mole instance to bind to Resources.get_Culture()</summary>
        public TMole CultureGetAsMole<TMole>()
            where TMole : global::Microsoft.Stubs.Framework.MoleBase<global::System.Globalization.CultureInfo>, new()
        {
            global::Microsoft.Stubs.Framework
              .StubDelegates.Func<global::System.Globalization.CultureInfo> mole
               = base.AttachMole<TMole, global::System.Globalization.CultureInfo>
                  (ref this._cultureGetAsMole);
            if (mole != (global::Microsoft.Stubs.Framework
              .StubDelegates.Func<global::System.Globalization.CultureInfo>)null)
              this.CultureGet = mole;
            return (TMole)(this._cultureGetAsMole);
        }

        /// <summary>Sets the mole of Resources.get_ResourceManager()</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("get_ResourceManager", global::Microsoft.Stubs.Framework.MoleBindingFlags.NonPublicStatic)]
        internal global::Microsoft.Stubs.Framework.StubDelegates.Func<global::System.Resources.ResourceManager> ResourceManagerGet
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "get_ResourceManager", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.NonPublicStatic);
            }
        }

        /// <summary>Gets an mole instance to bind to Resources.get_ResourceManager()</summary>
        public TMole ResourceManagerGetAsMole<TMole>()
            where TMole : global::Microsoft.Stubs.Framework.MoleBase<global::System.Resources.ResourceManager>, new()
        {
            global::Microsoft.Stubs.Framework
              .StubDelegates.Func<global::System.Resources.ResourceManager> mole
               = base.AttachMole<TMole, global::System.Resources.ResourceManager>
                  (ref this._resourceManagerGetAsMole);
            if (mole != (global::Microsoft.Stubs.Framework
              .StubDelegates.Func<global::System.Resources.ResourceManager>)null)
              this.ResourceManagerGet = mole;
            return (TMole)(this._resourceManagerGetAsMole);
        }

        private global::Microsoft.Stubs.Framework.MoleBase<global::System.Globalization.CultureInfo> _cultureGetAsMole;

        private global::Microsoft.Stubs.Framework.MoleBase<global::System.Resources.ResourceManager> _resourceManagerGetAsMole;

        /// <summary>Sets the mole of Resources.set_Culture(CultureInfo)</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("set_Culture", global::Microsoft.Stubs.Framework.MoleBindingFlags.NonPublicStatic)]
        internal global::Microsoft.Stubs.Framework.StubDelegates.Action<global::System.Globalization.CultureInfo> set_CultureGetCultureInfo
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "set_Culture", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.NonPublicStatic, 
                typeof(global::System.Globalization.CultureInfo));
            }
        }
    }
}
namespace FinanceAnalyzer.Strategy.Rise.Moles
{
    /// <summary>Mole of RiseJudger</summary>
    [global::Microsoft.Stubs.Framework.MoleClass(typeof(global::FinanceAnalyzer.Strategy.Rise.RiseJudger))]
    [global::System.CodeDom.Compiler.GeneratedCode("Stubs", "0.16.40915.5")]
    [global::System.Diagnostics.DebuggerDisplay("Mole = RiseJudger")]
    [global::System.Diagnostics.DebuggerStepThrough]
    public partial class MRiseJudger
      : global::Microsoft.Stubs.Framework.MoleBase<global::FinanceAnalyzer.Strategy.Rise.RiseJudger>
    {
        /// <summary>Initializes a new instance</summary>
        public MRiseJudger()
        : base(typeof(global::FinanceAnalyzer.Strategy.Rise.RiseJudger))
        {
        }

        /// <summary>Sets the mole of RiseJudger.AllDown(DayStock, DayStock, DayStock)</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("AllDown", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<global::FinanceAnalyzer.Strategy.Rise.RiseJudger, global::FinanceAnalyzer.DayStock, global::FinanceAnalyzer.DayStock, global::FinanceAnalyzer.DayStock, bool> AllDownDayStockDayStockDayStock
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "AllDown", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance, 
                typeof(global::FinanceAnalyzer.DayStock), 
                typeof(global::FinanceAnalyzer.DayStock), 
                typeof(global::FinanceAnalyzer.DayStock));
            }
        }

        /// <summary>Sets the mole of RiseJudger.AllRise(DayStock, DayStock, DayStock)</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("AllRise", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<global::FinanceAnalyzer.Strategy.Rise.RiseJudger, global::FinanceAnalyzer.DayStock, global::FinanceAnalyzer.DayStock, global::FinanceAnalyzer.DayStock, bool> AllRiseDayStockDayStockDayStock
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "AllRise", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance, 
                typeof(global::FinanceAnalyzer.DayStock), 
                typeof(global::FinanceAnalyzer.DayStock), 
                typeof(global::FinanceAnalyzer.DayStock));
            }
        }

        /// <summary>Sets the mole of RiseJudger.GetName()</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("GetName", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<global::FinanceAnalyzer.Strategy.Rise.RiseJudger, string> GetName
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "GetName", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance);
            }
        }
    }
}
namespace FinanceAnalyzer.Strategy.Rise.Moles
{
    /// <summary>Mole of RiseJudgerOptim</summary>
    [global::Microsoft.Stubs.Framework.MoleClass(typeof(global::FinanceAnalyzer.Strategy.Rise.RiseJudgerOptim))]
    [global::System.CodeDom.Compiler.GeneratedCode("Stubs", "0.16.40915.5")]
    [global::System.Diagnostics.DebuggerDisplay("Mole = RiseJudgerOptim")]
    [global::System.Diagnostics.DebuggerStepThrough]
    public partial class MRiseJudgerOptim
      : global::Microsoft.Stubs.Framework.MoleBase<global::FinanceAnalyzer.Strategy.Rise.RiseJudgerOptim>
    {
        /// <summary>Initializes a new instance</summary>
        public MRiseJudgerOptim()
        : base(typeof(global::FinanceAnalyzer.Strategy.Rise.RiseJudgerOptim))
        {
        }

        /// <summary>Sets the mole of RiseJudgerOptim.AllDown(DayStock, DayStock, DayStock)</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("AllDown", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<global::FinanceAnalyzer.Strategy.Rise.RiseJudgerOptim, global::FinanceAnalyzer.DayStock, global::FinanceAnalyzer.DayStock, global::FinanceAnalyzer.DayStock, bool> AllDownDayStockDayStockDayStock
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "AllDown", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance, 
                typeof(global::FinanceAnalyzer.DayStock), 
                typeof(global::FinanceAnalyzer.DayStock), 
                typeof(global::FinanceAnalyzer.DayStock));
            }
        }

        /// <summary>Sets the mole of RiseJudgerOptim.AllRise(DayStock, DayStock, DayStock)</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("AllRise", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<global::FinanceAnalyzer.Strategy.Rise.RiseJudgerOptim, global::FinanceAnalyzer.DayStock, global::FinanceAnalyzer.DayStock, global::FinanceAnalyzer.DayStock, bool> AllRiseDayStockDayStockDayStock
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "AllRise", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance, 
                typeof(global::FinanceAnalyzer.DayStock), 
                typeof(global::FinanceAnalyzer.DayStock), 
                typeof(global::FinanceAnalyzer.DayStock));
            }
        }

        /// <summary>Sets the mole of RiseJudgerOptim.GetName()</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("GetName", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<global::FinanceAnalyzer.Strategy.Rise.RiseJudgerOptim, string> GetName
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "GetName", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance);
            }
        }
    }
}
namespace FinanceAnalyzer.Properties.Moles
{
    /// <summary>Mole of Settings</summary>
    [global::Microsoft.Stubs.Framework.MoleClass(typeof(global::FinanceAnalyzer.Properties.Settings))]
    [global::System.CodeDom.Compiler.GeneratedCode("Stubs", "0.16.40915.5")]
    [global::System.Diagnostics.DebuggerDisplay("Mole = Settings")]
    [global::System.Diagnostics.DebuggerStepThrough]
    internal partial class MSettings
      : global::Microsoft.Stubs.Framework.MoleBase<global::FinanceAnalyzer.Properties.Settings>
    {
        /// <summary>Initializes a new instance</summary>
        public MSettings()
        : base(typeof(global::FinanceAnalyzer.Properties.Settings))
        {
        }

        /// <summary>Sets the mole of Settings.get_Default()</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("get_Default", global::Microsoft.Stubs.Framework.MoleBindingFlags.NonPublicStatic)]
        internal global::Microsoft.Stubs.Framework.StubDelegates.Func<global::FinanceAnalyzer.Properties.Settings> DefaultGet
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "get_Default", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.NonPublicStatic);
            }
        }

        /// <summary>Gets an mole instance to bind to Settings.get_Default()</summary>
        public TMole DefaultGetAsMole<TMole>()
            where TMole : global::Microsoft.Stubs.Framework.MoleBase<global::FinanceAnalyzer.Properties.Settings>, new()
        {
            global::Microsoft.Stubs.Framework
              .StubDelegates.Func<global::FinanceAnalyzer.Properties.Settings> mole
               = base.AttachMole<TMole, global::FinanceAnalyzer.Properties.Settings>
                  (ref this._defaultGetAsMole);
            if (mole != (global::Microsoft.Stubs.Framework
              .StubDelegates.Func<global::FinanceAnalyzer.Properties.Settings>)null)
              this.DefaultGet = mole;
            return (TMole)(this._defaultGetAsMole);
        }

        private global::Microsoft.Stubs.Framework.MoleBase<global::FinanceAnalyzer.Properties.Settings> _defaultGetAsMole;
    }
}
namespace FinanceAnalyzer.Moles
{
    /// <summary>Mole of Stock</summary>
    [global::Microsoft.Stubs.Framework.MoleClass(typeof(global::FinanceAnalyzer.Stock))]
    [global::System.CodeDom.Compiler.GeneratedCode("Stubs", "0.16.40915.5")]
    [global::System.Diagnostics.DebuggerDisplay("Mole = Stock")]
    [global::System.Diagnostics.DebuggerStepThrough]
    public partial class MStock
      : global::Microsoft.Stubs.Framework.MoleBase<global::FinanceAnalyzer.Stock>
    {
        /// <summary>Initializes a new instance</summary>
        public MStock()
        : base(typeof(global::FinanceAnalyzer.Stock))
        {
        }

        /// <summary>Sets the mole of Stock.Buy(Int32, Double)</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("Buy", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Action<global::FinanceAnalyzer.Stock, int, double> BuyInt32Double
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "Buy", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance, 
                typeof(int), typeof(double));
            }
        }

        /// <summary>Sets the mole of Stock.get_Count()</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("get_Count", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<global::FinanceAnalyzer.Stock, int> CountGet
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "get_Count", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance);
            }
        }

        /// <summary>Sets the mole of Stock.GetTotalPrice()</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("GetTotalPrice", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<global::FinanceAnalyzer.Stock, double> GetTotalPrice
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "GetTotalPrice", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance);
            }
        }

        /// <summary>Sets the mole of Stock.SellAll(Double)</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("SellAll", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<global::FinanceAnalyzer.Stock, double, double> SellAllDouble
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "SellAll", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance, 
                typeof(double));
            }
        }

        /// <summary>Sets the mole of Stock.Sell(Int32, Double)</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("Sell", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<global::FinanceAnalyzer.Stock, int, double, double> SellInt32Double
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "Sell", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance, 
                typeof(int), typeof(double));
            }
        }

        /// <summary>Sets the mole of Stock.get_StockID()</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("get_StockID", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<global::FinanceAnalyzer.Stock, int> StockIDGet
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "get_StockID", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance);
            }
        }

        /// <summary>Sets the mole of Stock.get_UnitPrice()</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("get_UnitPrice", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<global::FinanceAnalyzer.Stock, double> UnitPriceGet
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "get_UnitPrice", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance);
            }
        }

        /// <summary>Sets the mole of Stock.set_Count(Int32)</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("set_Count", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Action<global::FinanceAnalyzer.Stock, int> set_CountGetInt32
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "set_Count", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance, 
                typeof(int));
            }
        }

        /// <summary>Sets the mole of Stock.set_StockID(Int32)</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("set_StockID", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Action<global::FinanceAnalyzer.Stock, int> set_StockIDGetInt32
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "set_StockID", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance, 
                typeof(int));
            }
        }

        /// <summary>Sets the mole of Stock.set_UnitPrice(Double)</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("set_UnitPrice", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Action<global::FinanceAnalyzer.Stock, double> set_UnitPriceGetDouble
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "set_UnitPrice", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance, 
                typeof(double));
            }
        }
    }
}
namespace FinanceAnalyzer.Moles
{
    /// <summary>Mole of StockCommand</summary>
    [global::Microsoft.Stubs.Framework.MoleClass(typeof(global::FinanceAnalyzer.StockCommand))]
    [global::System.CodeDom.Compiler.GeneratedCode("Stubs", "0.16.40915.5")]
    [global::System.Diagnostics.DebuggerDisplay("Mole = StockCommand")]
    [global::System.Diagnostics.DebuggerStepThrough]
    public partial class MStockCommand
      : global::Microsoft.Stubs.Framework.MoleBase<global::FinanceAnalyzer.StockCommand>
    {
        /// <summary>Initializes a new instance</summary>
        public MStockCommand()
        : base(typeof(global::FinanceAnalyzer.StockCommand))
        {
        }

        /// <summary>Sets the mole of StockCommand.get_BuyOper()</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("get_BuyOper", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<global::FinanceAnalyzer.StockCommand, global::FinanceAnalyzer.StockOper> BuyOperGet
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "get_BuyOper", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance);
            }
        }

        /// <summary>Gets an mole instance to bind to StockCommand.get_BuyOper()</summary>
        public TMole BuyOperGetAsMole<TMole>()
            where TMole : global::Microsoft.Stubs.Framework.MoleBase<global::FinanceAnalyzer.StockOper>, new()
        {
            global::Microsoft.Stubs.Framework
              .StubDelegates.Func<global::FinanceAnalyzer.StockCommand, 
              global::FinanceAnalyzer.StockOper> mole
               = base.AttachMoleWithReceiver<TMole, global::FinanceAnalyzer.StockOper>
                  (ref this._buyOperGetAsMole);
            if (mole != (global::Microsoft.Stubs.Framework
              .StubDelegates.Func<global::FinanceAnalyzer.StockCommand, 
              global::FinanceAnalyzer.StockOper>)null)
              this.BuyOperGet = mole;
            return (TMole)(this._buyOperGetAsMole);
        }

        /// <summary>Sets the mole of StockCommand.get_SellOper()</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("get_SellOper", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<global::FinanceAnalyzer.StockCommand, global::FinanceAnalyzer.StockOper> SellOperGet
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "get_SellOper", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance);
            }
        }

        /// <summary>Gets an mole instance to bind to StockCommand.get_SellOper()</summary>
        public TMole SellOperGetAsMole<TMole>()
            where TMole : global::Microsoft.Stubs.Framework.MoleBase<global::FinanceAnalyzer.StockOper>, new()
        {
            global::Microsoft.Stubs.Framework
              .StubDelegates.Func<global::FinanceAnalyzer.StockCommand, 
              global::FinanceAnalyzer.StockOper> mole
               = base.AttachMoleWithReceiver<TMole, global::FinanceAnalyzer.StockOper>
                  (ref this._sellOperGetAsMole);
            if (mole != (global::Microsoft.Stubs.Framework
              .StubDelegates.Func<global::FinanceAnalyzer.StockCommand, 
              global::FinanceAnalyzer.StockOper>)null)
              this.SellOperGet = mole;
            return (TMole)(this._sellOperGetAsMole);
        }

        private global::Microsoft.Stubs.Framework.MoleBase<global::FinanceAnalyzer.StockOper> _buyOperGetAsMole;

        private global::Microsoft.Stubs.Framework.MoleBase<global::FinanceAnalyzer.StockOper> _sellOperGetAsMole;

        /// <summary>Sets the mole of StockCommand.set_BuyOper(StockOper)</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("set_BuyOper", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Action<global::FinanceAnalyzer.StockCommand, global::FinanceAnalyzer.StockOper> set_BuyOperGetStockOper
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "set_BuyOper", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance, 
                typeof(global::FinanceAnalyzer.StockOper));
            }
        }

        /// <summary>Sets the mole of StockCommand.set_SellOper(StockOper)</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("set_SellOper", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Action<global::FinanceAnalyzer.StockCommand, global::FinanceAnalyzer.StockOper> set_SellOperGetStockOper
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "set_SellOper", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance, 
                typeof(global::FinanceAnalyzer.StockOper));
            }
        }
    }
}
namespace FinanceAnalyzer.DB.Moles
{
    /// <summary>Mole of StockDBReader</summary>
    [global::Microsoft.Stubs.Framework.MoleClass(typeof(global::FinanceAnalyzer.DB.StockDBReader))]
    [global::System.CodeDom.Compiler.GeneratedCode("Stubs", "0.16.40915.5")]
    [global::System.Diagnostics.DebuggerDisplay("Mole = StockDBReader")]
    [global::System.Diagnostics.DebuggerStepThrough]
    public partial class MStockDBReader
      : global::Microsoft.Stubs.Framework.MoleBase<global::FinanceAnalyzer.DB.StockDBReader>
    {
        /// <summary>Initializes a new instance</summary>
        public MStockDBReader()
        : base(typeof(global::FinanceAnalyzer.DB.StockDBReader))
        {
        }

        /// <summary>Sets the mole of StockDBReader.get_ItemCount()</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("get_ItemCount", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<global::FinanceAnalyzer.DB.StockDBReader, int> ItemCountGet
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "get_ItemCount", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance);
            }
        }

        /// <summary>Sets the mole of StockDBReader.LoadAll()</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("LoadAll", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Action<global::FinanceAnalyzer.DB.StockDBReader> LoadAll
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "LoadAll", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance);
            }
        }

        /// <summary>Sets the mole of StockDBReader.LoadId()</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("LoadId", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicStatic)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<global::System.Collections.Generic.IList<int>> LoadId
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, 
                "LoadId", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicStatic);
            }
        }

        /// <summary>Sets the mole of StockDBReader.Load(Int32)</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("Load", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicStatic)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<int, global::System.Collections.Generic.IList<global::FinanceAnalyzer.DB.StockData>> LoadInt32
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "Load", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicStatic, 
                typeof(int));
            }
        }

        /// <summary>Sets the mole of StockDBReader.get_Stocks()</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("get_Stocks", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<global::FinanceAnalyzer.DB.StockDBReader, global::System.Collections.Generic.IList<global::FinanceAnalyzer.DB.StockData>> StocksGet
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "get_Stocks", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance);
            }
        }

        /// <summary>Gets an stub instance to bind to StockDBReader.get_Stocks()</summary>
        public TStub StocksGetAsStub<TStub>()
            where TStub : global::System.Collections.Generic.IList<global::FinanceAnalyzer.DB.StockData>, global::Microsoft.Stubs.Framework.IStub, new()
        {
            global::Microsoft.Stubs.Framework
              .StubDelegates.Func<global::FinanceAnalyzer.DB.StockDBReader, 
              global::System.Collections.Generic
                .IList<global::FinanceAnalyzer.DB.StockData>> stub
               = base.AttachStubWithReceiver<TStub, global::System.Collections.Generic
                .IList<global::FinanceAnalyzer.DB.StockData>>(ref this._stocksGetAsStub);
            if (stub != (global::Microsoft.Stubs.Framework
              .StubDelegates.Func<global::FinanceAnalyzer.DB.StockDBReader, 
              global::System.Collections.Generic
                .IList<global::FinanceAnalyzer.DB.StockData>>)null)
              this.StocksGet = stub;
            return (TStub)(this._stocksGetAsStub);
        }

        private global::Microsoft.Stubs.Framework.IStub _stocksGetAsStub;
    }
}
namespace FinanceAnalyzer.DB.Moles
{
    /// <summary>Mole of StockDBSaver</summary>
    [global::Microsoft.Stubs.Framework.MoleClass(typeof(global::FinanceAnalyzer.DB.StockDBSaver))]
    [global::System.CodeDom.Compiler.GeneratedCode("Stubs", "0.16.40915.5")]
    [global::System.Diagnostics.DebuggerDisplay("Mole = StockDBSaver")]
    [global::System.Diagnostics.DebuggerStepThrough]
    public partial class MStockDBSaver
      : global::Microsoft.Stubs.Framework.MoleBase<global::FinanceAnalyzer.DB.StockDBSaver>
    {
        /// <summary>Initializes a new instance</summary>
        public MStockDBSaver()
        : base(typeof(global::FinanceAnalyzer.DB.StockDBSaver))
        {
        }

        /// <summary>Sets the mole of StockDBSaver.Add(StockData)</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("Add", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Action<global::FinanceAnalyzer.DB.StockDBSaver, global::FinanceAnalyzer.DB.StockData> AddStockData
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "Add", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance, 
                typeof(global::FinanceAnalyzer.DB.StockData));
            }
        }

        /// <summary>Sets the mole of StockDBSaver.AfterAdd()</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("AfterAdd", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Action<global::FinanceAnalyzer.DB.StockDBSaver> AfterAdd
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "AfterAdd", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance);
            }
        }

        /// <summary>Sets the mole of StockDBSaver.BeforeAdd()</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("BeforeAdd", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Action<global::FinanceAnalyzer.DB.StockDBSaver> BeforeAdd
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "BeforeAdd", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance);
            }
        }
    }
}
namespace FinanceAnalyzer.DB.Moles
{
    /// <summary>Mole of StockData</summary>
    [global::Microsoft.Stubs.Framework.MoleClass(typeof(global::FinanceAnalyzer.DB.StockData))]
    [global::System.CodeDom.Compiler.GeneratedCode("Stubs", "0.16.40915.5")]
    [global::System.Diagnostics.DebuggerDisplay("Mole = StockData")]
    [global::System.Diagnostics.DebuggerStepThrough]
    public partial class MStockData
      : global::Microsoft.Stubs.Framework.MoleBase<global::FinanceAnalyzer.DB.StockData>
    {
        /// <summary>Initializes a new instance</summary>
        public MStockData()
        : base(typeof(global::FinanceAnalyzer.DB.StockData))
        {
        }

        /// <summary>Sets the mole of StockData.get_Amount()</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("get_Amount", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<global::FinanceAnalyzer.DB.StockData, double> AmountGet
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "get_Amount", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance);
            }
        }

        /// <summary>Sets the mole of StockData.get_EndPrice()</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("get_EndPrice", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<global::FinanceAnalyzer.DB.StockData, double> EndPriceGet
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "get_EndPrice", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance);
            }
        }

        /// <summary>Sets the mole of StockData.get_Id()</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("get_Id", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<global::FinanceAnalyzer.DB.StockData, int> IdGet
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, 
                "get_Id", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance);
            }
        }

        /// <summary>Sets the mole of StockData.get_MaxPrice()</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("get_MaxPrice", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<global::FinanceAnalyzer.DB.StockData, double> MaxPriceGet
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "get_MaxPrice", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance);
            }
        }

        /// <summary>Sets the mole of StockData.get_MinPrice()</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("get_MinPrice", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<global::FinanceAnalyzer.DB.StockData, double> MinPriceGet
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "get_MinPrice", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance);
            }
        }

        /// <summary>Sets the mole of StockData.get_StartPrice()</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("get_StartPrice", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<global::FinanceAnalyzer.DB.StockData, double> StartPriceGet
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "get_StartPrice", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance);
            }
        }

        /// <summary>Sets the mole of StockData.get_TradeDate()</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("get_TradeDate", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<global::FinanceAnalyzer.DB.StockData, global::System.DateTime> TradeDateGet
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "get_TradeDate", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance);
            }
        }

        /// <summary>Sets the mole of StockData.get_VolumeHand()</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("get_VolumeHand", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<global::FinanceAnalyzer.DB.StockData, int> VolumeHandGet
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "get_VolumeHand", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance);
            }
        }

        /// <summary>Sets the mole of StockData.set_Amount(Double)</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("set_Amount", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Action<global::FinanceAnalyzer.DB.StockData, double> set_AmountGetDouble
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "set_Amount", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance, 
                typeof(double));
            }
        }

        /// <summary>Sets the mole of StockData.set_EndPrice(Double)</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("set_EndPrice", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Action<global::FinanceAnalyzer.DB.StockData, double> set_EndPriceGetDouble
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "set_EndPrice", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance, 
                typeof(double));
            }
        }

        /// <summary>Sets the mole of StockData.set_Id(Int32)</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("set_Id", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Action<global::FinanceAnalyzer.DB.StockData, int> set_IdGetInt32
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "set_Id", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance, 
                typeof(int));
            }
        }

        /// <summary>Sets the mole of StockData.set_MaxPrice(Double)</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("set_MaxPrice", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Action<global::FinanceAnalyzer.DB.StockData, double> set_MaxPriceGetDouble
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "set_MaxPrice", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance, 
                typeof(double));
            }
        }

        /// <summary>Sets the mole of StockData.set_MinPrice(Double)</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("set_MinPrice", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Action<global::FinanceAnalyzer.DB.StockData, double> set_MinPriceGetDouble
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "set_MinPrice", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance, 
                typeof(double));
            }
        }

        /// <summary>Sets the mole of StockData.set_StartPrice(Double)</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("set_StartPrice", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Action<global::FinanceAnalyzer.DB.StockData, double> set_StartPriceGetDouble
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "set_StartPrice", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance, 
                typeof(double));
            }
        }

        /// <summary>Sets the mole of StockData.set_TradeDate(DateTime)</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("set_TradeDate", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Action<global::FinanceAnalyzer.DB.StockData, global::System.DateTime> set_TradeDateGetDateTime
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "set_TradeDate", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance, 
                typeof(global::System.DateTime));
            }
        }

        /// <summary>Sets the mole of StockData.set_VolumeHand(Int32)</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("set_VolumeHand", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Action<global::FinanceAnalyzer.DB.StockData, int> set_VolumeHandGetInt32
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "set_VolumeHand", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance, 
                typeof(int));
            }
        }
    }
}
namespace FinanceAnalyzer.Moles
{
    /// <summary>Mole of StockHistory</summary>
    [global::Microsoft.Stubs.Framework.MoleClass(typeof(global::FinanceAnalyzer.StockHistory))]
    [global::System.CodeDom.Compiler.GeneratedCode("Stubs", "0.16.40915.5")]
    [global::System.Diagnostics.DebuggerDisplay("Mole = StockHistory")]
    [global::System.Diagnostics.DebuggerStepThrough]
    public partial class MStockHistory
      : global::Microsoft.Stubs.Framework.MoleBase<global::FinanceAnalyzer.StockHistory>
    {
        /// <summary>Initializes a new instance</summary>
        public MStockHistory()
        : base(typeof(global::FinanceAnalyzer.StockHistory))
        {
        }

        /// <summary>Sets the mole of StockHistory.AddStock(DateTime, StockData)</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("AddStock", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Action<global::FinanceAnalyzer.StockHistory, global::System.DateTime, global::FinanceAnalyzer.DB.StockData> AddStockDateTimeStockData
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "AddStock", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance, 
                typeof(global::System.DateTime), 
                typeof(global::FinanceAnalyzer.DB.StockData));
            }
        }

        /// <summary>Sets the mole of StockHistory.Check(ILog)</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("Check", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Action<global::FinanceAnalyzer.StockHistory, global::FinanceAnalyzer.Log.ILog> CheckILog
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "Check", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance, 
                typeof(global::FinanceAnalyzer.Log.ILog));
            }
        }

        /// <summary>Sets the mole of StockHistory.Clear()</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("Clear", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Action<global::FinanceAnalyzer.StockHistory> Clear
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, 
                "Clear", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance);
            }
        }

        /// <summary>Sets the mole of StockHistory.GetPrevDay(DateTime)</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("GetPrevDay", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<global::FinanceAnalyzer.StockHistory, global::System.DateTime, global::System.DateTime> GetPrevDayDateTime
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "GetPrevDay", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance, 
                typeof(global::System.DateTime));
            }
        }

        /// <summary>Sets the mole of StockHistory.GetPrevDayStock(DateTime)</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("GetPrevDayStock", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<global::FinanceAnalyzer.StockHistory, global::System.DateTime, global::FinanceAnalyzer.DayStock> GetPrevDayStockDateTime
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "GetPrevDayStock", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance, 
                typeof(global::System.DateTime));
            }
        }

        /// <summary>Sets the mole of StockHistory.GetStock(DateTime)</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("GetStock", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<global::FinanceAnalyzer.StockHistory, global::System.DateTime, global::FinanceAnalyzer.DayStock> GetStockDateTime
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "GetStock", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance, 
                typeof(global::System.DateTime));
            }
        }

        /// <summary>Sets the mole of StockHistory.GetStockDrawer()</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("GetStockDrawer", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<global::FinanceAnalyzer.StockHistory, global::FinanceAnalyzer.IStockDrawer> GetStockDrawer
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "GetStockDrawer", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance);
            }
        }

        /// <summary>Sets the mole of StockHistory.InitAllStocks(IList`1&lt;StockData&gt;)</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("InitAllStocks", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Action<global::FinanceAnalyzer.StockHistory, global::System.Collections.Generic.IList<global::FinanceAnalyzer.DB.StockData>> InitAllStocksIListStockData
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "InitAllStocks", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance, 
                typeof(global::System.Collections.Generic
                  .IList<global::FinanceAnalyzer.DB.StockData>));
            }
        }

        /// <summary>Sets the mole of StockHistory.get_Instance()</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("get_Instance", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicStatic)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<global::FinanceAnalyzer.StockHistory> InstanceGet
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "get_Instance", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicStatic);
            }
        }

        /// <summary>Gets an mole instance to bind to StockHistory.get_Instance()</summary>
        public TMole InstanceGetAsMole<TMole>()
            where TMole : global::Microsoft.Stubs.Framework.MoleBase<global::FinanceAnalyzer.StockHistory>, new()
        {
            global::Microsoft.Stubs.Framework
              .StubDelegates.Func<global::FinanceAnalyzer.StockHistory> mole
               = base.AttachMole<TMole, global::FinanceAnalyzer.StockHistory>
                  (ref this._instanceGetAsMole);
            if (mole != (global::Microsoft.Stubs.Framework
              .StubDelegates.Func<global::FinanceAnalyzer.StockHistory>)null)
              this.InstanceGet = mole;
            return (TMole)(this._instanceGetAsMole);
        }

        /// <summary>Sets the mole of StockHistory.IsInRange(Double, Double)</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("IsInRange", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicStatic)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<double, double, bool> IsInRangeDoubleDouble
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "IsInRange", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicStatic, 
                typeof(double), typeof(double));
            }
        }

        /// <summary>Sets the mole of StockHistory.IsOperSuccess(DateTime, IStockOper)</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("IsOperSuccess", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<global::FinanceAnalyzer.StockHistory, global::System.DateTime, global::FinanceAnalyzer.IStockOper, bool> IsOperSuccessDateTimeIStockOper
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "IsOperSuccess", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance, 
                typeof(global::System.DateTime), typeof(global::FinanceAnalyzer.IStockOper));
            }
        }

        /// <summary>Sets the mole of StockHistory.get_MaxDate()</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("get_MaxDate", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<global::FinanceAnalyzer.StockHistory, global::System.DateTime> MaxDateGet
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "get_MaxDate", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance);
            }
        }

        /// <summary>Sets the mole of StockHistory.get_MinDate()</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("get_MinDate", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<global::FinanceAnalyzer.StockHistory, global::System.DateTime> MinDateGet
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "get_MinDate", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance);
            }
        }

        private global::Microsoft.Stubs.Framework.MoleBase<global::FinanceAnalyzer.StockHistory> _instanceGetAsMole;

        /// <summary>Sets the mole of StockHistory.set_MaxDate(DateTime)</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("set_MaxDate", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Action<global::FinanceAnalyzer.StockHistory, global::System.DateTime> set_MaxDateGetDateTime
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "set_MaxDate", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance, 
                typeof(global::System.DateTime));
            }
        }

        /// <summary>Sets the mole of StockHistory.set_MinDate(DateTime)</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("set_MinDate", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Action<global::FinanceAnalyzer.StockHistory, global::System.DateTime> set_MinDateGetDateTime
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "set_MinDate", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance, 
                typeof(global::System.DateTime));
            }
        }
    }
}
namespace FinanceAnalyzer.Moles
{
    /// <summary>Mole of StockHolder</summary>
    [global::Microsoft.Stubs.Framework.MoleClass(typeof(global::FinanceAnalyzer.StockHolder))]
    [global::System.CodeDom.Compiler.GeneratedCode("Stubs", "0.16.40915.5")]
    [global::System.Diagnostics.DebuggerDisplay("Mole = StockHolder")]
    [global::System.Diagnostics.DebuggerStepThrough]
    public partial class MStockHolder
      : global::Microsoft.Stubs.Framework.MoleBase<global::FinanceAnalyzer.StockHolder>
    {
        /// <summary>Initializes a new instance</summary>
        public MStockHolder()
        : base(typeof(global::FinanceAnalyzer.StockHolder))
        {
        }

        /// <summary>Sets the mole of StockHolder.BuyStock(Int32, Double)</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("BuyStock", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Action<global::FinanceAnalyzer.StockHolder, int, double> BuyStockInt32Double
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "BuyStock", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance, 
                typeof(int), typeof(double));
            }
        }

        /// <summary>Sets the mole of StockHolder.BuyStock(Stock)</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("BuyStock", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Action<global::FinanceAnalyzer.StockHolder, global::FinanceAnalyzer.Stock> BuyStockStock
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "BuyStock", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance, 
                typeof(global::FinanceAnalyzer.Stock));
            }
        }

        /// <summary>Sets the mole of StockHolder.GetUnitPrice()</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("GetUnitPrice", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<global::FinanceAnalyzer.StockHolder, double> GetUnitPrice
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "GetUnitPrice", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance);
            }
        }

        /// <summary>Sets the mole of StockHolder.HasStock()</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("HasStock", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<global::FinanceAnalyzer.StockHolder, bool> HasStock
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "HasStock", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance);
            }
        }

        /// <summary>Sets the mole of StockHolder.MarketValue(DateTime)</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("MarketValue", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<global::FinanceAnalyzer.StockHolder, global::System.DateTime, double> MarketValueDateTime
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "MarketValue", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance, 
                typeof(global::System.DateTime));
            }
        }

        /// <summary>Sets the mole of StockHolder.SellAllStocks(Double)</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("SellAllStocks", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<global::FinanceAnalyzer.StockHolder, double, double> SellAllStocksDouble
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "SellAllStocks", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance, 
                typeof(double));
            }
        }

        /// <summary>Sets the mole of StockHolder.SellStock(Int32, Double)</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("SellStock", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<global::FinanceAnalyzer.StockHolder, int, double, double> SellStockInt32Double
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "SellStock", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance, 
                typeof(int), typeof(double));
            }
        }

        /// <summary>Sets the mole of StockHolder.StockCount()</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("StockCount", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<global::FinanceAnalyzer.StockHolder, int> StockCount
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "StockCount", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance);
            }
        }
    }
}
namespace FinanceAnalyzer.Moles
{
    /// <summary>Mole of StockImporter</summary>
    [global::Microsoft.Stubs.Framework.MoleClass(typeof(global::FinanceAnalyzer.StockImporter))]
    [global::System.CodeDom.Compiler.GeneratedCode("Stubs", "0.16.40915.5")]
    [global::System.Diagnostics.DebuggerDisplay("Mole = StockImporter")]
    [global::System.Diagnostics.DebuggerStepThrough]
    public partial class MStockImporter
      : global::Microsoft.Stubs.Framework.MoleBase<global::FinanceAnalyzer.StockImporter>
    {
        /// <summary>Initializes a new instance</summary>
        public MStockImporter()
        : base(typeof(global::FinanceAnalyzer.StockImporter))
        {
        }

        /// <summary>Sets the mole of StockImporter.Import(String, StockHistory)</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("Import", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicStatic)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Action<string, global::FinanceAnalyzer.StockHistory> ImportStringStockHistory
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "Import", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicStatic, 
                typeof(string), typeof(global::FinanceAnalyzer.StockHistory));
            }
        }

        /// <summary>Sets the mole of StockImporter.set_StockSaver(IStockSaver)</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("set_StockSaver", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Action<global::FinanceAnalyzer.StockImporter, global::FinanceAnalyzer.DB.IStockSaver> set_StockSaverGetIStockSaver
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "set_StockSaver", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance, 
                typeof(global::FinanceAnalyzer.DB.IStockSaver));
            }
        }
    }
}
namespace FinanceAnalyzer.DB.Moles
{
    /// <summary>Mole of StockImporter2</summary>
    [global::Microsoft.Stubs.Framework.MoleClass(typeof(global::FinanceAnalyzer.DB.StockImporter2))]
    [global::System.CodeDom.Compiler.GeneratedCode("Stubs", "0.16.40915.5")]
    [global::System.Diagnostics.DebuggerDisplay("Mole = StockImporter2")]
    [global::System.Diagnostics.DebuggerStepThrough]
    public partial class MStockImporter2
      : global::Microsoft.Stubs.Framework.MoleBase<global::FinanceAnalyzer.DB.StockImporter2>
    {
        /// <summary>Initializes a new instance</summary>
        public MStockImporter2()
        : base(typeof(global::FinanceAnalyzer.DB.StockImporter2))
        {
        }

        /// <summary>Sets the mole of StockImporter2.Import(String)</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("Import", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Action<global::FinanceAnalyzer.DB.StockImporter2, string> ImportString
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "Import", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance, 
                typeof(string));
            }
        }

        /// <summary>Sets the mole of StockImporter2.ImportYahoo(String)</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("ImportYahoo", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Action<global::FinanceAnalyzer.DB.StockImporter2, string> ImportYahooString
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "ImportYahoo", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance, 
                typeof(string));
            }
        }

        /// <summary>Sets the mole of StockImporter2.set_StockSaver(IStockSaver)</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("set_StockSaver", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Action<global::FinanceAnalyzer.DB.StockImporter2, global::FinanceAnalyzer.DB.IStockSaver> set_StockSaverGetIStockSaver
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "set_StockSaver", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance, 
                typeof(global::FinanceAnalyzer.DB.IStockSaver));
            }
        }
    }
}
namespace FinanceAnalyzer.Moles
{
    /// <summary>Mole of StockOper</summary>
    [global::Microsoft.Stubs.Framework.MoleClass(typeof(global::FinanceAnalyzer.StockOper))]
    [global::System.CodeDom.Compiler.GeneratedCode("Stubs", "0.16.40915.5")]
    [global::System.Diagnostics.DebuggerDisplay("Mole = StockOper")]
    [global::System.Diagnostics.DebuggerStepThrough]
    public partial class MStockOper
      : global::Microsoft.Stubs.Framework.MoleBase<global::FinanceAnalyzer.StockOper>
    {
        /// <summary>Initializes a new instance</summary>
        public MStockOper()
        : base(typeof(global::FinanceAnalyzer.StockOper))
        {
        }

        /// <summary>Sets the mole of StockOper.GetCount()</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("GetCount", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<global::FinanceAnalyzer.StockOper, int> GetCount
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "GetCount", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance);
            }
        }

        /// <summary>Sets the mole of StockOper.GetOperType()</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("GetOperType", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<global::FinanceAnalyzer.StockOper, global::FinanceAnalyzer.OperType> GetOperType
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "GetOperType", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance);
            }
        }

        /// <summary>Sets the mole of StockOper.GetStockId()</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("GetStockId", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<global::FinanceAnalyzer.StockOper, int> GetStockId
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "GetStockId", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance);
            }
        }

        /// <summary>Sets the mole of StockOper.GetUnitPrice()</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("GetUnitPrice", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<global::FinanceAnalyzer.StockOper, double> GetUnitPrice
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "GetUnitPrice", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance);
            }
        }
    }
}
namespace FinanceAnalyzer.Moles
{
    /// <summary>Mole of StockPropDrawer</summary>
    [global::Microsoft.Stubs.Framework.MoleClass(typeof(global::FinanceAnalyzer.StockPropDrawer))]
    [global::System.CodeDom.Compiler.GeneratedCode("Stubs", "0.16.40915.5")]
    [global::System.Diagnostics.DebuggerDisplay("Mole = StockPropDrawer")]
    [global::System.Diagnostics.DebuggerStepThrough]
    internal partial class MStockPropDrawer
      : global::Microsoft.Stubs.Framework.MoleBase<global::FinanceAnalyzer.StockPropDrawer>
    {
        /// <summary>Initializes a new instance</summary>
        public MStockPropDrawer()
        : base(typeof(global::FinanceAnalyzer.StockPropDrawer))
        {
        }

        /// <summary>Sets the mole of StockPropDrawer.AddDayStock(DateTime, DayStock)</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("AddDayStock", global::Microsoft.Stubs.Framework.MoleBindingFlags.NonPublicInstance)]
        internal global::Microsoft.Stubs.Framework.StubDelegates.Action<global::FinanceAnalyzer.StockPropDrawer, global::System.DateTime, global::FinanceAnalyzer.DayStock> AddDayStockDateTimeDayStock
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "AddDayStock", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.NonPublicInstance, 
                typeof(global::System.DateTime), typeof(global::FinanceAnalyzer.DayStock));
            }
        }

        /// <summary>Sets the mole of StockPropDrawer.GetAt(DateTime)</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("GetAt", global::Microsoft.Stubs.Framework.MoleBindingFlags.NonPublicInstance)]
        internal global::Microsoft.Stubs.Framework.StubDelegates.Func<global::FinanceAnalyzer.StockPropDrawer, global::System.DateTime, global::ZedGraph.StockPt> GetAtDateTime
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "GetAt", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.NonPublicInstance, 
                typeof(global::System.DateTime));
            }
        }

        /// <summary>Sets the mole of StockPropDrawer.get_MaxDate()</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("get_MaxDate", global::Microsoft.Stubs.Framework.MoleBindingFlags.NonPublicInstance)]
        internal global::Microsoft.Stubs.Framework.StubDelegates.Func<global::FinanceAnalyzer.StockPropDrawer, global::System.DateTime> MaxDateGet
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "get_MaxDate", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.NonPublicInstance);
            }
        }

        /// <summary>Sets the mole of StockPropDrawer.get_MinDate()</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("get_MinDate", global::Microsoft.Stubs.Framework.MoleBindingFlags.NonPublicInstance)]
        internal global::Microsoft.Stubs.Framework.StubDelegates.Func<global::FinanceAnalyzer.StockPropDrawer, global::System.DateTime> MinDateGet
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "get_MinDate", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.NonPublicInstance);
            }
        }

        /// <summary>Sets the mole of StockPropDrawer.set_MaxDate(DateTime)</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("set_MaxDate", global::Microsoft.Stubs.Framework.MoleBindingFlags.NonPublicInstance)]
        internal global::Microsoft.Stubs.Framework.StubDelegates.Action<global::FinanceAnalyzer.StockPropDrawer, global::System.DateTime> set_MaxDateGetDateTime
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "set_MaxDate", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.NonPublicInstance, 
                typeof(global::System.DateTime));
            }
        }

        /// <summary>Sets the mole of StockPropDrawer.set_MinDate(DateTime)</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("set_MinDate", global::Microsoft.Stubs.Framework.MoleBindingFlags.NonPublicInstance)]
        internal global::Microsoft.Stubs.Framework.StubDelegates.Action<global::FinanceAnalyzer.StockPropDrawer, global::System.DateTime> set_MinDateGetDateTime
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "set_MinDate", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.NonPublicInstance, 
                typeof(global::System.DateTime));
            }
        }
    }
}
namespace FinanceAnalyzer.Moles
{
    /// <summary>Mole of StockValues</summary>
    [global::Microsoft.Stubs.Framework.MoleClass(typeof(global::FinanceAnalyzer.StockValues))]
    [global::System.CodeDom.Compiler.GeneratedCode("Stubs", "0.16.40915.5")]
    [global::System.Diagnostics.DebuggerDisplay("Mole = StockValues")]
    [global::System.Diagnostics.DebuggerStepThrough]
    public partial class MStockValues
      : global::Microsoft.Stubs.Framework.MoleBase<global::FinanceAnalyzer.StockValues>
    {
        /// <summary>Initializes a new instance</summary>
        public MStockValues()
        : base(typeof(global::FinanceAnalyzer.StockValues))
        {
        }

        /// <summary>Sets the mole of StockValues.GetAllDate()</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("GetAllDate", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<global::FinanceAnalyzer.StockValues, global::System.Collections.Generic.ICollection<global::System.DateTime>> GetAllDate
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "GetAllDate", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance);
            }
        }

        /// <summary>Sets the mole of StockValues.GetTotalValue(DateTime)</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("GetTotalValue", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<global::FinanceAnalyzer.StockValues, global::System.DateTime, double> GetTotalValueDateTime
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "GetTotalValue", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance, 
                typeof(global::System.DateTime));
            }
        }

        /// <summary>Sets the mole of StockValues.SetTotalValue(DateTime, Double)</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("SetTotalValue", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Action<global::FinanceAnalyzer.StockValues, global::System.DateTime, double> SetTotalValueDateTimeDouble
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "SetTotalValue", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance, 
                typeof(global::System.DateTime), typeof(double));
            }
        }

        /// <summary>Sets the mole of StockValues.get_TransactionCount()</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("get_TransactionCount", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<global::FinanceAnalyzer.StockValues, int> TransactionCountGet
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "get_TransactionCount", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance);
            }
        }

        /// <summary>Sets the mole of StockValues.set_TransactionCount(Int32)</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("set_TransactionCount", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Action<global::FinanceAnalyzer.StockValues, int> set_TransactionCountGetInt32
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "set_TransactionCount", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance, 
                typeof(int));
            }
        }
    }
}
namespace FinanceAnalyzer.Strategy.Moles
{
    /// <summary>Mole of StrategyBamboo</summary>
    [global::Microsoft.Stubs.Framework.MoleClass(typeof(global::FinanceAnalyzer.Strategy.StrategyBamboo))]
    [global::System.CodeDom.Compiler.GeneratedCode("Stubs", "0.16.40915.5")]
    [global::System.Diagnostics.DebuggerDisplay("Mole = StrategyBamboo")]
    [global::System.Diagnostics.DebuggerStepThrough]
    internal partial class MStrategyBamboo
      : global::Microsoft.Stubs.Framework.MoleBase<global::FinanceAnalyzer.Strategy.StrategyBamboo>
    {
        /// <summary>Initializes a new instance</summary>
        public MStrategyBamboo()
        : base(typeof(global::FinanceAnalyzer.Strategy.StrategyBamboo))
        {
        }

        /// <summary>Sets the mole of StrategyBamboo.GetOper(DateTime, IAccount)</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("GetOper", global::Microsoft.Stubs.Framework.MoleBindingFlags.NonPublicInstance)]
        internal global::Microsoft.Stubs.Framework.StubDelegates.Func<global::FinanceAnalyzer.Strategy.StrategyBamboo, global::System.DateTime, global::FinanceAnalyzer.IAccount, global::FinanceAnalyzer.StockCommand> GetOperDateTimeIAccount
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "GetOper", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.NonPublicInstance, 
                typeof(global::System.DateTime), typeof(global::FinanceAnalyzer.IAccount));
            }
        }

        /// <summary>Sets the mole of StrategyBamboo.get_Name()</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("get_Name", global::Microsoft.Stubs.Framework.MoleBindingFlags.NonPublicInstance)]
        internal global::Microsoft.Stubs.Framework.StubDelegates.Func<global::FinanceAnalyzer.Strategy.StrategyBamboo, string> NameGet
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "get_Name", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.NonPublicInstance);
            }
        }

        /// <summary>Gets an mole instance to bind to StrategyBamboo.get_Name()</summary>
        public TMole NameGetAsMole<TMole>()
            where TMole : global::Microsoft.Stubs.Framework.MoleBase<string>, new()
        {
            global::Microsoft.Stubs.Framework.StubDelegates
              .Func<global::FinanceAnalyzer.Strategy.StrategyBamboo, string> mole
               = base.AttachMoleWithReceiver<TMole, string>(ref this._nameGetAsMole);
            if (mole != (global::Microsoft.Stubs.Framework.StubDelegates.Func
                <global::FinanceAnalyzer.Strategy.StrategyBamboo, string>)null)
              this.NameGet = mole;
            return (TMole)(this._nameGetAsMole);
        }

        private global::Microsoft.Stubs.Framework.MoleBase<string> _nameGetAsMole;
    }
}
namespace FinanceAnalyzer.Strategy.Moles
{
    /// <summary>Mole of StrategyBear</summary>
    [global::Microsoft.Stubs.Framework.MoleClass(typeof(global::FinanceAnalyzer.Strategy.StrategyBear))]
    [global::System.CodeDom.Compiler.GeneratedCode("Stubs", "0.16.40915.5")]
    [global::System.Diagnostics.DebuggerDisplay("Mole = StrategyBear")]
    [global::System.Diagnostics.DebuggerStepThrough]
    public partial class MStrategyBear
      : global::Microsoft.Stubs.Framework.MoleBase<global::FinanceAnalyzer.Strategy.StrategyBear>
    {
        /// <summary>Initializes a new instance</summary>
        public MStrategyBear()
        : base(typeof(global::FinanceAnalyzer.Strategy.StrategyBear))
        {
        }

        /// <summary>Sets the mole of StrategyBear.GetOper(DateTime, IAccount)</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("GetOper", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<global::FinanceAnalyzer.Strategy.StrategyBear, global::System.DateTime, global::FinanceAnalyzer.IAccount, global::FinanceAnalyzer.StockCommand> GetOperDateTimeIAccount
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "GetOper", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance, 
                typeof(global::System.DateTime), typeof(global::FinanceAnalyzer.IAccount));
            }
        }

        /// <summary>Sets the mole of StrategyBear.get_Name()</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("get_Name", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<global::FinanceAnalyzer.Strategy.StrategyBear, string> NameGet
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "get_Name", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance);
            }
        }

        /// <summary>Gets an mole instance to bind to StrategyBear.get_Name()</summary>
        public TMole NameGetAsMole<TMole>()
            where TMole : global::Microsoft.Stubs.Framework.MoleBase<string>, new()
        {
            global::Microsoft.Stubs.Framework.StubDelegates
              .Func<global::FinanceAnalyzer.Strategy.StrategyBear, string> mole
               = base.AttachMoleWithReceiver<TMole, string>(ref this._nameGetAsMole);
            if (mole != (global::Microsoft.Stubs.Framework.StubDelegates
              .Func<global::FinanceAnalyzer.Strategy.StrategyBear, string>)null)
              this.NameGet = mole;
            return (TMole)(this._nameGetAsMole);
        }

        /// <summary>Sets the mole of StrategyBear.get_Profit()</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("get_Profit", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<global::FinanceAnalyzer.Strategy.StrategyBear, double> ProfitGet
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "get_Profit", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance);
            }
        }

        private global::Microsoft.Stubs.Framework.MoleBase<string> _nameGetAsMole;

        /// <summary>Sets the mole of StrategyBear.set_Profit(Double)</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("set_Profit", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Action<global::FinanceAnalyzer.Strategy.StrategyBear, double> set_ProfitGetDouble
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "set_Profit", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance, 
                typeof(double));
            }
        }
    }
}
namespace FinanceAnalyzer.Strategy.Moles
{
    /// <summary>Mole of StrategyFourday</summary>
    [global::Microsoft.Stubs.Framework.MoleClass(typeof(global::FinanceAnalyzer.Strategy.StrategyFourday))]
    [global::System.CodeDom.Compiler.GeneratedCode("Stubs", "0.16.40915.5")]
    [global::System.Diagnostics.DebuggerDisplay("Mole = StrategyFourday")]
    [global::System.Diagnostics.DebuggerStepThrough]
    internal partial class MStrategyFourday
      : global::Microsoft.Stubs.Framework.MoleBase<global::FinanceAnalyzer.Strategy.StrategyFourday>
    {
        /// <summary>Initializes a new instance</summary>
        public MStrategyFourday()
        : base(typeof(global::FinanceAnalyzer.Strategy.StrategyFourday))
        {
        }

        /// <summary>Sets the mole of StrategyFourday.GetOper(DateTime, IAccount)</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("GetOper", global::Microsoft.Stubs.Framework.MoleBindingFlags.NonPublicInstance)]
        internal global::Microsoft.Stubs.Framework.StubDelegates.Func<global::FinanceAnalyzer.Strategy.StrategyFourday, global::System.DateTime, global::FinanceAnalyzer.IAccount, global::FinanceAnalyzer.StockCommand> GetOperDateTimeIAccount
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "GetOper", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.NonPublicInstance, 
                typeof(global::System.DateTime), typeof(global::FinanceAnalyzer.IAccount));
            }
        }

        /// <summary>Sets the mole of StrategyFourday.get_Name()</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("get_Name", global::Microsoft.Stubs.Framework.MoleBindingFlags.NonPublicInstance)]
        internal global::Microsoft.Stubs.Framework.StubDelegates.Func<global::FinanceAnalyzer.Strategy.StrategyFourday, string> NameGet
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "get_Name", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.NonPublicInstance);
            }
        }

        /// <summary>Gets an mole instance to bind to StrategyFourday.get_Name()</summary>
        public TMole NameGetAsMole<TMole>()
            where TMole : global::Microsoft.Stubs.Framework.MoleBase<string>, new()
        {
            global::Microsoft.Stubs.Framework.StubDelegates
              .Func<global::FinanceAnalyzer.Strategy.StrategyFourday, string> mole
               = base.AttachMoleWithReceiver<TMole, string>(ref this._nameGetAsMole);
            if (mole != (global::Microsoft.Stubs.Framework.StubDelegates
              .Func<global::FinanceAnalyzer.Strategy.StrategyFourday, 
              string>)null)
              this.NameGet = mole;
            return (TMole)(this._nameGetAsMole);
        }

        private global::Microsoft.Stubs.Framework.MoleBase<string> _nameGetAsMole;
    }
}
namespace FinanceAnalyzer.Strategy.Moles
{
    /// <summary>Mole of StrategyHold</summary>
    [global::Microsoft.Stubs.Framework.MoleClass(typeof(global::FinanceAnalyzer.Strategy.StrategyHold))]
    [global::System.CodeDom.Compiler.GeneratedCode("Stubs", "0.16.40915.5")]
    [global::System.Diagnostics.DebuggerDisplay("Mole = StrategyHold")]
    [global::System.Diagnostics.DebuggerStepThrough]
    internal partial class MStrategyHold
      : global::Microsoft.Stubs.Framework.MoleBase<global::FinanceAnalyzer.Strategy.StrategyHold>
    {
        /// <summary>Initializes a new instance</summary>
        public MStrategyHold()
        : base(typeof(global::FinanceAnalyzer.Strategy.StrategyHold))
        {
        }

        /// <summary>Sets the mole of StrategyHold.GetOper(DateTime, IAccount)</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("GetOper", global::Microsoft.Stubs.Framework.MoleBindingFlags.NonPublicInstance)]
        internal global::Microsoft.Stubs.Framework.StubDelegates.Func<global::FinanceAnalyzer.Strategy.StrategyHold, global::System.DateTime, global::FinanceAnalyzer.IAccount, global::FinanceAnalyzer.StockCommand> GetOperDateTimeIAccount
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "GetOper", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.NonPublicInstance, 
                typeof(global::System.DateTime), typeof(global::FinanceAnalyzer.IAccount));
            }
        }

        /// <summary>Sets the mole of StrategyHold.get_Name()</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("get_Name", global::Microsoft.Stubs.Framework.MoleBindingFlags.NonPublicInstance)]
        internal global::Microsoft.Stubs.Framework.StubDelegates.Func<global::FinanceAnalyzer.Strategy.StrategyHold, string> NameGet
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "get_Name", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.NonPublicInstance);
            }
        }

        /// <summary>Gets an mole instance to bind to StrategyHold.get_Name()</summary>
        public TMole NameGetAsMole<TMole>()
            where TMole : global::Microsoft.Stubs.Framework.MoleBase<string>, new()
        {
            global::Microsoft.Stubs.Framework.StubDelegates
              .Func<global::FinanceAnalyzer.Strategy.StrategyHold, string> mole
               = base.AttachMoleWithReceiver<TMole, string>(ref this._nameGetAsMole);
            if (mole != (global::Microsoft.Stubs.Framework.StubDelegates
              .Func<global::FinanceAnalyzer.Strategy.StrategyHold, string>)null)
              this.NameGet = mole;
            return (TMole)(this._nameGetAsMole);
        }

        private global::Microsoft.Stubs.Framework.MoleBase<string> _nameGetAsMole;
    }
}
namespace FinanceAnalyzer.Strategy.Moles
{
    /// <summary>Mole of StrategyKd</summary>
    [global::Microsoft.Stubs.Framework.MoleClass(typeof(global::FinanceAnalyzer.Strategy.StrategyKd))]
    [global::System.CodeDom.Compiler.GeneratedCode("Stubs", "0.16.40915.5")]
    [global::System.Diagnostics.DebuggerDisplay("Mole = StrategyKd")]
    [global::System.Diagnostics.DebuggerStepThrough]
    public partial class MStrategyKd
      : global::Microsoft.Stubs.Framework.MoleBase<global::FinanceAnalyzer.Strategy.StrategyKd>
    {
        /// <summary>Initializes a new instance</summary>
        public MStrategyKd()
        : base(typeof(global::FinanceAnalyzer.Strategy.StrategyKd))
        {
        }

        /// <summary>Sets the mole of StrategyKd.GetOper(DateTime, IAccount)</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("GetOper", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<global::FinanceAnalyzer.Strategy.StrategyKd, global::System.DateTime, global::FinanceAnalyzer.IAccount, global::FinanceAnalyzer.StockCommand> GetOperDateTimeIAccount
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "GetOper", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance, 
                typeof(global::System.DateTime), typeof(global::FinanceAnalyzer.IAccount));
            }
        }

        /// <summary>Sets the mole of StrategyKd.get_Name()</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("get_Name", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<global::FinanceAnalyzer.Strategy.StrategyKd, string> NameGet
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "get_Name", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance);
            }
        }

        /// <summary>Gets an mole instance to bind to StrategyKd.get_Name()</summary>
        public TMole NameGetAsMole<TMole>()
            where TMole : global::Microsoft.Stubs.Framework.MoleBase<string>, new()
        {
            global::Microsoft.Stubs.Framework.StubDelegates
              .Func<global::FinanceAnalyzer.Strategy.StrategyKd, string> mole
               = base.AttachMoleWithReceiver<TMole, string>(ref this._nameGetAsMole);
            if (mole != (global::Microsoft.Stubs.Framework.StubDelegates
              .Func<global::FinanceAnalyzer.Strategy.StrategyKd, string>)null)
              this.NameGet = mole;
            return (TMole)(this._nameGetAsMole);
        }

        private global::Microsoft.Stubs.Framework.MoleBase<string> _nameGetAsMole;
    }
}
namespace FinanceAnalyzer.Strategy.Moles
{
    /// <summary>Mole of StrategyMinMax</summary>
    [global::Microsoft.Stubs.Framework.MoleClass(typeof(global::FinanceAnalyzer.Strategy.StrategyMinMax))]
    [global::System.CodeDom.Compiler.GeneratedCode("Stubs", "0.16.40915.5")]
    [global::System.Diagnostics.DebuggerDisplay("Mole = StrategyMinMax")]
    [global::System.Diagnostics.DebuggerStepThrough]
    public partial class MStrategyMinMax
      : global::Microsoft.Stubs.Framework.MoleBase<global::FinanceAnalyzer.Strategy.StrategyMinMax>
    {
        /// <summary>Initializes a new instance</summary>
        public MStrategyMinMax()
        : base(typeof(global::FinanceAnalyzer.Strategy.StrategyMinMax))
        {
        }

        /// <summary>Sets the mole of StrategyMinMax.GetOper(DateTime, IAccount)</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("GetOper", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<global::FinanceAnalyzer.Strategy.StrategyMinMax, global::System.DateTime, global::FinanceAnalyzer.IAccount, global::FinanceAnalyzer.StockCommand> GetOperDateTimeIAccount
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "GetOper", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance, 
                typeof(global::System.DateTime), typeof(global::FinanceAnalyzer.IAccount));
            }
        }

        /// <summary>Sets the mole of StrategyMinMax.get_Name()</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("get_Name", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<global::FinanceAnalyzer.Strategy.StrategyMinMax, string> NameGet
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "get_Name", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance);
            }
        }

        /// <summary>Gets an mole instance to bind to StrategyMinMax.get_Name()</summary>
        public TMole NameGetAsMole<TMole>()
            where TMole : global::Microsoft.Stubs.Framework.MoleBase<string>, new()
        {
            global::Microsoft.Stubs.Framework.StubDelegates
              .Func<global::FinanceAnalyzer.Strategy.StrategyMinMax, string> mole
               = base.AttachMoleWithReceiver<TMole, string>(ref this._nameGetAsMole);
            if (mole != (global::Microsoft.Stubs.Framework.StubDelegates.Func
                <global::FinanceAnalyzer.Strategy.StrategyMinMax, string>)null)
              this.NameGet = mole;
            return (TMole)(this._nameGetAsMole);
        }

        private global::Microsoft.Stubs.Framework.MoleBase<string> _nameGetAsMole;
    }
}
namespace FinanceAnalyzer.Strategy.Moles
{
    /// <summary>Mole of StrategyPercent</summary>
    [global::Microsoft.Stubs.Framework.MoleClass(typeof(global::FinanceAnalyzer.Strategy.StrategyPercent))]
    [global::System.CodeDom.Compiler.GeneratedCode("Stubs", "0.16.40915.5")]
    [global::System.Diagnostics.DebuggerDisplay("Mole = StrategyPercent")]
    [global::System.Diagnostics.DebuggerStepThrough]
    public partial class MStrategyPercent
      : global::Microsoft.Stubs.Framework.MoleBase<global::FinanceAnalyzer.Strategy.StrategyPercent>
    {
        /// <summary>Initializes a new instance</summary>
        public MStrategyPercent()
        : base(typeof(global::FinanceAnalyzer.Strategy.StrategyPercent))
        {
        }

        /// <summary>Sets the mole of StrategyPercent.GetOper(DateTime, IAccount)</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("GetOper", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<global::FinanceAnalyzer.Strategy.StrategyPercent, global::System.DateTime, global::FinanceAnalyzer.IAccount, global::FinanceAnalyzer.StockCommand> GetOperDateTimeIAccount
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "GetOper", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance, 
                typeof(global::System.DateTime), typeof(global::FinanceAnalyzer.IAccount));
            }
        }

        /// <summary>Sets the mole of StrategyPercent.get_Name()</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("get_Name", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<global::FinanceAnalyzer.Strategy.StrategyPercent, string> NameGet
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "get_Name", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance);
            }
        }

        /// <summary>Gets an mole instance to bind to StrategyPercent.get_Name()</summary>
        public TMole NameGetAsMole<TMole>()
            where TMole : global::Microsoft.Stubs.Framework.MoleBase<string>, new()
        {
            global::Microsoft.Stubs.Framework.StubDelegates
              .Func<global::FinanceAnalyzer.Strategy.StrategyPercent, string> mole
               = base.AttachMoleWithReceiver<TMole, string>(ref this._nameGetAsMole);
            if (mole != (global::Microsoft.Stubs.Framework.StubDelegates
              .Func<global::FinanceAnalyzer.Strategy.StrategyPercent, 
              string>)null)
              this.NameGet = mole;
            return (TMole)(this._nameGetAsMole);
        }

        /// <summary>Sets the mole of StrategyPercent.get_Profit()</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("get_Profit", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<global::FinanceAnalyzer.Strategy.StrategyPercent, double> ProfitGet
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "get_Profit", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance);
            }
        }

        private global::Microsoft.Stubs.Framework.MoleBase<string> _nameGetAsMole;

        /// <summary>Sets the mole of StrategyPercent.set_Profit(Double)</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("set_Profit", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Action<global::FinanceAnalyzer.Strategy.StrategyPercent, double> set_ProfitGetDouble
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "set_Profit", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance, 
                typeof(double));
            }
        }
    }
}
namespace FinanceAnalyzer.Moles
{
    /// <summary>Mole of StrategyResults</summary>
    [global::Microsoft.Stubs.Framework.MoleClass(typeof(global::FinanceAnalyzer.StrategyResults))]
    [global::System.CodeDom.Compiler.GeneratedCode("Stubs", "0.16.40915.5")]
    [global::System.Diagnostics.DebuggerDisplay("Mole = StrategyResults")]
    [global::System.Diagnostics.DebuggerStepThrough]
    public partial class MStrategyResults
      : global::Microsoft.Stubs.Framework.MoleBase<global::FinanceAnalyzer.StrategyResults>
    {
        /// <summary>Initializes a new instance</summary>
        public MStrategyResults()
        : base(typeof(global::FinanceAnalyzer.StrategyResults))
        {
        }

        /// <summary>Sets the mole of StrategyResults.AddResult(String, IStockValues)</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("AddResult", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Action<global::FinanceAnalyzer.StrategyResults, string, global::FinanceAnalyzer.IStockValues> AddResultStringIStockValues
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "AddResult", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance, 
                typeof(string), typeof(global::FinanceAnalyzer.IStockValues));
            }
        }

        /// <summary>Sets the mole of StrategyResults.GetAllStrategyNames()</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("GetAllStrategyNames", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<global::FinanceAnalyzer.StrategyResults, global::System.Collections.Generic.ICollection<string>> GetAllStrategyNames
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "GetAllStrategyNames", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance);
            }
        }

        /// <summary>Sets the mole of StrategyResults.GetResult(String)</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("GetResult", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<global::FinanceAnalyzer.StrategyResults, string, global::FinanceAnalyzer.IStockValues> GetResultString
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "GetResult", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance, 
                typeof(string));
            }
        }
    }
}
namespace FinanceAnalyzer.Strategy.Moles
{
    /// <summary>Mole of StrategyThreeDay</summary>
    [global::Microsoft.Stubs.Framework.MoleClass(typeof(global::FinanceAnalyzer.Strategy.StrategyThreeDay))]
    [global::System.CodeDom.Compiler.GeneratedCode("Stubs", "0.16.40915.5")]
    [global::System.Diagnostics.DebuggerDisplay("Mole = StrategyThreeDay")]
    [global::System.Diagnostics.DebuggerStepThrough]
    public partial class MStrategyThreeDay
      : global::Microsoft.Stubs.Framework.MoleBase<global::FinanceAnalyzer.Strategy.StrategyThreeDay>
    {
        /// <summary>Initializes a new instance</summary>
        public MStrategyThreeDay()
        : base(typeof(global::FinanceAnalyzer.Strategy.StrategyThreeDay))
        {
        }

        /// <summary>Sets the mole of StrategyThreeDay.GetOper(DateTime, IAccount)</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("GetOper", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<global::FinanceAnalyzer.Strategy.StrategyThreeDay, global::System.DateTime, global::FinanceAnalyzer.IAccount, global::FinanceAnalyzer.StockCommand> GetOperDateTimeIAccount
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "GetOper", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance, 
                typeof(global::System.DateTime), typeof(global::FinanceAnalyzer.IAccount));
            }
        }

        /// <summary>Sets the mole of StrategyThreeDay.get_Name()</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("get_Name", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<global::FinanceAnalyzer.Strategy.StrategyThreeDay, string> NameGet
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "get_Name", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance);
            }
        }

        /// <summary>Gets an mole instance to bind to StrategyThreeDay.get_Name()</summary>
        public TMole NameGetAsMole<TMole>()
            where TMole : global::Microsoft.Stubs.Framework.MoleBase<string>, new()
        {
            global::Microsoft.Stubs.Framework.StubDelegates
              .Func<global::FinanceAnalyzer.Strategy.StrategyThreeDay, string> mole
               = base.AttachMoleWithReceiver<TMole, string>(ref this._nameGetAsMole);
            if (mole != (global::Microsoft.Stubs.Framework.StubDelegates
              .Func<global::FinanceAnalyzer.Strategy.StrategyThreeDay, 
              string>)null)
              this.NameGet = mole;
            return (TMole)(this._nameGetAsMole);
        }

        private global::Microsoft.Stubs.Framework.MoleBase<string> _nameGetAsMole;
    }
}
namespace FinanceAnalyzer.Strategy.Moles
{
    /// <summary>Mole of StrategyThreeDayReverse</summary>
    [global::Microsoft.Stubs.Framework.MoleClass(typeof(global::FinanceAnalyzer.Strategy.StrategyThreeDayReverse))]
    [global::System.CodeDom.Compiler.GeneratedCode("Stubs", "0.16.40915.5")]
    [global::System.Diagnostics.DebuggerDisplay("Mole = StrategyThreeDayReverse")]
    [global::System.Diagnostics.DebuggerStepThrough]
    internal partial class MStrategyThreeDayReverse
      : global::Microsoft.Stubs.Framework.MoleBase<global::FinanceAnalyzer.Strategy.StrategyThreeDayReverse>
    {
        /// <summary>Initializes a new instance</summary>
        public MStrategyThreeDayReverse()
        : base(typeof(global::FinanceAnalyzer.Strategy.StrategyThreeDayReverse))
        {
        }

        /// <summary>Sets the mole of StrategyThreeDayReverse.GetOper(DateTime, IAccount)</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("GetOper", global::Microsoft.Stubs.Framework.MoleBindingFlags.NonPublicInstance)]
        internal global::Microsoft.Stubs.Framework.StubDelegates.Func<global::FinanceAnalyzer.Strategy.StrategyThreeDayReverse, global::System.DateTime, global::FinanceAnalyzer.IAccount, global::FinanceAnalyzer.StockCommand> GetOperDateTimeIAccount
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "GetOper", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.NonPublicInstance, 
                typeof(global::System.DateTime), typeof(global::FinanceAnalyzer.IAccount));
            }
        }

        /// <summary>Sets the mole of StrategyThreeDayReverse.get_Name()</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("get_Name", global::Microsoft.Stubs.Framework.MoleBindingFlags.NonPublicInstance)]
        internal global::Microsoft.Stubs.Framework.StubDelegates.Func<global::FinanceAnalyzer.Strategy.StrategyThreeDayReverse, string> NameGet
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "get_Name", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.NonPublicInstance);
            }
        }

        /// <summary>Gets an mole instance to bind to StrategyThreeDayReverse.get_Name()</summary>
        public TMole NameGetAsMole<TMole>()
            where TMole : global::Microsoft.Stubs.Framework.MoleBase<string>, new()
        {
            global::Microsoft.Stubs.Framework.StubDelegates
              .Func<global::FinanceAnalyzer.Strategy.StrategyThreeDayReverse, 
              string> mole
               = base.AttachMoleWithReceiver<TMole, string>(ref this._nameGetAsMole);
            if (mole != (global::Microsoft.Stubs.Framework
              .StubDelegates.Func<global::FinanceAnalyzer.Strategy
                .StrategyThreeDayReverse, string>)null)
              this.NameGet = mole;
            return (TMole)(this._nameGetAsMole);
        }

        private global::Microsoft.Stubs.Framework.MoleBase<string> _nameGetAsMole;
    }
}
namespace FinanceAnalyzer.Strategy.Moles
{
    /// <summary>Mole of StrategyThreedayOpti</summary>
    [global::Microsoft.Stubs.Framework.MoleClass(typeof(global::FinanceAnalyzer.Strategy.StrategyThreedayOpti))]
    [global::System.CodeDom.Compiler.GeneratedCode("Stubs", "0.16.40915.5")]
    [global::System.Diagnostics.DebuggerDisplay("Mole = StrategyThreedayOpti")]
    [global::System.Diagnostics.DebuggerStepThrough]
    internal partial class MStrategyThreedayOpti
      : global::Microsoft.Stubs.Framework.MoleBase<global::FinanceAnalyzer.Strategy.StrategyThreedayOpti>
    {
        /// <summary>Initializes a new instance</summary>
        public MStrategyThreedayOpti()
        : base(typeof(global::FinanceAnalyzer.Strategy.StrategyThreedayOpti))
        {
        }

        /// <summary>Sets the mole of StrategyThreedayOpti.GetOper(DateTime, IAccount)</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("GetOper", global::Microsoft.Stubs.Framework.MoleBindingFlags.NonPublicInstance)]
        internal global::Microsoft.Stubs.Framework.StubDelegates.Func<global::FinanceAnalyzer.Strategy.StrategyThreedayOpti, global::System.DateTime, global::FinanceAnalyzer.IAccount, global::FinanceAnalyzer.StockCommand> GetOperDateTimeIAccount
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "GetOper", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.NonPublicInstance, 
                typeof(global::System.DateTime), typeof(global::FinanceAnalyzer.IAccount));
            }
        }

        /// <summary>Sets the mole of StrategyThreedayOpti.get_Name()</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("get_Name", global::Microsoft.Stubs.Framework.MoleBindingFlags.NonPublicInstance)]
        internal global::Microsoft.Stubs.Framework.StubDelegates.Func<global::FinanceAnalyzer.Strategy.StrategyThreedayOpti, string> NameGet
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "get_Name", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.NonPublicInstance);
            }
        }

        /// <summary>Gets an mole instance to bind to StrategyThreedayOpti.get_Name()</summary>
        public TMole NameGetAsMole<TMole>()
            where TMole : global::Microsoft.Stubs.Framework.MoleBase<string>, new()
        {
            global::Microsoft.Stubs.Framework.StubDelegates
              .Func<global::FinanceAnalyzer.Strategy.StrategyThreedayOpti, 
              string> mole
               = base.AttachMoleWithReceiver<TMole, string>(ref this._nameGetAsMole);
            if (mole != (global::Microsoft.Stubs.Framework.StubDelegates
              .Func<global::FinanceAnalyzer.Strategy.StrategyThreedayOpti, 
              string>)null)
              this.NameGet = mole;
            return (TMole)(this._nameGetAsMole);
        }

        private global::Microsoft.Stubs.Framework.MoleBase<string> _nameGetAsMole;
    }
}
namespace FinanceAnalyzer.Moles
{
    /// <summary>Mole of Transaction</summary>
    [global::Microsoft.Stubs.Framework.MoleClass(typeof(global::FinanceAnalyzer.Transaction))]
    [global::System.CodeDom.Compiler.GeneratedCode("Stubs", "0.16.40915.5")]
    [global::System.Diagnostics.DebuggerDisplay("Mole = Transaction")]
    [global::System.Diagnostics.DebuggerStepThrough]
    public partial class MTransaction
      : global::Microsoft.Stubs.Framework.MoleBase<global::FinanceAnalyzer.Transaction>
    {
        /// <summary>Initializes a new instance</summary>
        public MTransaction()
        : base(typeof(global::FinanceAnalyzer.Transaction))
        {
        }

        /// <summary>Sets the mole of Transaction.GetCanBuyStockCount(Double, Double)</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("GetCanBuyStockCount", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicStatic)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<double, double, int> GetCanBuyStockCountDoubleDouble
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "GetCanBuyStockCount", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicStatic, 
                typeof(double), typeof(double));
            }
        }

        /// <summary>Sets the mole of Transaction.GetDutyCharge(Double)</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("GetDutyCharge", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicStatic)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<double, double> GetDutyChargeDouble
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "GetDutyCharge", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicStatic, 
                typeof(double));
            }
        }

        /// <summary>Sets the mole of Transaction.GetTotalCharge(Double)</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("GetTotalCharge", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicStatic)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<double, double> GetTotalChargeDouble
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "GetTotalCharge", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicStatic, 
                typeof(double));
            }
        }
    }
}
namespace FinanceAnalyzer.Strategy.Rise.Moles
{
    /// <summary>Mole of TwoDaysUpJudger</summary>
    [global::Microsoft.Stubs.Framework.MoleClass(typeof(global::FinanceAnalyzer.Strategy.Rise.TwoDaysUpJudger))]
    [global::System.CodeDom.Compiler.GeneratedCode("Stubs", "0.16.40915.5")]
    [global::System.Diagnostics.DebuggerDisplay("Mole = TwoDaysUpJudger")]
    [global::System.Diagnostics.DebuggerStepThrough]
    internal partial class MTwoDaysUpJudger
      : global::Microsoft.Stubs.Framework.MoleBase<global::FinanceAnalyzer.Strategy.Rise.TwoDaysUpJudger>
    {
        /// <summary>Initializes a new instance</summary>
        public MTwoDaysUpJudger()
        : base(typeof(global::FinanceAnalyzer.Strategy.Rise.TwoDaysUpJudger))
        {
        }

        /// <summary>Sets the mole of TwoDaysUpJudger.AllDown(DayStock, DayStock, DayStock)</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("AllDown", global::Microsoft.Stubs.Framework.MoleBindingFlags.NonPublicInstance)]
        internal global::Microsoft.Stubs.Framework.StubDelegates.Func<global::FinanceAnalyzer.Strategy.Rise.TwoDaysUpJudger, global::FinanceAnalyzer.DayStock, global::FinanceAnalyzer.DayStock, global::FinanceAnalyzer.DayStock, bool> AllDownDayStockDayStockDayStock
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "AllDown", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.NonPublicInstance, 
                typeof(global::FinanceAnalyzer.DayStock), 
                typeof(global::FinanceAnalyzer.DayStock), 
                typeof(global::FinanceAnalyzer.DayStock));
            }
        }

        /// <summary>Sets the mole of TwoDaysUpJudger.AllRise(DayStock, DayStock, DayStock)</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("AllRise", global::Microsoft.Stubs.Framework.MoleBindingFlags.NonPublicInstance)]
        internal global::Microsoft.Stubs.Framework.StubDelegates.Func<global::FinanceAnalyzer.Strategy.Rise.TwoDaysUpJudger, global::FinanceAnalyzer.DayStock, global::FinanceAnalyzer.DayStock, global::FinanceAnalyzer.DayStock, bool> AllRiseDayStockDayStockDayStock
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "AllRise", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.NonPublicInstance, 
                typeof(global::FinanceAnalyzer.DayStock), 
                typeof(global::FinanceAnalyzer.DayStock), 
                typeof(global::FinanceAnalyzer.DayStock));
            }
        }

        /// <summary>Sets the mole of TwoDaysUpJudger.GetName()</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("GetName", global::Microsoft.Stubs.Framework.MoleBindingFlags.NonPublicInstance)]
        internal global::Microsoft.Stubs.Framework.StubDelegates.Func<global::FinanceAnalyzer.Strategy.Rise.TwoDaysUpJudger, string> GetName
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "GetName", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.NonPublicInstance);
            }
        }
    }
}
namespace FinanceAnalyzer.Moles
{
    /// <summary>Mole of UIFileLog</summary>
    [global::Microsoft.Stubs.Framework.MoleClass(typeof(global::FinanceAnalyzer.UIFileLog))]
    [global::System.CodeDom.Compiler.GeneratedCode("Stubs", "0.16.40915.5")]
    [global::System.Diagnostics.DebuggerDisplay("Mole = UIFileLog")]
    [global::System.Diagnostics.DebuggerStepThrough]
    internal partial class MUIFileLog
      : global::Microsoft.Stubs.Framework.MoleBase<global::FinanceAnalyzer.UIFileLog>
    {
        /// <summary>Initializes a new instance</summary>
        public MUIFileLog()
        : base(typeof(global::FinanceAnalyzer.UIFileLog))
        {
        }

        /// <summary>Sets the mole of UIFileLog.Close()</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("Close", global::Microsoft.Stubs.Framework.MoleBindingFlags.NonPublicInstance)]
        internal global::Microsoft.Stubs.Framework.StubDelegates.Action<global::FinanceAnalyzer.UIFileLog> Close
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "Close", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.NonPublicInstance);
            }
        }

        /// <summary>Sets the mole of UIFileLog.Log(String)</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("Log", global::Microsoft.Stubs.Framework.MoleBindingFlags.NonPublicInstance)]
        internal global::Microsoft.Stubs.Framework.StubDelegates.Action<global::FinanceAnalyzer.UIFileLog, string> LogString
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "Log", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.NonPublicInstance, 
                typeof(string));
            }
        }
    }
}
namespace FinanceAnalyzer.Moles
{
    /// <summary>Mole of UILabelLog</summary>
    [global::Microsoft.Stubs.Framework.MoleClass(typeof(global::FinanceAnalyzer.UILabelLog))]
    [global::System.CodeDom.Compiler.GeneratedCode("Stubs", "0.16.40915.5")]
    [global::System.Diagnostics.DebuggerDisplay("Mole = UILabelLog")]
    [global::System.Diagnostics.DebuggerStepThrough]
    internal partial class MUILabelLog
      : global::Microsoft.Stubs.Framework.MoleBase<global::FinanceAnalyzer.UILabelLog>
    {
        /// <summary>Initializes a new instance</summary>
        public MUILabelLog()
        : base(typeof(global::FinanceAnalyzer.UILabelLog))
        {
        }

        /// <summary>Sets the mole of UILabelLog.Close()</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("Close", global::Microsoft.Stubs.Framework.MoleBindingFlags.NonPublicInstance)]
        internal global::Microsoft.Stubs.Framework.StubDelegates.Action<global::FinanceAnalyzer.UILabelLog> Close
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "Close", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.NonPublicInstance);
            }
        }

        /// <summary>Sets the mole of UILabelLog.LogInfo(String)</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("LogInfo", global::Microsoft.Stubs.Framework.MoleBindingFlags.NonPublicInstance)]
        internal global::Microsoft.Stubs.Framework.StubDelegates.Action<global::FinanceAnalyzer.UILabelLog, string> LogInfoString
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "LogInfo", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.NonPublicInstance, 
                typeof(string));
            }
        }

        /// <summary>Sets the mole of UILabelLog.LogInfo(String, Object)</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("LogInfo", global::Microsoft.Stubs.Framework.MoleBindingFlags.NonPublicInstance)]
        internal global::Microsoft.Stubs.Framework.StubDelegates.Action<global::FinanceAnalyzer.UILabelLog, string, object> LogInfoStringObject
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "LogInfo", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.NonPublicInstance, 
                typeof(string), typeof(object));
            }
        }

        /// <summary>Sets the mole of UILabelLog.LogInfo(String, Object, Object)</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("LogInfo", global::Microsoft.Stubs.Framework.MoleBindingFlags.NonPublicInstance)]
        internal global::Microsoft.Stubs.Framework.StubDelegates.Action<global::FinanceAnalyzer.UILabelLog, string, object, object> LogInfoStringObjectObject
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "LogInfo", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.NonPublicInstance, 
                typeof(string), typeof(object), typeof(object));
            }
        }

        /// <summary>Sets the mole of UILabelLog.LogInfo(String, Object, Object, Object)</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("LogInfo", global::Microsoft.Stubs.Framework.MoleBindingFlags.NonPublicInstance)]
        internal global::Microsoft.Stubs.Framework.StubDelegates.Action<global::FinanceAnalyzer.UILabelLog, string, object, object, object> LogInfoStringObjectObjectObject
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "LogInfo", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.NonPublicInstance, 
                typeof(string), typeof(object), typeof(object), typeof(object));
            }
        }

        /// <summary>Sets the mole of UILabelLog.Log(String)</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("Log", global::Microsoft.Stubs.Framework.MoleBindingFlags.NonPublicInstance)]
        internal global::Microsoft.Stubs.Framework.StubDelegates.Action<global::FinanceAnalyzer.UILabelLog, string> LogString
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "Log", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.NonPublicInstance, 
                typeof(string));
            }
        }

        /// <summary>Sets the mole of UILabelLog.set_LogListBox(ListBox)</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("set_LogListBox", global::Microsoft.Stubs.Framework.MoleBindingFlags.NonPublicInstance)]
        internal global::Microsoft.Stubs.Framework.StubDelegates.Action<global::FinanceAnalyzer.UILabelLog, global::System.Windows.Forms.ListBox> set_LogListBoxGetListBox
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "set_LogListBox", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.NonPublicInstance, 
                typeof(global::System.Windows.Forms.ListBox));
            }
        }
    }
}
namespace FinanceAnalyzer.Log.Moles
{
    /// <summary>Mole of UITraceLog</summary>
    [global::Microsoft.Stubs.Framework.MoleClass(typeof(global::FinanceAnalyzer.Log.UITraceLog))]
    [global::System.CodeDom.Compiler.GeneratedCode("Stubs", "0.16.40915.5")]
    [global::System.Diagnostics.DebuggerDisplay("Mole = UITraceLog")]
    [global::System.Diagnostics.DebuggerStepThrough]
    internal partial class MUITraceLog
      : global::Microsoft.Stubs.Framework.MoleBase<global::FinanceAnalyzer.Log.UITraceLog>
    {
        /// <summary>Initializes a new instance</summary>
        public MUITraceLog()
        : base(typeof(global::FinanceAnalyzer.Log.UITraceLog))
        {
        }

        /// <summary>Sets the mole of UITraceLog.Log(String)</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("Log", global::Microsoft.Stubs.Framework.MoleBindingFlags.NonPublicInstance)]
        internal global::Microsoft.Stubs.Framework.StubDelegates.Action<global::FinanceAnalyzer.Log.UITraceLog, string> LogString
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "Log", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.NonPublicInstance, 
                typeof(string));
            }
        }
    }
}
namespace FinanceAnalyzer.Strategy.Rise.Moles
{
    /// <summary>Mole of UpJudger</summary>
    [global::Microsoft.Stubs.Framework.MoleClass(typeof(global::FinanceAnalyzer.Strategy.Rise.UpJudger))]
    [global::System.CodeDom.Compiler.GeneratedCode("Stubs", "0.16.40915.5")]
    [global::System.Diagnostics.DebuggerDisplay("Mole = UpJudger")]
    [global::System.Diagnostics.DebuggerStepThrough]
    public partial class MUpJudger
      : global::Microsoft.Stubs.Framework.MoleBase<global::FinanceAnalyzer.Strategy.Rise.UpJudger>
    {
        /// <summary>Initializes a new instance</summary>
        public MUpJudger()
        : base(typeof(global::FinanceAnalyzer.Strategy.Rise.UpJudger))
        {
        }

        /// <summary>Sets the mole of UpJudger.AllDown(DayStock, DayStock, DayStock)</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("AllDown", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<global::FinanceAnalyzer.Strategy.Rise.UpJudger, global::FinanceAnalyzer.DayStock, global::FinanceAnalyzer.DayStock, global::FinanceAnalyzer.DayStock, bool> AllDownDayStockDayStockDayStock
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "AllDown", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance, 
                typeof(global::FinanceAnalyzer.DayStock), 
                typeof(global::FinanceAnalyzer.DayStock), 
                typeof(global::FinanceAnalyzer.DayStock));
            }
        }

        /// <summary>Sets the mole of UpJudger.AllRise(DayStock, DayStock, DayStock)</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("AllRise", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<global::FinanceAnalyzer.Strategy.Rise.UpJudger, global::FinanceAnalyzer.DayStock, global::FinanceAnalyzer.DayStock, global::FinanceAnalyzer.DayStock, bool> AllRiseDayStockDayStockDayStock
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "AllRise", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance, 
                typeof(global::FinanceAnalyzer.DayStock), 
                typeof(global::FinanceAnalyzer.DayStock), 
                typeof(global::FinanceAnalyzer.DayStock));
            }
        }

        /// <summary>Sets the mole of UpJudger.GetName()</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("GetName", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<global::FinanceAnalyzer.Strategy.Rise.UpJudger, string> GetName
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "GetName", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance);
            }
        }
    }
}
namespace FinanceAnalyzer.Strategy.Rise.Moles
{
    /// <summary>Mole of UpJudgerOptim</summary>
    [global::Microsoft.Stubs.Framework.MoleClass(typeof(global::FinanceAnalyzer.Strategy.Rise.UpJudgerOptim))]
    [global::System.CodeDom.Compiler.GeneratedCode("Stubs", "0.16.40915.5")]
    [global::System.Diagnostics.DebuggerDisplay("Mole = UpJudgerOptim")]
    [global::System.Diagnostics.DebuggerStepThrough]
    public partial class MUpJudgerOptim
      : global::Microsoft.Stubs.Framework.MoleBase<global::FinanceAnalyzer.Strategy.Rise.UpJudgerOptim>
    {
        /// <summary>Initializes a new instance</summary>
        public MUpJudgerOptim()
        : base(typeof(global::FinanceAnalyzer.Strategy.Rise.UpJudgerOptim))
        {
        }

        /// <summary>Sets the mole of UpJudgerOptim.AllDown(DayStock, DayStock, DayStock)</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("AllDown", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<global::FinanceAnalyzer.Strategy.Rise.UpJudgerOptim, global::FinanceAnalyzer.DayStock, global::FinanceAnalyzer.DayStock, global::FinanceAnalyzer.DayStock, bool> AllDownDayStockDayStockDayStock
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "AllDown", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance, 
                typeof(global::FinanceAnalyzer.DayStock), 
                typeof(global::FinanceAnalyzer.DayStock), 
                typeof(global::FinanceAnalyzer.DayStock));
            }
        }

        /// <summary>Sets the mole of UpJudgerOptim.AllRise(DayStock, DayStock, DayStock)</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("AllRise", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<global::FinanceAnalyzer.Strategy.Rise.UpJudgerOptim, global::FinanceAnalyzer.DayStock, global::FinanceAnalyzer.DayStock, global::FinanceAnalyzer.DayStock, bool> AllRiseDayStockDayStockDayStock
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "AllRise", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance, 
                typeof(global::FinanceAnalyzer.DayStock), 
                typeof(global::FinanceAnalyzer.DayStock), 
                typeof(global::FinanceAnalyzer.DayStock));
            }
        }

        /// <summary>Sets the mole of UpJudgerOptim.GetName()</summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("GetName", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance)]
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<global::FinanceAnalyzer.Strategy.Rise.UpJudgerOptim, string> GetName
        {
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                base.SetStub((global::System.Delegate)value, "GetName", 
                global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance);
            }
        }
    }
}
namespace FinanceAnalyzer.Stubs
{
    /// <summary>Stub of Account</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Stubs", "0.16.40915.5")]
    [global::System.Serializable]
    [global::System.Diagnostics.DebuggerDisplay("Stub = Account")]
    [global::System.Diagnostics.DebuggerStepThrough]
    public partial class SAccount
      : global::FinanceAnalyzer.Account
      , global::Microsoft.Stubs.Framework.IStub
      , global::Microsoft.Stubs.Framework.IPartialStub
    {
        /// <summary>Initializes a new instance</summary>
        [global::System.Diagnostics.DebuggerHidden]
        public SAccount()
        {
            this.InitializeStub();
        }

        /// <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        public bool CallBase
        {
            [global::System.Diagnostics.DebuggerHidden]
            get
            {
                return this.callBase;
            }
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                this.callBase = value;
            }
        }

        /// <summary>Gets or sets the fallback behavior.</summary>
        public global::Microsoft.Stubs.Framework.IStubBehavior FallbackBehavior
        {
            [global::System.Diagnostics.DebuggerHidden]
            get
            {
                return global::Microsoft.Stubs.Framework.StubFallbackBehavior.GetValueOrCurrent
                    (this.defaultStub);
            }
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                this.defaultStub = value;
            }
        }

        /// <summary>Initializes a new instance of type SAccount</summary>
        [global::System.Diagnostics.DebuggerHidden]
        private void InitializeStub()
        {
        }

        private bool callBase;

        private global::Microsoft.Stubs.Framework.IStubBehavior defaultStub;
    }
}
namespace FinanceAnalyzer.DB.Stubs
{
    /// <summary>Stub of Bonus</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Stubs", "0.16.40915.5")]
    [global::System.Serializable]
    [global::System.Diagnostics.DebuggerDisplay("Stub = Bonus")]
    [global::System.Diagnostics.DebuggerStepThrough]
    public partial class SBonus
      : global::FinanceAnalyzer.DB.Bonus
      , global::Microsoft.Stubs.Framework.IStub
      , global::Microsoft.Stubs.Framework.IPartialStub
    {
        /// <summary>Initializes a new instance</summary>
        [global::System.Diagnostics.DebuggerHidden]
        public SBonus()
        {
            this.InitializeStub();
        }

        /// <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        public bool CallBase
        {
            [global::System.Diagnostics.DebuggerHidden]
            get
            {
                return this.callBase;
            }
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                this.callBase = value;
            }
        }

        /// <summary>Gets or sets the fallback behavior.</summary>
        public global::Microsoft.Stubs.Framework.IStubBehavior FallbackBehavior
        {
            [global::System.Diagnostics.DebuggerHidden]
            get
            {
                return global::Microsoft.Stubs.Framework.StubFallbackBehavior.GetValueOrCurrent
                    (this.defaultStub);
            }
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                this.defaultStub = value;
            }
        }

        /// <summary>Initializes a new instance of type SBonus</summary>
        [global::System.Diagnostics.DebuggerHidden]
        private void InitializeStub()
        {
        }

        private bool callBase;

        private global::Microsoft.Stubs.Framework.IStubBehavior defaultStub;
    }
}
namespace FinanceAnalyzer.DB.Stubs
{
    /// <summary>Stub of BonusReader</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Stubs", "0.16.40915.5")]
    [global::System.Serializable]
    [global::System.Diagnostics.DebuggerDisplay("Stub = BonusReader")]
    [global::System.Diagnostics.DebuggerStepThrough]
    public partial class SBonusReader
      : global::FinanceAnalyzer.DB.BonusReader
      , global::Microsoft.Stubs.Framework.IStub
      , global::Microsoft.Stubs.Framework.IPartialStub
    {
        /// <summary>Initializes a new instance</summary>
        [global::System.Diagnostics.DebuggerHidden]
        public SBonusReader()
        {
            this.InitializeStub();
        }

        /// <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        public bool CallBase
        {
            [global::System.Diagnostics.DebuggerHidden]
            get
            {
                return this.callBase;
            }
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                this.callBase = value;
            }
        }

        /// <summary>Gets or sets the fallback behavior.</summary>
        public global::Microsoft.Stubs.Framework.IStubBehavior FallbackBehavior
        {
            [global::System.Diagnostics.DebuggerHidden]
            get
            {
                return global::Microsoft.Stubs.Framework.StubFallbackBehavior.GetValueOrCurrent
                    (this.defaultStub);
            }
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                this.defaultStub = value;
            }
        }

        /// <summary>Initializes a new instance of type SBonusReader</summary>
        [global::System.Diagnostics.DebuggerHidden]
        private void InitializeStub()
        {
        }

        private bool callBase;

        private global::Microsoft.Stubs.Framework.IStubBehavior defaultStub;
    }
}
namespace FinanceAnalyzer.Stubs
{
    /// <summary>Stub of ColorMgr</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Stubs", "0.16.40915.5")]
    [global::System.Serializable]
    [global::System.Diagnostics.DebuggerDisplay("Stub = ColorMgr")]
    [global::System.Diagnostics.DebuggerStepThrough]
    public partial class SColorMgr
      : global::FinanceAnalyzer.ColorMgr
      , global::Microsoft.Stubs.Framework.IStub
      , global::Microsoft.Stubs.Framework.IPartialStub
    {
        /// <summary>Initializes a new instance</summary>
        [global::System.Diagnostics.DebuggerHidden]
        public SColorMgr()
        {
            this.InitializeStub();
        }

        /// <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        public bool CallBase
        {
            [global::System.Diagnostics.DebuggerHidden]
            get
            {
                return this.callBase;
            }
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                this.callBase = value;
            }
        }

        /// <summary>Gets or sets the fallback behavior.</summary>
        public global::Microsoft.Stubs.Framework.IStubBehavior FallbackBehavior
        {
            [global::System.Diagnostics.DebuggerHidden]
            get
            {
                return global::Microsoft.Stubs.Framework.StubFallbackBehavior.GetValueOrCurrent
                    (this.defaultStub);
            }
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                this.defaultStub = value;
            }
        }

        /// <summary>Initializes a new instance of type SColorMgr</summary>
        [global::System.Diagnostics.DebuggerHidden]
        private void InitializeStub()
        {
        }

        private bool callBase;

        private global::Microsoft.Stubs.Framework.IStubBehavior defaultStub;
    }
}
namespace FinanceAnalyzer.Stubs
{
    /// <summary>Stub of DateFunc</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Stubs", "0.16.40915.5")]
    [global::System.Serializable]
    [global::System.Diagnostics.DebuggerDisplay("Stub = DateFunc")]
    [global::System.Diagnostics.DebuggerStepThrough]
    public partial class SDateFunc
      : global::FinanceAnalyzer.DateFunc
      , global::Microsoft.Stubs.Framework.IStub
      , global::Microsoft.Stubs.Framework.IPartialStub
    {
        /// <summary>Initializes a new instance</summary>
        [global::System.Diagnostics.DebuggerHidden]
        public SDateFunc()
        {
            this.InitializeStub();
        }

        /// <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        public bool CallBase
        {
            [global::System.Diagnostics.DebuggerHidden]
            get
            {
                return this.callBase;
            }
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                this.callBase = value;
            }
        }

        /// <summary>Gets or sets the fallback behavior.</summary>
        public global::Microsoft.Stubs.Framework.IStubBehavior FallbackBehavior
        {
            [global::System.Diagnostics.DebuggerHidden]
            get
            {
                return global::Microsoft.Stubs.Framework.StubFallbackBehavior.GetValueOrCurrent
                    (this.defaultStub);
            }
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                this.defaultStub = value;
            }
        }

        /// <summary>Initializes a new instance of type SDateFunc</summary>
        [global::System.Diagnostics.DebuggerHidden]
        private void InitializeStub()
        {
        }

        private bool callBase;

        private global::Microsoft.Stubs.Framework.IStubBehavior defaultStub;
    }
}
namespace FinanceAnalyzer.Stubs
{
    /// <summary>Stub of DayStock</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Stubs", "0.16.40915.5")]
    [global::System.Serializable]
    [global::System.Diagnostics.DebuggerDisplay("Stub = DayStock")]
    [global::System.Diagnostics.DebuggerStepThrough]
    public partial class SDayStock
      : global::FinanceAnalyzer.DayStock
      , global::Microsoft.Stubs.Framework.IStub
      , global::Microsoft.Stubs.Framework.IPartialStub
    {
        /// <summary>Initializes a new instance</summary>
        [global::System.Diagnostics.DebuggerHidden]
        public SDayStock()
        {
            this.InitializeStub();
        }

        /// <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        public bool CallBase
        {
            [global::System.Diagnostics.DebuggerHidden]
            get
            {
                return this.callBase;
            }
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                this.callBase = value;
            }
        }

        /// <summary>Gets or sets the fallback behavior.</summary>
        public global::Microsoft.Stubs.Framework.IStubBehavior FallbackBehavior
        {
            [global::System.Diagnostics.DebuggerHidden]
            get
            {
                return global::Microsoft.Stubs.Framework.StubFallbackBehavior.GetValueOrCurrent
                    (this.defaultStub);
            }
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                this.defaultStub = value;
            }
        }

        /// <summary>Initializes a new instance of type SDayStock</summary>
        [global::System.Diagnostics.DebuggerHidden]
        private void InitializeStub()
        {
        }

        private bool callBase;

        private global::Microsoft.Stubs.Framework.IStubBehavior defaultStub;
    }
}
namespace FinanceAnalyzer.Log.Stubs
{
    /// <summary>Stub of DummyLog</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Stubs", "0.16.40915.5")]
    [global::System.Serializable]
    [global::System.Diagnostics.DebuggerDisplay("Stub = DummyLog")]
    [global::System.Diagnostics.DebuggerStepThrough]
    public partial class SDummyLog
      : global::FinanceAnalyzer.Log.DummyLog
      , global::Microsoft.Stubs.Framework.IStub
      , global::Microsoft.Stubs.Framework.IPartialStub
    {
        /// <summary>Initializes a new instance</summary>
        [global::System.Diagnostics.DebuggerHidden]
        public SDummyLog()
        {
            this.InitializeStub();
        }

        /// <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        public bool CallBase
        {
            [global::System.Diagnostics.DebuggerHidden]
            get
            {
                return this.callBase;
            }
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                this.callBase = value;
            }
        }

        /// <summary>Gets or sets the fallback behavior.</summary>
        public global::Microsoft.Stubs.Framework.IStubBehavior FallbackBehavior
        {
            [global::System.Diagnostics.DebuggerHidden]
            get
            {
                return global::Microsoft.Stubs.Framework.StubFallbackBehavior.GetValueOrCurrent
                    (this.defaultStub);
            }
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                this.defaultStub = value;
            }
        }

        /// <summary>Initializes a new instance of type SDummyLog</summary>
        [global::System.Diagnostics.DebuggerHidden]
        private void InitializeStub()
        {
        }

        private bool callBase;

        private global::Microsoft.Stubs.Framework.IStubBehavior defaultStub;
    }
}
namespace FinanceAnalyzer.Stubs
{
    /// <summary>Stub of FinanceRunner</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Stubs", "0.16.40915.5")]
    [global::System.Serializable]
    [global::System.Diagnostics.DebuggerDisplay("Stub = FinanceRunner")]
    [global::System.Diagnostics.DebuggerStepThrough]
    public partial class SFinanceRunner
      : global::FinanceAnalyzer.FinanceRunner
      , global::Microsoft.Stubs.Framework.IStub
      , global::Microsoft.Stubs.Framework.IPartialStub
    {
        /// <summary>Initializes a new instance</summary>
        [global::System.Diagnostics.DebuggerHidden]
        public SFinanceRunner()
        {
            this.InitializeStub();
        }

        /// <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        public bool CallBase
        {
            [global::System.Diagnostics.DebuggerHidden]
            get
            {
                return this.callBase;
            }
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                this.callBase = value;
            }
        }

        /// <summary>Gets or sets the fallback behavior.</summary>
        public global::Microsoft.Stubs.Framework.IStubBehavior FallbackBehavior
        {
            [global::System.Diagnostics.DebuggerHidden]
            get
            {
                return global::Microsoft.Stubs.Framework.StubFallbackBehavior.GetValueOrCurrent
                    (this.defaultStub);
            }
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                this.defaultStub = value;
            }
        }

        /// <summary>Initializes a new instance of type SFinanceRunner</summary>
        [global::System.Diagnostics.DebuggerHidden]
        private void InitializeStub()
        {
        }

        private bool callBase;

        private global::Microsoft.Stubs.Framework.IStubBehavior defaultStub;
    }
}
namespace FinanceAnalyzer.UI.Stubs
{
    /// <summary>Stub of FormBonus</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Stubs", "0.16.40915.5")]
    [global::System.Serializable]
    [global::System.Diagnostics.DebuggerDisplay("Stub = FormBonus")]
    [global::System.Diagnostics.DebuggerStepThrough]
    public partial class SFormBonus
      : global::FinanceAnalyzer.UI.FormBonus
      , global::Microsoft.Stubs.Framework.IStub
      , global::Microsoft.Stubs.Framework.IPartialStub
    {
        /// <summary>Initializes a new instance</summary>
        [global::System.Diagnostics.DebuggerHidden]
        public SFormBonus()
        {
            this.InitializeStub();
        }

        /// <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        public bool CallBase
        {
            [global::System.Diagnostics.DebuggerHidden]
            get
            {
                return this.callBase;
            }
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                this.callBase = value;
            }
        }

        /// <summary>Stub of method System.Void FinanceAnalyzer.UI.FormBonus.Dispose(System.Boolean disposing)</summary>
        [global::System.Diagnostics.DebuggerHidden]
        protected override void Dispose(bool disposing)
        {
            global::Microsoft.Stubs.Framework.StubDelegates.Action<bool> sh
               = this.DisposeBoolean;
            if (sh != (global::Microsoft.Stubs.Framework.StubDelegates.Action<bool>)null)
              sh.Invoke(disposing);
            else 
            {
              if (this.callBase)
                base.Dispose(disposing);
              else 
              {
                global::Microsoft.Stubs.Framework.IStubBehavior stub = this.FallbackBehavior
                  ;
                stub.VoidResult<global::FinanceAnalyzer.UI.Stubs.SFormBonus>(this);
              }
            }
        }

        /// <summary>Stub of method System.Void FinanceAnalyzer.UI.FormBonus.Dispose(System.Boolean disposing)</summary>
        public global::Microsoft.Stubs.Framework.StubDelegates.Action<bool> DisposeBoolean;

        /// <summary>Gets or sets the fallback behavior.</summary>
        public global::Microsoft.Stubs.Framework.IStubBehavior FallbackBehavior
        {
            [global::System.Diagnostics.DebuggerHidden]
            get
            {
                return global::Microsoft.Stubs.Framework.StubFallbackBehavior.GetValueOrCurrent
                    (this.defaultStub);
            }
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                this.defaultStub = value;
            }
        }

        /// <summary>Initializes a new instance of type SFormBonus</summary>
        [global::System.Diagnostics.DebuggerHidden]
        private void InitializeStub()
        {
        }

        private bool callBase;

        private global::Microsoft.Stubs.Framework.IStubBehavior defaultStub;
    }
}
namespace FinanceAnalyzer.UI.Stubs
{
    /// <summary>Stub of FormBonusAdd</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Stubs", "0.16.40915.5")]
    [global::System.Serializable]
    [global::System.Diagnostics.DebuggerDisplay("Stub = FormBonusAdd")]
    [global::System.Diagnostics.DebuggerStepThrough]
    public partial class SFormBonusAdd
      : global::FinanceAnalyzer.UI.FormBonusAdd
      , global::Microsoft.Stubs.Framework.IStub
      , global::Microsoft.Stubs.Framework.IPartialStub
    {
        /// <summary>Initializes a new instance</summary>
        [global::System.Diagnostics.DebuggerHidden]
        public SFormBonusAdd()
        {
            this.InitializeStub();
        }

        /// <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        public bool CallBase
        {
            [global::System.Diagnostics.DebuggerHidden]
            get
            {
                return this.callBase;
            }
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                this.callBase = value;
            }
        }

        /// <summary>Stub of method System.Void FinanceAnalyzer.UI.FormBonusAdd.Dispose(System.Boolean disposing)</summary>
        [global::System.Diagnostics.DebuggerHidden]
        protected override void Dispose(bool disposing)
        {
            global::Microsoft.Stubs.Framework.StubDelegates.Action<bool> sh
               = this.DisposeBoolean;
            if (sh != (global::Microsoft.Stubs.Framework.StubDelegates.Action<bool>)null)
              sh.Invoke(disposing);
            else 
            {
              if (this.callBase)
                base.Dispose(disposing);
              else 
              {
                global::Microsoft.Stubs.Framework.IStubBehavior stub = this.FallbackBehavior
                  ;
                stub.VoidResult<global::FinanceAnalyzer.UI.Stubs.SFormBonusAdd>(this);
              }
            }
        }

        /// <summary>Stub of method System.Void FinanceAnalyzer.UI.FormBonusAdd.Dispose(System.Boolean disposing)</summary>
        public global::Microsoft.Stubs.Framework.StubDelegates.Action<bool> DisposeBoolean;

        /// <summary>Gets or sets the fallback behavior.</summary>
        public global::Microsoft.Stubs.Framework.IStubBehavior FallbackBehavior
        {
            [global::System.Diagnostics.DebuggerHidden]
            get
            {
                return global::Microsoft.Stubs.Framework.StubFallbackBehavior.GetValueOrCurrent
                    (this.defaultStub);
            }
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                this.defaultStub = value;
            }
        }

        /// <summary>Initializes a new instance of type SFormBonusAdd</summary>
        [global::System.Diagnostics.DebuggerHidden]
        private void InitializeStub()
        {
        }

        private bool callBase;

        private global::Microsoft.Stubs.Framework.IStubBehavior defaultStub;
    }
}
namespace FinanceAnalyzer.Stubs
{
    /// <summary>Stub of FormCompare</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Stubs", "0.16.40915.5")]
    [global::System.Serializable]
    [global::System.Diagnostics.DebuggerDisplay("Stub = FormCompare")]
    [global::System.Diagnostics.DebuggerStepThrough]
    public partial class SFormCompare
      : global::FinanceAnalyzer.FormCompare
      , global::Microsoft.Stubs.Framework.IStub
      , global::Microsoft.Stubs.Framework.IPartialStub
    {
        /// <summary>Initializes a new instance</summary>
        [global::System.Diagnostics.DebuggerHidden]
        public SFormCompare()
        {
            this.InitializeStub();
        }

        /// <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        public bool CallBase
        {
            [global::System.Diagnostics.DebuggerHidden]
            get
            {
                return this.callBase;
            }
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                this.callBase = value;
            }
        }

        /// <summary>Stub of method System.Void FinanceAnalyzer.FormCompare.Dispose(System.Boolean disposing)</summary>
        [global::System.Diagnostics.DebuggerHidden]
        protected override void Dispose(bool disposing)
        {
            global::Microsoft.Stubs.Framework.StubDelegates.Action<bool> sh
               = this.DisposeBoolean;
            if (sh != (global::Microsoft.Stubs.Framework.StubDelegates.Action<bool>)null)
              sh.Invoke(disposing);
            else 
            {
              if (this.callBase)
                base.Dispose(disposing);
              else 
              {
                global::Microsoft.Stubs.Framework.IStubBehavior stub = this.FallbackBehavior
                  ;
                stub.VoidResult<global::FinanceAnalyzer.Stubs.SFormCompare>(this);
              }
            }
        }

        /// <summary>Stub of method System.Void FinanceAnalyzer.FormCompare.Dispose(System.Boolean disposing)</summary>
        public global::Microsoft.Stubs.Framework.StubDelegates.Action<bool> DisposeBoolean;

        /// <summary>Gets or sets the fallback behavior.</summary>
        public global::Microsoft.Stubs.Framework.IStubBehavior FallbackBehavior
        {
            [global::System.Diagnostics.DebuggerHidden]
            get
            {
                return global::Microsoft.Stubs.Framework.StubFallbackBehavior.GetValueOrCurrent
                    (this.defaultStub);
            }
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                this.defaultStub = value;
            }
        }

        /// <summary>Initializes a new instance of type SFormCompare</summary>
        [global::System.Diagnostics.DebuggerHidden]
        private void InitializeStub()
        {
        }

        private bool callBase;

        private global::Microsoft.Stubs.Framework.IStubBehavior defaultStub;
    }
}
namespace FinanceAnalyzer.Stubs
{
    /// <summary>Stub of FormGraph</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Stubs", "0.16.40915.5")]
    [global::System.Serializable]
    [global::System.Diagnostics.DebuggerDisplay("Stub = FormGraph")]
    [global::System.Diagnostics.DebuggerStepThrough]
    public partial class SFormGraph
      : global::FinanceAnalyzer.FormGraph
      , global::Microsoft.Stubs.Framework.IStub
      , global::Microsoft.Stubs.Framework.IPartialStub
    {
        /// <summary>Initializes a new instance</summary>
        [global::System.Diagnostics.DebuggerHidden]
        public SFormGraph()
        {
            this.InitializeStub();
        }

        /// <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        public bool CallBase
        {
            [global::System.Diagnostics.DebuggerHidden]
            get
            {
                return this.callBase;
            }
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                this.callBase = value;
            }
        }

        /// <summary>Stub of method System.Void FinanceAnalyzer.FormGraph.Dispose(System.Boolean disposing)</summary>
        [global::System.Diagnostics.DebuggerHidden]
        protected override void Dispose(bool disposing)
        {
            global::Microsoft.Stubs.Framework.StubDelegates.Action<bool> sh
               = this.DisposeBoolean;
            if (sh != (global::Microsoft.Stubs.Framework.StubDelegates.Action<bool>)null)
              sh.Invoke(disposing);
            else 
            {
              if (this.callBase)
                base.Dispose(disposing);
              else 
              {
                global::Microsoft.Stubs.Framework.IStubBehavior stub = this.FallbackBehavior
                  ;
                stub.VoidResult<global::FinanceAnalyzer.Stubs.SFormGraph>(this);
              }
            }
        }

        /// <summary>Stub of method System.Void FinanceAnalyzer.FormGraph.Dispose(System.Boolean disposing)</summary>
        public global::Microsoft.Stubs.Framework.StubDelegates.Action<bool> DisposeBoolean;

        /// <summary>Gets or sets the fallback behavior.</summary>
        public global::Microsoft.Stubs.Framework.IStubBehavior FallbackBehavior
        {
            [global::System.Diagnostics.DebuggerHidden]
            get
            {
                return global::Microsoft.Stubs.Framework.StubFallbackBehavior.GetValueOrCurrent
                    (this.defaultStub);
            }
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                this.defaultStub = value;
            }
        }

        /// <summary>Initializes a new instance of type SFormGraph</summary>
        [global::System.Diagnostics.DebuggerHidden]
        private void InitializeStub()
        {
        }

        private bool callBase;

        private global::Microsoft.Stubs.Framework.IStubBehavior defaultStub;
    }
}
namespace FinanceAnalyzer.UI.Stubs
{
    /// <summary>Stub of FormImport</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Stubs", "0.16.40915.5")]
    [global::System.Serializable]
    [global::System.Diagnostics.DebuggerDisplay("Stub = FormImport")]
    [global::System.Diagnostics.DebuggerStepThrough]
    public partial class SFormImport
      : global::FinanceAnalyzer.UI.FormImport
      , global::Microsoft.Stubs.Framework.IStub
      , global::Microsoft.Stubs.Framework.IPartialStub
    {
        /// <summary>Initializes a new instance</summary>
        [global::System.Diagnostics.DebuggerHidden]
        public SFormImport()
        {
            this.InitializeStub();
        }

        /// <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        public bool CallBase
        {
            [global::System.Diagnostics.DebuggerHidden]
            get
            {
                return this.callBase;
            }
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                this.callBase = value;
            }
        }

        /// <summary>Stub of method System.Void FinanceAnalyzer.UI.FormImport.Dispose(System.Boolean disposing)</summary>
        [global::System.Diagnostics.DebuggerHidden]
        protected override void Dispose(bool disposing)
        {
            global::Microsoft.Stubs.Framework.StubDelegates.Action<bool> sh
               = this.DisposeBoolean;
            if (sh != (global::Microsoft.Stubs.Framework.StubDelegates.Action<bool>)null)
              sh.Invoke(disposing);
            else 
            {
              if (this.callBase)
                base.Dispose(disposing);
              else 
              {
                global::Microsoft.Stubs.Framework.IStubBehavior stub = this.FallbackBehavior
                  ;
                stub.VoidResult<global::FinanceAnalyzer.UI.Stubs.SFormImport>(this);
              }
            }
        }

        /// <summary>Stub of method System.Void FinanceAnalyzer.UI.FormImport.Dispose(System.Boolean disposing)</summary>
        public global::Microsoft.Stubs.Framework.StubDelegates.Action<bool> DisposeBoolean;

        /// <summary>Gets or sets the fallback behavior.</summary>
        public global::Microsoft.Stubs.Framework.IStubBehavior FallbackBehavior
        {
            [global::System.Diagnostics.DebuggerHidden]
            get
            {
                return global::Microsoft.Stubs.Framework.StubFallbackBehavior.GetValueOrCurrent
                    (this.defaultStub);
            }
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                this.defaultStub = value;
            }
        }

        /// <summary>Initializes a new instance of type SFormImport</summary>
        [global::System.Diagnostics.DebuggerHidden]
        private void InitializeStub()
        {
        }

        private bool callBase;

        private global::Microsoft.Stubs.Framework.IStubBehavior defaultStub;
    }
}
namespace FinanceAnalyzer.Stubs
{
    /// <summary>Stub of FormMain</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Stubs", "0.16.40915.5")]
    [global::System.Serializable]
    [global::System.Diagnostics.DebuggerDisplay("Stub = FormMain")]
    [global::System.Diagnostics.DebuggerStepThrough]
    public partial class SFormMain
      : global::FinanceAnalyzer.FormMain
      , global::Microsoft.Stubs.Framework.IStub
      , global::Microsoft.Stubs.Framework.IPartialStub
    {
        /// <summary>Initializes a new instance</summary>
        [global::System.Diagnostics.DebuggerHidden]
        public SFormMain()
        {
            this.InitializeStub();
        }

        /// <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        public bool CallBase
        {
            [global::System.Diagnostics.DebuggerHidden]
            get
            {
                return this.callBase;
            }
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                this.callBase = value;
            }
        }

        /// <summary>Stub of method System.Void FinanceAnalyzer.FormMain.Dispose(System.Boolean disposing)</summary>
        [global::System.Diagnostics.DebuggerHidden]
        protected override void Dispose(bool disposing)
        {
            global::Microsoft.Stubs.Framework.StubDelegates.Action<bool> sh
               = this.DisposeBoolean;
            if (sh != (global::Microsoft.Stubs.Framework.StubDelegates.Action<bool>)null)
              sh.Invoke(disposing);
            else 
            {
              if (this.callBase)
                base.Dispose(disposing);
              else 
              {
                global::Microsoft.Stubs.Framework.IStubBehavior stub = this.FallbackBehavior
                  ;
                stub.VoidResult<global::FinanceAnalyzer.Stubs.SFormMain>(this);
              }
            }
        }

        /// <summary>Stub of method System.Void FinanceAnalyzer.FormMain.Dispose(System.Boolean disposing)</summary>
        public global::Microsoft.Stubs.Framework.StubDelegates.Action<bool> DisposeBoolean;

        /// <summary>Gets or sets the fallback behavior.</summary>
        public global::Microsoft.Stubs.Framework.IStubBehavior FallbackBehavior
        {
            [global::System.Diagnostics.DebuggerHidden]
            get
            {
                return global::Microsoft.Stubs.Framework.StubFallbackBehavior.GetValueOrCurrent
                    (this.defaultStub);
            }
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                this.defaultStub = value;
            }
        }

        /// <summary>Initializes a new instance of type SFormMain</summary>
        [global::System.Diagnostics.DebuggerHidden]
        private void InitializeStub()
        {
        }

        private bool callBase;

        private global::Microsoft.Stubs.Framework.IStubBehavior defaultStub;
    }
}
namespace FinanceAnalyzer.Stubs
{
    /// <summary>Stub of IAccount</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Stubs", "0.16.40915.5")]
    [global::System.Serializable]
    [global::System.Diagnostics.DebuggerDisplay("Stub = IAccount")]
    [global::System.Diagnostics.DebuggerStepThrough]
    public partial class SIAccount
      : global::Microsoft.Stubs.Framework.StubBase
      , global::FinanceAnalyzer.IAccount
    {
        /// <summary>Initializes a new instance of type SIAccount</summary>
        [global::System.Diagnostics.DebuggerHidden]
        public SIAccount()
        {
        }

        /// <summary>Stub of property FinanceAnalyzer.IAccount.BankRoll</summary>
        double global::FinanceAnalyzer.IAccount.BankRoll
        {
            [global::System.Diagnostics.DebuggerHidden]
            get
            {
                global::Microsoft.Stubs.Framework.StubDelegates.Func<double> sh
                   = this.BankRollGet;
                if (sh != (global::Microsoft.Stubs.Framework.StubDelegates.Func<double>)null)
                  return sh.Invoke();
                else 
                {
                  global::Microsoft.Stubs.Framework.IStubBehavior stub = base.FallbackBehavior;
                  return stub.Result<global::FinanceAnalyzer.Stubs.SIAccount, double>(this);
                }
            }
        }

        /// <summary>Stub of method System.Double FinanceAnalyzer.IAccount.get_BankRoll()</summary>
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<double> BankRollGet;
    }
}
namespace FinanceAnalyzer.Strategy.Condition.Stubs
{
    /// <summary>Stub of ICondition</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Stubs", "0.16.40915.5")]
    [global::System.Serializable]
    [global::System.Diagnostics.DebuggerDisplay("Stub = ICondition")]
    [global::System.Diagnostics.DebuggerStepThrough]
    public partial class SICondition
      : global::Microsoft.Stubs.Framework.StubBase
      , global::FinanceAnalyzer.Strategy.Condition.ICondition
    {
        /// <summary>Initializes a new instance of type SICondition</summary>
        [global::System.Diagnostics.DebuggerHidden]
        public SICondition()
        {
        }

        /// <summary>Stub of method System.Boolean FinanceAnalyzer.Strategy.Condition.ICondition.Judge(FinanceAnalyzer.IStockOper oper)</summary>
        [global::System.Diagnostics.DebuggerHidden]
        bool global::FinanceAnalyzer.Strategy.Condition.ICondition.Judge(global::FinanceAnalyzer.IStockOper oper)
        {
            global::Microsoft.Stubs.Framework
              .StubDelegates.Func<global::FinanceAnalyzer.IStockOper, bool> sh = this.Judge;
            if (sh != (global::Microsoft.Stubs.Framework
              .StubDelegates.Func<global::FinanceAnalyzer.IStockOper, bool>)null)
              return sh.Invoke(oper);
            else 
            {
              global::Microsoft.Stubs.Framework.IStubBehavior stub = base.FallbackBehavior;
              return stub.Result
                  <global::FinanceAnalyzer.Strategy.Condition.Stubs.SICondition, bool>(this);
            }
        }

        /// <summary>Stub of method System.Boolean FinanceAnalyzer.Strategy.Condition.ICondition.Judge(FinanceAnalyzer.IStockOper oper)</summary>
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<global::FinanceAnalyzer.IStockOper, bool> Judge;
    }
}
namespace FinanceAnalyzer.DB.Stubs
{
    /// <summary>Stub of IDataChecker</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Stubs", "0.16.40915.5")]
    [global::System.Serializable]
    [global::System.Diagnostics.DebuggerDisplay("Stub = IDataChecker")]
    [global::System.Diagnostics.DebuggerStepThrough]
    internal partial class SIDataChecker
      : global::Microsoft.Stubs.Framework.StubBase
      , global::FinanceAnalyzer.DB.IDataChecker
    {
        /// <summary>Initializes a new instance of type SIDataChecker</summary>
        [global::System.Diagnostics.DebuggerHidden]
        public SIDataChecker()
        {
        }

        /// <summary>Stub of method System.Void FinanceAnalyzer.DB.IDataChecker.Check(FinanceAnalyzer.Log.ILog log)</summary>
        public global::Microsoft.Stubs.Framework.StubDelegates.Action<global::FinanceAnalyzer.Log.ILog> Check;

        /// <summary>Stub of method System.Void FinanceAnalyzer.DB.IDataChecker.Check(FinanceAnalyzer.Log.ILog log)</summary>
        [global::System.Diagnostics.DebuggerHidden]
        void global::FinanceAnalyzer.DB.IDataChecker.Check(global::FinanceAnalyzer.Log.ILog log)
        {
            global::Microsoft.Stubs.Framework
              .StubDelegates.Action<global::FinanceAnalyzer.Log.ILog> sh = this.Check;
            if (sh != (global::Microsoft.Stubs.Framework
              .StubDelegates.Action<global::FinanceAnalyzer.Log.ILog>)null)
              sh.Invoke(log);
            else 
            {
              global::Microsoft.Stubs.Framework.IStubBehavior stub = base.FallbackBehavior;
              stub.VoidResult<global::FinanceAnalyzer.DB.Stubs.SIDataChecker>(this);
            }
        }
    }
}
namespace FinanceAnalyzer.Strategy.Stubs
{
    /// <summary>Stub of IFinanceStrategy</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Stubs", "0.16.40915.5")]
    [global::System.Serializable]
    [global::System.Diagnostics.DebuggerDisplay("Stub = IFinanceStrategy")]
    [global::System.Diagnostics.DebuggerStepThrough]
    public partial class SIFinanceStrategy
      : global::FinanceAnalyzer.Strategy.IFinanceStrategy
      , global::Microsoft.Stubs.Framework.IStub
      , global::Microsoft.Stubs.Framework.IPartialStub
    {
        /// <summary>Initializes a new instance</summary>
        [global::System.Diagnostics.DebuggerHidden]
        public SIFinanceStrategy()
        {
            this.InitializeStub();
        }

        /// <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        public bool CallBase
        {
            [global::System.Diagnostics.DebuggerHidden]
            get
            {
                return this.callBase;
            }
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                this.callBase = value;
            }
        }

        /// <summary>Gets or sets the fallback behavior.</summary>
        public global::Microsoft.Stubs.Framework.IStubBehavior FallbackBehavior
        {
            [global::System.Diagnostics.DebuggerHidden]
            get
            {
                return global::Microsoft.Stubs.Framework.StubFallbackBehavior.GetValueOrCurrent
                    (this.defaultStub);
            }
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                this.defaultStub = value;
            }
        }

        /// <summary>Stub of method FinanceAnalyzer.StockCommand FinanceAnalyzer.Strategy.IFinanceStrategy.GetOper(System.DateTime day, FinanceAnalyzer.IAccount account)</summary>
        [global::System.Diagnostics.DebuggerHidden]
        public override global::FinanceAnalyzer.StockCommand GetOper(global::System.DateTime day, global::FinanceAnalyzer.IAccount account)
        {
            global::Microsoft.Stubs.Framework.StubDelegates
              .Func<global::System.DateTime, global::FinanceAnalyzer.IAccount, 
              global::FinanceAnalyzer.StockCommand> sh = this.GetOperDateTimeIAccount;
            if (sh != (global::Microsoft.Stubs.Framework
              .StubDelegates.Func<global::System.DateTime, 
              global::FinanceAnalyzer.IAccount, 
              global::FinanceAnalyzer.StockCommand>)null)
              return sh.Invoke(day, account);
            else 
            {
              global::Microsoft.Stubs.Framework.IStubBehavior stub = this.FallbackBehavior;
              return stub.Result<global::FinanceAnalyzer.Strategy.Stubs.SIFinanceStrategy, 
              global::FinanceAnalyzer.StockCommand>(this);
            }
        }

        /// <summary>Stub of method FinanceAnalyzer.StockCommand FinanceAnalyzer.Strategy.IFinanceStrategy.GetOper(System.DateTime day, FinanceAnalyzer.IAccount account)</summary>
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<global::System.DateTime, global::FinanceAnalyzer.IAccount, global::FinanceAnalyzer.StockCommand> GetOperDateTimeIAccount;

        /// <summary>Stub of method System.Void FinanceAnalyzer.Strategy.IFinanceStrategy.HolderInit()</summary>
        [global::System.Diagnostics.DebuggerHidden]
        protected override void HolderInit()
        {
            global::Microsoft.Stubs.Framework.StubDelegates.Action sh
               = this.IFinanceStrategyHolderInit;
            if (sh != (global::Microsoft.Stubs.Framework.StubDelegates.Action)null)
              sh.Invoke();
            else 
            {
              if (this.callBase)
                base.HolderInit();
              else 
              {
                global::Microsoft.Stubs.Framework.IStubBehavior stub = this.FallbackBehavior
                  ;
                stub.VoidResult<global::FinanceAnalyzer.Strategy.Stubs.SIFinanceStrategy>
                    (this);
              }
            }
        }

        /// <summary>Stub of method System.Void FinanceAnalyzer.Strategy.IFinanceStrategy.HolderInit()</summary>
        public global::Microsoft.Stubs.Framework.StubDelegates.Action IFinanceStrategyHolderInit;

        /// <summary>Initializes a new instance of type SIFinanceStrategy</summary>
        [global::System.Diagnostics.DebuggerHidden]
        private void InitializeStub()
        {
        }

        /// <summary>Stub of property FinanceAnalyzer.Strategy.IFinanceStrategy.Name</summary>
        public override string Name
        {
            [global::System.Diagnostics.DebuggerHidden]
            get
            {
                global::Microsoft.Stubs.Framework.StubDelegates.Func<string> sh = this.NameGet;
                if (sh != (global::Microsoft.Stubs.Framework.StubDelegates.Func<string>)null)
                  return sh.Invoke();
                else 
                {
                  global::Microsoft.Stubs.Framework.IStubBehavior stub = this.FallbackBehavior;
                  return stub
                    .Result<global::FinanceAnalyzer.Strategy.Stubs.SIFinanceStrategy, string>
                      (this);
                }
            }
        }

        /// <summary>Stub of method System.String FinanceAnalyzer.Strategy.IFinanceStrategy.get_Name()</summary>
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<string> NameGet;

        private bool callBase;

        private global::Microsoft.Stubs.Framework.IStubBehavior defaultStub;
    }
}
namespace FinanceAnalyzer.KDJ.Stubs
{
    /// <summary>Stub of IKdjCalculator</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Stubs", "0.16.40915.5")]
    [global::System.Serializable]
    [global::System.Diagnostics.DebuggerDisplay("Stub = IKdjCalculator")]
    [global::System.Diagnostics.DebuggerStepThrough]
    internal partial class SIKdjCalculator
      : global::Microsoft.Stubs.Framework.StubBase
      , global::FinanceAnalyzer.KDJ.IKdjCalculator
    {
        /// <summary>Initializes a new instance of type SIKdjCalculator</summary>
        [global::System.Diagnostics.DebuggerHidden]
        public SIKdjCalculator()
        {
        }

        /// <summary>Stub of method System.Void FinanceAnalyzer.KDJ.IKdjCalculator.Calc(FinanceAnalyzer.StockHistory hist)</summary>
        public global::Microsoft.Stubs.Framework.StubDelegates.Action<global::FinanceAnalyzer.StockHistory> Calc;

        /// <summary>Stub of method System.Void FinanceAnalyzer.KDJ.IKdjCalculator.Calc(FinanceAnalyzer.StockHistory hist)</summary>
        [global::System.Diagnostics.DebuggerHidden]
        void global::FinanceAnalyzer.KDJ.IKdjCalculator.Calc(global::FinanceAnalyzer.StockHistory hist)
        {
            global::Microsoft.Stubs.Framework
              .StubDelegates.Action<global::FinanceAnalyzer.StockHistory> sh = this.Calc;
            if (sh != (global::Microsoft.Stubs.Framework
              .StubDelegates.Action<global::FinanceAnalyzer.StockHistory>)null)
              sh.Invoke(hist);
            else 
            {
              global::Microsoft.Stubs.Framework.IStubBehavior stub = base.FallbackBehavior;
              stub.VoidResult<global::FinanceAnalyzer.KDJ.Stubs.SIKdjCalculator>(this);
            }
        }

        /// <summary>Stub of method FinanceAnalyzer.KDJ.IKdjStorage FinanceAnalyzer.KDJ.IKdjCalculator.GetStorage()</summary>
        [global::System.Diagnostics.DebuggerHidden]
        global::FinanceAnalyzer.KDJ.IKdjStorage global::FinanceAnalyzer.KDJ.IKdjCalculator.GetStorage()
        {
            global::Microsoft.Stubs.Framework
              .StubDelegates.Func<global::FinanceAnalyzer.KDJ.IKdjStorage> sh
               = this.GetStorage;
            if (sh != (global::Microsoft.Stubs.Framework
              .StubDelegates.Func<global::FinanceAnalyzer.KDJ.IKdjStorage>)null)
              return sh.Invoke();
            else 
            {
              global::Microsoft.Stubs.Framework.IStubBehavior stub = base.FallbackBehavior;
              return stub.Result<global::FinanceAnalyzer.KDJ.Stubs.SIKdjCalculator, 
              global::FinanceAnalyzer.KDJ.IKdjStorage>(this);
            }
        }

        /// <summary>Stub of method FinanceAnalyzer.KDJ.IKdjStorage FinanceAnalyzer.KDJ.IKdjCalculator.GetStorage()</summary>
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<global::FinanceAnalyzer.KDJ.IKdjStorage> GetStorage;
    }
}
namespace FinanceAnalyzer.KDJ.Stubs
{
    /// <summary>Stub of IKdjStorage</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Stubs", "0.16.40915.5")]
    [global::System.Serializable]
    [global::System.Diagnostics.DebuggerDisplay("Stub = IKdjStorage")]
    [global::System.Diagnostics.DebuggerStepThrough]
    internal partial class SIKdjStorage
      : global::Microsoft.Stubs.Framework.StubBase
      , global::FinanceAnalyzer.KDJ.IKdjStorage
    {
        /// <summary>Initializes a new instance of type SIKdjStorage</summary>
        [global::System.Diagnostics.DebuggerHidden]
        public SIKdjStorage()
        {
        }

        /// <summary>Stub of method System.Double FinanceAnalyzer.KDJ.IKdjStorage.GetD(System.DateTime dt)</summary>
        [global::System.Diagnostics.DebuggerHidden]
        double global::FinanceAnalyzer.KDJ.IKdjStorage.GetD(global::System.DateTime dt)
        {
            global::Microsoft.Stubs.Framework
              .StubDelegates.Func<global::System.DateTime, double> sh = this.GetD;
            if (sh != (global::Microsoft.Stubs.Framework
              .StubDelegates.Func<global::System.DateTime, double>)null)
              return sh.Invoke(dt);
            else 
            {
              global::Microsoft.Stubs.Framework.IStubBehavior stub = base.FallbackBehavior;
              return 
                stub.Result<global::FinanceAnalyzer.KDJ.Stubs.SIKdjStorage, double>(this);
            }
        }

        /// <summary>Stub of method System.Double FinanceAnalyzer.KDJ.IKdjStorage.GetJ(System.DateTime dt)</summary>
        [global::System.Diagnostics.DebuggerHidden]
        double global::FinanceAnalyzer.KDJ.IKdjStorage.GetJ(global::System.DateTime dt)
        {
            global::Microsoft.Stubs.Framework
              .StubDelegates.Func<global::System.DateTime, double> sh = this.GetJ;
            if (sh != (global::Microsoft.Stubs.Framework
              .StubDelegates.Func<global::System.DateTime, double>)null)
              return sh.Invoke(dt);
            else 
            {
              global::Microsoft.Stubs.Framework.IStubBehavior stub = base.FallbackBehavior;
              return 
                stub.Result<global::FinanceAnalyzer.KDJ.Stubs.SIKdjStorage, double>(this);
            }
        }

        /// <summary>Stub of method System.Double FinanceAnalyzer.KDJ.IKdjStorage.GetK(System.DateTime dt)</summary>
        [global::System.Diagnostics.DebuggerHidden]
        double global::FinanceAnalyzer.KDJ.IKdjStorage.GetK(global::System.DateTime dt)
        {
            global::Microsoft.Stubs.Framework
              .StubDelegates.Func<global::System.DateTime, double> sh = this.GetK;
            if (sh != (global::Microsoft.Stubs.Framework
              .StubDelegates.Func<global::System.DateTime, double>)null)
              return sh.Invoke(dt);
            else 
            {
              global::Microsoft.Stubs.Framework.IStubBehavior stub = base.FallbackBehavior;
              return 
                stub.Result<global::FinanceAnalyzer.KDJ.Stubs.SIKdjStorage, double>(this);
            }
        }

        /// <summary>Stub of method System.Double FinanceAnalyzer.KDJ.IKdjStorage.GetD(System.DateTime dt)</summary>
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<global::System.DateTime, double> GetD;

        /// <summary>Stub of method System.Double FinanceAnalyzer.KDJ.IKdjStorage.GetJ(System.DateTime dt)</summary>
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<global::System.DateTime, double> GetJ;

        /// <summary>Stub of method System.Double FinanceAnalyzer.KDJ.IKdjStorage.GetK(System.DateTime dt)</summary>
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<global::System.DateTime, double> GetK;
    }
}
namespace FinanceAnalyzer.Log.Stubs
{
    /// <summary>Stub of ILog</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Stubs", "0.16.40915.5")]
    [global::System.Serializable]
    [global::System.Diagnostics.DebuggerDisplay("Stub = ILog")]
    [global::System.Diagnostics.DebuggerStepThrough]
    public partial class SILog
      : global::Microsoft.Stubs.Framework.StubBase
      , global::FinanceAnalyzer.Log.ILog
    {
        /// <summary>Initializes a new instance of type SILog</summary>
        [global::System.Diagnostics.DebuggerHidden]
        public SILog()
        {
        }

        /// <summary>Stub of method System.Void FinanceAnalyzer.Log.ILog.Close()</summary>
        public global::Microsoft.Stubs.Framework.StubDelegates.Action Close;

        /// <summary>Stub of method System.Void FinanceAnalyzer.Log.ILog.Close()</summary>
        [global::System.Diagnostics.DebuggerHidden]
        void global::FinanceAnalyzer.Log.ILog.Close()
        {
            global::Microsoft.Stubs.Framework.StubDelegates.Action sh = this.Close;
            if (sh != (global::Microsoft.Stubs.Framework.StubDelegates.Action)null)
              sh.Invoke();
            else 
            {
              global::Microsoft.Stubs.Framework.IStubBehavior stub = base.FallbackBehavior;
              stub.VoidResult<global::FinanceAnalyzer.Log.Stubs.SILog>(this);
            }
        }

        /// <summary>Stub of method System.Void FinanceAnalyzer.Log.ILog.LogInfo(System.String msg)</summary>
        [global::System.Diagnostics.DebuggerHidden]
        void global::FinanceAnalyzer.Log.ILog.LogInfo(string msg)
        {
            global::Microsoft.Stubs.Framework.StubDelegates.Action<string> sh
               = this.LogInfoString;
            if (sh != (global::Microsoft.Stubs.Framework.StubDelegates.Action<string>)null)
              sh.Invoke(msg);
            else 
            {
              global::Microsoft.Stubs.Framework.IStubBehavior stub = base.FallbackBehavior;
              stub.VoidResult<global::FinanceAnalyzer.Log.Stubs.SILog>(this);
            }
        }

        /// <summary>Stub of method System.Void FinanceAnalyzer.Log.ILog.LogInfo(System.String fmt, System.Object val1)</summary>
        [global::System.Diagnostics.DebuggerHidden]
        void global::FinanceAnalyzer.Log.ILog.LogInfo(string fmt, object val1)
        {
            global::Microsoft.Stubs.Framework.StubDelegates.Action<string, object> sh
               = this.LogInfoStringObject;
            if (sh !=
              (global::Microsoft.Stubs.Framework.StubDelegates.Action<string, object>)null)
              sh.Invoke(fmt, val1);
            else 
            {
              global::Microsoft.Stubs.Framework.IStubBehavior stub = base.FallbackBehavior;
              stub.VoidResult<global::FinanceAnalyzer.Log.Stubs.SILog>(this);
            }
        }

        /// <summary>Stub of method System.Void FinanceAnalyzer.Log.ILog.LogInfo(System.String fmt, System.Object val1, System.Object val2)</summary>
        [global::System.Diagnostics.DebuggerHidden]
        void global::FinanceAnalyzer.Log.ILog.LogInfo(
            string fmt,
            object val1,
            object val2
        )
        {
            global::Microsoft.Stubs.Framework.StubDelegates.Action<string, object, object> 
              sh = this.LogInfoStringObjectObject;
            if (sh != (global::Microsoft.Stubs.Framework
              .StubDelegates.Action<string, object, object>)null)
              sh.Invoke(fmt, val1, val2);
            else 
            {
              global::Microsoft.Stubs.Framework.IStubBehavior stub = base.FallbackBehavior;
              stub.VoidResult<global::FinanceAnalyzer.Log.Stubs.SILog>(this);
            }
        }

        /// <summary>Stub of method System.Void FinanceAnalyzer.Log.ILog.LogInfo(System.String fmt, System.Object val1, System.Object val2, System.Object val3)</summary>
        [global::System.Diagnostics.DebuggerHidden]
        void global::FinanceAnalyzer.Log.ILog.LogInfo(
            string fmt,
            object val1,
            object val2,
            object val3
        )
        {
            global::Microsoft.Stubs.Framework
              .StubDelegates.Action<string, object, object, object> sh
               = this.LogInfoStringObjectObjectObject;
            if (sh != (global::Microsoft.Stubs.Framework
              .StubDelegates.Action<string, object, object, object>)null)
              sh.Invoke(fmt, val1, val2, val3);
            else 
            {
              global::Microsoft.Stubs.Framework.IStubBehavior stub = base.FallbackBehavior;
              stub.VoidResult<global::FinanceAnalyzer.Log.Stubs.SILog>(this);
            }
        }

        /// <summary>Stub of method System.Void FinanceAnalyzer.Log.ILog.LogInfo(System.String msg)</summary>
        public global::Microsoft.Stubs.Framework.StubDelegates.Action<string> LogInfoString;

        /// <summary>Stub of method System.Void FinanceAnalyzer.Log.ILog.LogInfo(System.String fmt, System.Object val1)</summary>
        public global::Microsoft.Stubs.Framework.StubDelegates.Action<string, object> LogInfoStringObject;

        /// <summary>Stub of method System.Void FinanceAnalyzer.Log.ILog.LogInfo(System.String fmt, System.Object val1, System.Object val2)</summary>
        public global::Microsoft.Stubs.Framework.StubDelegates.Action<string, object, object> LogInfoStringObjectObject;

        /// <summary>Stub of method System.Void FinanceAnalyzer.Log.ILog.LogInfo(System.String fmt, System.Object val1, System.Object val2, System.Object val3)</summary>
        public global::Microsoft.Stubs.Framework.StubDelegates.Action<string, object, object, object> LogInfoStringObjectObjectObject;
    }
}
namespace FinanceAnalyzer.Strategy.Rise.Stubs
{
    /// <summary>Stub of IRiseJudger</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Stubs", "0.16.40915.5")]
    [global::System.Serializable]
    [global::System.Diagnostics.DebuggerDisplay("Stub = IRiseJudger")]
    [global::System.Diagnostics.DebuggerStepThrough]
    public partial class SIRiseJudger
      : global::FinanceAnalyzer.Strategy.Rise.IRiseJudger
      , global::Microsoft.Stubs.Framework.IStub
      , global::Microsoft.Stubs.Framework.IPartialStub
    {
        /// <summary>Initializes a new instance</summary>
        [global::System.Diagnostics.DebuggerHidden]
        public SIRiseJudger()
        {
            this.InitializeStub();
        }

        /// <summary>Stub of method System.Boolean FinanceAnalyzer.Strategy.Rise.IRiseJudger.AllDown(FinanceAnalyzer.DayStock day1, FinanceAnalyzer.DayStock day2, FinanceAnalyzer.DayStock day3)</summary>
        [global::System.Diagnostics.DebuggerHidden]
        public override bool AllDown(
            global::FinanceAnalyzer.DayStock day1,
            global::FinanceAnalyzer.DayStock day2,
            global::FinanceAnalyzer.DayStock day3
        )
        {
            global::Microsoft.Stubs.Framework
              .StubDelegates.Func<global::FinanceAnalyzer.DayStock, 
              global::FinanceAnalyzer.DayStock, 
              global::FinanceAnalyzer.DayStock, bool> sh
               = this.AllDownDayStockDayStockDayStock;
            if (sh != (global::Microsoft.Stubs.Framework
              .StubDelegates.Func<global::FinanceAnalyzer.DayStock, 
              global::FinanceAnalyzer.DayStock, 
              global::FinanceAnalyzer.DayStock, bool>)null)
              return sh.Invoke(day1, day2, day3);
            else 
            {
              global::Microsoft.Stubs.Framework.IStubBehavior stub = this.FallbackBehavior;
              return 
                stub.Result<global::FinanceAnalyzer.Strategy.Rise.Stubs.SIRiseJudger, bool>
                    (this);
            }
        }

        /// <summary>Stub of method System.Boolean FinanceAnalyzer.Strategy.Rise.IRiseJudger.AllDown(FinanceAnalyzer.DayStock day1, FinanceAnalyzer.DayStock day2, FinanceAnalyzer.DayStock day3)</summary>
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<global::FinanceAnalyzer.DayStock, global::FinanceAnalyzer.DayStock, global::FinanceAnalyzer.DayStock, bool> AllDownDayStockDayStockDayStock;

        /// <summary>Stub of method System.Boolean FinanceAnalyzer.Strategy.Rise.IRiseJudger.AllRise(FinanceAnalyzer.DayStock day1, FinanceAnalyzer.DayStock day2, FinanceAnalyzer.DayStock day3)</summary>
        [global::System.Diagnostics.DebuggerHidden]
        public override bool AllRise(
            global::FinanceAnalyzer.DayStock day1,
            global::FinanceAnalyzer.DayStock day2,
            global::FinanceAnalyzer.DayStock day3
        )
        {
            global::Microsoft.Stubs.Framework
              .StubDelegates.Func<global::FinanceAnalyzer.DayStock, 
              global::FinanceAnalyzer.DayStock, 
              global::FinanceAnalyzer.DayStock, bool> sh
               = this.AllRiseDayStockDayStockDayStock;
            if (sh != (global::Microsoft.Stubs.Framework
              .StubDelegates.Func<global::FinanceAnalyzer.DayStock, 
              global::FinanceAnalyzer.DayStock, 
              global::FinanceAnalyzer.DayStock, bool>)null)
              return sh.Invoke(day1, day2, day3);
            else 
            {
              global::Microsoft.Stubs.Framework.IStubBehavior stub = this.FallbackBehavior;
              return 
                stub.Result<global::FinanceAnalyzer.Strategy.Rise.Stubs.SIRiseJudger, bool>
                    (this);
            }
        }

        /// <summary>Stub of method System.Boolean FinanceAnalyzer.Strategy.Rise.IRiseJudger.AllRise(FinanceAnalyzer.DayStock day1, FinanceAnalyzer.DayStock day2, FinanceAnalyzer.DayStock day3)</summary>
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<global::FinanceAnalyzer.DayStock, global::FinanceAnalyzer.DayStock, global::FinanceAnalyzer.DayStock, bool> AllRiseDayStockDayStockDayStock;

        /// <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        public bool CallBase
        {
            [global::System.Diagnostics.DebuggerHidden]
            get
            {
                return this.callBase;
            }
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                this.callBase = value;
            }
        }

        /// <summary>Gets or sets the fallback behavior.</summary>
        public global::Microsoft.Stubs.Framework.IStubBehavior FallbackBehavior
        {
            [global::System.Diagnostics.DebuggerHidden]
            get
            {
                return global::Microsoft.Stubs.Framework.StubFallbackBehavior.GetValueOrCurrent
                    (this.defaultStub);
            }
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                this.defaultStub = value;
            }
        }

        /// <summary>Stub of method System.String FinanceAnalyzer.Strategy.Rise.IRiseJudger.GetName()</summary>
        [global::System.Diagnostics.DebuggerHidden]
        public override string GetName()
        {
            global::Microsoft.Stubs.Framework.StubDelegates.Func<string> sh
               = this.IRiseJudgerGetName;
            if (sh != (global::Microsoft.Stubs.Framework.StubDelegates.Func<string>)null)
              return sh.Invoke();
            else 
            {
              global::Microsoft.Stubs.Framework.IStubBehavior stub = this.FallbackBehavior;
              return stub
                .Result<global::FinanceAnalyzer.Strategy.Rise.Stubs.SIRiseJudger, string>
                  (this);
            }
        }

        /// <summary>Stub of method System.String FinanceAnalyzer.Strategy.Rise.IRiseJudger.GetName()</summary>
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<string> IRiseJudgerGetName;

        /// <summary>Initializes a new instance of type SIRiseJudger</summary>
        [global::System.Diagnostics.DebuggerHidden]
        private void InitializeStub()
        {
        }

        private bool callBase;

        private global::Microsoft.Stubs.Framework.IStubBehavior defaultStub;
    }
}
namespace FinanceAnalyzer.Stubs
{
    /// <summary>Stub of IStockDrawer</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Stubs", "0.16.40915.5")]
    [global::System.Serializable]
    [global::System.Diagnostics.DebuggerDisplay("Stub = IStockDrawer")]
    [global::System.Diagnostics.DebuggerStepThrough]
    public partial class SIStockDrawer
      : global::Microsoft.Stubs.Framework.StubBase
      , global::FinanceAnalyzer.IStockDrawer
    {
        /// <summary>Initializes a new instance of type SIStockDrawer</summary>
        [global::System.Diagnostics.DebuggerHidden]
        public SIStockDrawer()
        {
        }

        /// <summary>Stub of method ZedGraph.StockPt FinanceAnalyzer.IStockDrawer.GetAt(System.DateTime date)</summary>
        [global::System.Diagnostics.DebuggerHidden]
        global::ZedGraph.StockPt global::FinanceAnalyzer.IStockDrawer.GetAt(global::System.DateTime date)
        {
            global::Microsoft.Stubs.Framework.StubDelegates
              .Func<global::System.DateTime, global::ZedGraph.StockPt> sh = this.GetAt;
            if (sh != (global::Microsoft.Stubs.Framework.StubDelegates
              .Func<global::System.DateTime, global::ZedGraph.StockPt>)null)
              return sh.Invoke(date);
            else 
            {
              global::Microsoft.Stubs.Framework.IStubBehavior stub = base.FallbackBehavior;
              return stub.Result<global::FinanceAnalyzer.Stubs.SIStockDrawer, 
              global::ZedGraph.StockPt>(this);
            }
        }

        /// <summary>Stub of method ZedGraph.StockPt FinanceAnalyzer.IStockDrawer.GetAt(System.DateTime date)</summary>
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<global::System.DateTime, global::ZedGraph.StockPt> GetAt;

        /// <summary>Stub of property FinanceAnalyzer.IStockDrawer.MaxDate</summary>
        global::System.DateTime global::FinanceAnalyzer.IStockDrawer.MaxDate
        {
            [global::System.Diagnostics.DebuggerHidden]
            get
            {
                global::Microsoft.Stubs.Framework.StubDelegates.Func<global::System.DateTime> sh
                   = this.MaxDateGet;
                if (sh != (global::Microsoft.Stubs.Framework
                  .StubDelegates.Func<global::System.DateTime>)null)
                  return sh.Invoke();
                else 
                {
                  global::Microsoft.Stubs.Framework.IStubBehavior stub = base.FallbackBehavior;
                  return stub.Result<global::FinanceAnalyzer.Stubs.SIStockDrawer, 
                  global::System.DateTime>(this);
                }
            }
        }

        /// <summary>Stub of method System.DateTime FinanceAnalyzer.IStockDrawer.get_MaxDate()</summary>
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<global::System.DateTime> MaxDateGet;

        /// <summary>Stub of property FinanceAnalyzer.IStockDrawer.MinDate</summary>
        global::System.DateTime global::FinanceAnalyzer.IStockDrawer.MinDate
        {
            [global::System.Diagnostics.DebuggerHidden]
            get
            {
                global::Microsoft.Stubs.Framework.StubDelegates.Func<global::System.DateTime> sh
                   = this.MinDateGet;
                if (sh != (global::Microsoft.Stubs.Framework
                  .StubDelegates.Func<global::System.DateTime>)null)
                  return sh.Invoke();
                else 
                {
                  global::Microsoft.Stubs.Framework.IStubBehavior stub = base.FallbackBehavior;
                  return stub.Result<global::FinanceAnalyzer.Stubs.SIStockDrawer, 
                  global::System.DateTime>(this);
                }
            }
        }

        /// <summary>Stub of method System.DateTime FinanceAnalyzer.IStockDrawer.get_MinDate()</summary>
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<global::System.DateTime> MinDateGet;
    }
}
namespace FinanceAnalyzer.Stubs
{
    /// <summary>Stub of IStockHolder</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Stubs", "0.16.40915.5")]
    [global::System.Serializable]
    [global::System.Diagnostics.DebuggerDisplay("Stub = IStockHolder")]
    [global::System.Diagnostics.DebuggerStepThrough]
    public partial class SIStockHolder
      : global::Microsoft.Stubs.Framework.StubBase
      , global::FinanceAnalyzer.IStockHolder
    {
        /// <summary>Initializes a new instance of type SIStockHolder</summary>
        [global::System.Diagnostics.DebuggerHidden]
        public SIStockHolder()
        {
        }

        /// <summary>Stub of method System.Void FinanceAnalyzer.IStockHolder.BuyStock(System.Int32 count, System.Double unitPrice)</summary>
        public global::Microsoft.Stubs.Framework.StubDelegates.Action<int, double> BuyStockInt32Double;

        /// <summary>Stub of method System.Void FinanceAnalyzer.IStockHolder.BuyStock(FinanceAnalyzer.Stock val)</summary>
        public global::Microsoft.Stubs.Framework.StubDelegates.Action<global::FinanceAnalyzer.Stock> BuyStockStock;

        /// <summary>Stub of method System.Void FinanceAnalyzer.IStockHolder.BuyStock(FinanceAnalyzer.Stock val)</summary>
        [global::System.Diagnostics.DebuggerHidden]
        void global::FinanceAnalyzer.IStockHolder.BuyStock(global::FinanceAnalyzer.Stock val)
        {
            global::Microsoft.Stubs.Framework
              .StubDelegates.Action<global::FinanceAnalyzer.Stock> sh = this.BuyStockStock;
            if (sh != (global::Microsoft.Stubs.Framework
              .StubDelegates.Action<global::FinanceAnalyzer.Stock>)null)
              sh.Invoke(val);
            else 
            {
              global::Microsoft.Stubs.Framework.IStubBehavior stub = base.FallbackBehavior;
              stub.VoidResult<global::FinanceAnalyzer.Stubs.SIStockHolder>(this);
            }
        }

        /// <summary>Stub of method System.Void FinanceAnalyzer.IStockHolder.BuyStock(System.Int32 count, System.Double unitPrice)</summary>
        [global::System.Diagnostics.DebuggerHidden]
        void global::FinanceAnalyzer.IStockHolder.BuyStock(int count, double unitPrice)
        {
            global::Microsoft.Stubs.Framework.StubDelegates.Action<int, double> sh
               = this.BuyStockInt32Double;
            if (sh !=
              (global::Microsoft.Stubs.Framework.StubDelegates.Action<int, double>)null)
              sh.Invoke(count, unitPrice);
            else 
            {
              global::Microsoft.Stubs.Framework.IStubBehavior stub = base.FallbackBehavior;
              stub.VoidResult<global::FinanceAnalyzer.Stubs.SIStockHolder>(this);
            }
        }

        /// <summary>Stub of method System.Double FinanceAnalyzer.IStockHolder.GetUnitPrice()</summary>
        [global::System.Diagnostics.DebuggerHidden]
        double global::FinanceAnalyzer.IStockHolder.GetUnitPrice()
        {
            global::Microsoft.Stubs.Framework.StubDelegates.Func<double> sh
               = this.GetUnitPrice;
            if (sh != (global::Microsoft.Stubs.Framework.StubDelegates.Func<double>)null)
              return sh.Invoke();
            else 
            {
              global::Microsoft.Stubs.Framework.IStubBehavior stub = base.FallbackBehavior;
              return stub.Result<global::FinanceAnalyzer.Stubs.SIStockHolder, double>(this);
            }
        }

        /// <summary>Stub of method System.Boolean FinanceAnalyzer.IStockHolder.HasStock()</summary>
        [global::System.Diagnostics.DebuggerHidden]
        bool global::FinanceAnalyzer.IStockHolder.HasStock()
        {
            global::Microsoft.Stubs.Framework.StubDelegates.Func<bool> sh = this.HasStock;
            if (sh != (global::Microsoft.Stubs.Framework.StubDelegates.Func<bool>)null)
              return sh.Invoke();
            else 
            {
              global::Microsoft.Stubs.Framework.IStubBehavior stub = base.FallbackBehavior;
              return stub.Result<global::FinanceAnalyzer.Stubs.SIStockHolder, bool>(this);
            }
        }

        /// <summary>Stub of method System.Double FinanceAnalyzer.IStockHolder.MarketValue(System.DateTime day)</summary>
        [global::System.Diagnostics.DebuggerHidden]
        double global::FinanceAnalyzer.IStockHolder.MarketValue(global::System.DateTime day)
        {
            global::Microsoft.Stubs.Framework
              .StubDelegates.Func<global::System.DateTime, double> sh = this.MarketValue;
            if (sh != (global::Microsoft.Stubs.Framework
              .StubDelegates.Func<global::System.DateTime, double>)null)
              return sh.Invoke(day);
            else 
            {
              global::Microsoft.Stubs.Framework.IStubBehavior stub = base.FallbackBehavior;
              return stub.Result<global::FinanceAnalyzer.Stubs.SIStockHolder, double>(this);
            }
        }

        /// <summary>Stub of method System.Double FinanceAnalyzer.IStockHolder.SellAllStocks(System.Double unitPrice)</summary>
        [global::System.Diagnostics.DebuggerHidden]
        double global::FinanceAnalyzer.IStockHolder.SellAllStocks(double unitPrice)
        {
            global::Microsoft.Stubs.Framework.StubDelegates.Func<double, double> sh
               = this.SellAllStocks;
            if (sh !=
              (global::Microsoft.Stubs.Framework.StubDelegates.Func<double, double>)null)
              return sh.Invoke(unitPrice);
            else 
            {
              global::Microsoft.Stubs.Framework.IStubBehavior stub = base.FallbackBehavior;
              return stub.Result<global::FinanceAnalyzer.Stubs.SIStockHolder, double>(this);
            }
        }

        /// <summary>Stub of method System.Double FinanceAnalyzer.IStockHolder.SellStock(System.Int32 count, System.Double unitPrice)</summary>
        [global::System.Diagnostics.DebuggerHidden]
        double global::FinanceAnalyzer.IStockHolder.SellStock(int count, double unitPrice)
        {
            global::Microsoft.Stubs.Framework.StubDelegates.Func<int, double, double> sh
               = this.SellStock;
            if (sh !=
              (global::Microsoft.Stubs.Framework.StubDelegates.Func<int, double, double>)
                null)
              return sh.Invoke(count, unitPrice);
            else 
            {
              global::Microsoft.Stubs.Framework.IStubBehavior stub = base.FallbackBehavior;
              return stub.Result<global::FinanceAnalyzer.Stubs.SIStockHolder, double>(this);
            }
        }

        /// <summary>Stub of method System.Int32 FinanceAnalyzer.IStockHolder.StockCount()</summary>
        [global::System.Diagnostics.DebuggerHidden]
        int global::FinanceAnalyzer.IStockHolder.StockCount()
        {
            global::Microsoft.Stubs.Framework.StubDelegates.Func<int> sh = this.StockCount;
            if (sh != (global::Microsoft.Stubs.Framework.StubDelegates.Func<int>)null)
              return sh.Invoke();
            else 
            {
              global::Microsoft.Stubs.Framework.IStubBehavior stub = base.FallbackBehavior;
              return stub.Result<global::FinanceAnalyzer.Stubs.SIStockHolder, int>(this);
            }
        }

        /// <summary>Stub of method System.Double FinanceAnalyzer.IStockHolder.GetUnitPrice()</summary>
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<double> GetUnitPrice;

        /// <summary>Stub of method System.Boolean FinanceAnalyzer.IStockHolder.HasStock()</summary>
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<bool> HasStock;

        /// <summary>Stub of method System.Double FinanceAnalyzer.IStockHolder.MarketValue(System.DateTime day)</summary>
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<global::System.DateTime, double> MarketValue;

        /// <summary>Stub of method System.Double FinanceAnalyzer.IStockHolder.SellAllStocks(System.Double unitPrice)</summary>
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<double, double> SellAllStocks;

        /// <summary>Stub of method System.Double FinanceAnalyzer.IStockHolder.SellStock(System.Int32 count, System.Double unitPrice)</summary>
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<int, double, double> SellStock;

        /// <summary>Stub of method System.Int32 FinanceAnalyzer.IStockHolder.StockCount()</summary>
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<int> StockCount;
    }
}
namespace FinanceAnalyzer.Stubs
{
    /// <summary>Stub of IStockImporter</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Stubs", "0.16.40915.5")]
    [global::System.Serializable]
    [global::System.Diagnostics.DebuggerDisplay("Stub = IStockImporter")]
    [global::System.Diagnostics.DebuggerStepThrough]
    internal partial class SIStockImporter
      : global::Microsoft.Stubs.Framework.StubBase
      , global::FinanceAnalyzer.IStockImporter
    {
        /// <summary>Initializes a new instance of type SIStockImporter</summary>
        [global::System.Diagnostics.DebuggerHidden]
        public SIStockImporter()
        {
        }

        /// <summary>Stub of method System.Void FinanceAnalyzer.IStockImporter.Import()</summary>
        [global::System.Diagnostics.DebuggerHidden]
        void global::FinanceAnalyzer.IStockImporter.Import()
        {
            global::Microsoft.Stubs.Framework.StubDelegates.Action sh = this.Import;
            if (sh != (global::Microsoft.Stubs.Framework.StubDelegates.Action)null)
              sh.Invoke();
            else 
            {
              global::Microsoft.Stubs.Framework.IStubBehavior stub = base.FallbackBehavior;
              stub.VoidResult<global::FinanceAnalyzer.Stubs.SIStockImporter>(this);
            }
        }

        /// <summary>Stub of method System.Void FinanceAnalyzer.IStockImporter.Import()</summary>
        public global::Microsoft.Stubs.Framework.StubDelegates.Action Import;
    }
}
namespace FinanceAnalyzer.Stubs
{
    /// <summary>Stub of IStockOper</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Stubs", "0.16.40915.5")]
    [global::System.Serializable]
    [global::System.Diagnostics.DebuggerDisplay("Stub = IStockOper")]
    [global::System.Diagnostics.DebuggerStepThrough]
    public partial class SIStockOper
      : global::Microsoft.Stubs.Framework.StubBase
      , global::FinanceAnalyzer.IStockOper
    {
        /// <summary>Initializes a new instance of type SIStockOper</summary>
        [global::System.Diagnostics.DebuggerHidden]
        public SIStockOper()
        {
        }

        /// <summary>Stub of method System.Int32 FinanceAnalyzer.IStockOper.GetCount()</summary>
        [global::System.Diagnostics.DebuggerHidden]
        int global::FinanceAnalyzer.IStockOper.GetCount()
        {
            global::Microsoft.Stubs.Framework.StubDelegates.Func<int> sh = this.GetCount;
            if (sh != (global::Microsoft.Stubs.Framework.StubDelegates.Func<int>)null)
              return sh.Invoke();
            else 
            {
              global::Microsoft.Stubs.Framework.IStubBehavior stub = base.FallbackBehavior;
              return stub.Result<global::FinanceAnalyzer.Stubs.SIStockOper, int>(this);
            }
        }

        /// <summary>Stub of method FinanceAnalyzer.OperType FinanceAnalyzer.IStockOper.GetOperType()</summary>
        [global::System.Diagnostics.DebuggerHidden]
        global::FinanceAnalyzer.OperType global::FinanceAnalyzer.IStockOper.GetOperType()
        {
            global::Microsoft.Stubs.Framework
              .StubDelegates.Func<global::FinanceAnalyzer.OperType> sh = this.GetOperType;
            if (sh != (global::Microsoft.Stubs.Framework
              .StubDelegates.Func<global::FinanceAnalyzer.OperType>)null)
              return sh.Invoke();
            else 
            {
              global::Microsoft.Stubs.Framework.IStubBehavior stub = base.FallbackBehavior;
              return stub.Result<global::FinanceAnalyzer.Stubs.SIStockOper, 
              global::FinanceAnalyzer.OperType>(this);
            }
        }

        /// <summary>Stub of method System.Int32 FinanceAnalyzer.IStockOper.GetStockId()</summary>
        [global::System.Diagnostics.DebuggerHidden]
        int global::FinanceAnalyzer.IStockOper.GetStockId()
        {
            global::Microsoft.Stubs.Framework.StubDelegates.Func<int> sh = this.GetStockId;
            if (sh != (global::Microsoft.Stubs.Framework.StubDelegates.Func<int>)null)
              return sh.Invoke();
            else 
            {
              global::Microsoft.Stubs.Framework.IStubBehavior stub = base.FallbackBehavior;
              return stub.Result<global::FinanceAnalyzer.Stubs.SIStockOper, int>(this);
            }
        }

        /// <summary>Stub of method System.Double FinanceAnalyzer.IStockOper.GetUnitPrice()</summary>
        [global::System.Diagnostics.DebuggerHidden]
        double global::FinanceAnalyzer.IStockOper.GetUnitPrice()
        {
            global::Microsoft.Stubs.Framework.StubDelegates.Func<double> sh
               = this.GetUnitPrice;
            if (sh != (global::Microsoft.Stubs.Framework.StubDelegates.Func<double>)null)
              return sh.Invoke();
            else 
            {
              global::Microsoft.Stubs.Framework.IStubBehavior stub = base.FallbackBehavior;
              return stub.Result<global::FinanceAnalyzer.Stubs.SIStockOper, double>(this);
            }
        }

        /// <summary>Stub of method System.Int32 FinanceAnalyzer.IStockOper.GetCount()</summary>
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<int> GetCount;

        /// <summary>Stub of method FinanceAnalyzer.OperType FinanceAnalyzer.IStockOper.GetOperType()</summary>
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<global::FinanceAnalyzer.OperType> GetOperType;

        /// <summary>Stub of method System.Int32 FinanceAnalyzer.IStockOper.GetStockId()</summary>
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<int> GetStockId;

        /// <summary>Stub of method System.Double FinanceAnalyzer.IStockOper.GetUnitPrice()</summary>
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<double> GetUnitPrice;
    }
}
namespace FinanceAnalyzer.DB.Stubs
{
    /// <summary>Stub of IStockSaver</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Stubs", "0.16.40915.5")]
    [global::System.Serializable]
    [global::System.Diagnostics.DebuggerDisplay("Stub = IStockSaver")]
    [global::System.Diagnostics.DebuggerStepThrough]
    public partial class SIStockSaver
      : global::Microsoft.Stubs.Framework.StubBase
      , global::FinanceAnalyzer.DB.IStockSaver
    {
        /// <summary>Initializes a new instance of type SIStockSaver</summary>
        [global::System.Diagnostics.DebuggerHidden]
        public SIStockSaver()
        {
        }

        /// <summary>Stub of method System.Void FinanceAnalyzer.DB.IStockSaver.Add(FinanceAnalyzer.DB.StockData data)</summary>
        public global::Microsoft.Stubs.Framework.StubDelegates.Action<global::FinanceAnalyzer.DB.StockData> Add;

        /// <summary>Stub of method System.Void FinanceAnalyzer.DB.IStockSaver.AfterAdd()</summary>
        public global::Microsoft.Stubs.Framework.StubDelegates.Action AfterAdd;

        /// <summary>Stub of method System.Void FinanceAnalyzer.DB.IStockSaver.BeforeAdd()</summary>
        public global::Microsoft.Stubs.Framework.StubDelegates.Action BeforeAdd;

        /// <summary>Stub of method System.Void FinanceAnalyzer.DB.IStockSaver.Add(FinanceAnalyzer.DB.StockData data)</summary>
        [global::System.Diagnostics.DebuggerHidden]
        void global::FinanceAnalyzer.DB.IStockSaver.Add(global::FinanceAnalyzer.DB.StockData data)
        {
            global::Microsoft.Stubs.Framework
              .StubDelegates.Action<global::FinanceAnalyzer.DB.StockData> sh = this.Add;
            if (sh != (global::Microsoft.Stubs.Framework
              .StubDelegates.Action<global::FinanceAnalyzer.DB.StockData>)null)
              sh.Invoke(data);
            else 
            {
              global::Microsoft.Stubs.Framework.IStubBehavior stub = base.FallbackBehavior;
              stub.VoidResult<global::FinanceAnalyzer.DB.Stubs.SIStockSaver>(this);
            }
        }

        /// <summary>Stub of method System.Void FinanceAnalyzer.DB.IStockSaver.AfterAdd()</summary>
        [global::System.Diagnostics.DebuggerHidden]
        void global::FinanceAnalyzer.DB.IStockSaver.AfterAdd()
        {
            global::Microsoft.Stubs.Framework.StubDelegates.Action sh = this.AfterAdd;
            if (sh != (global::Microsoft.Stubs.Framework.StubDelegates.Action)null)
              sh.Invoke();
            else 
            {
              global::Microsoft.Stubs.Framework.IStubBehavior stub = base.FallbackBehavior;
              stub.VoidResult<global::FinanceAnalyzer.DB.Stubs.SIStockSaver>(this);
            }
        }

        /// <summary>Stub of method System.Void FinanceAnalyzer.DB.IStockSaver.BeforeAdd()</summary>
        [global::System.Diagnostics.DebuggerHidden]
        void global::FinanceAnalyzer.DB.IStockSaver.BeforeAdd()
        {
            global::Microsoft.Stubs.Framework.StubDelegates.Action sh = this.BeforeAdd;
            if (sh != (global::Microsoft.Stubs.Framework.StubDelegates.Action)null)
              sh.Invoke();
            else 
            {
              global::Microsoft.Stubs.Framework.IStubBehavior stub = base.FallbackBehavior;
              stub.VoidResult<global::FinanceAnalyzer.DB.Stubs.SIStockSaver>(this);
            }
        }
    }
}
namespace FinanceAnalyzer.Stubs
{
    /// <summary>Stub of IStockValues</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Stubs", "0.16.40915.5")]
    [global::System.Serializable]
    [global::System.Diagnostics.DebuggerDisplay("Stub = IStockValues")]
    [global::System.Diagnostics.DebuggerStepThrough]
    public partial class SIStockValues
      : global::Microsoft.Stubs.Framework.StubBase
      , global::FinanceAnalyzer.IStockValues
    {
        /// <summary>Initializes a new instance of type SIStockValues</summary>
        [global::System.Diagnostics.DebuggerHidden]
        public SIStockValues()
        {
        }

        /// <summary>Attaches delegates to emulate SIStockValues.TransactionCount as a property with a backing field</summary>
        public void AttachBackingFieldToTransactionCount()
        {
            global::Microsoft.Stubs.Framework.IStubBehavior stub = base.FallbackBehavior;
            int initialValue;
            if (this.TransactionCountSet ==
              (global::Microsoft.Stubs.Framework.StubDelegates.Action<int>)null && 
            this.TransactionCountGet ==
              (global::Microsoft.Stubs.Framework.StubDelegates.Func<int>)null && 
            stub.TryGetPropertyValue<global::FinanceAnalyzer.Stubs.SIStockValues, int>
                (this, out initialValue))
            {
              global::Microsoft.Stubs.Framework.StubValueHolder<int> state
                 = new global::Microsoft.Stubs.Framework.StubValueHolder<int>(initialValue);
              this.TransactionCountGet = state.GetGetter();
              this.TransactionCountSet = state.GetSetter();
            }
        }

        /// <summary>Stub of method System.Collections.Generic.ICollection`1&lt;System.DateTime&gt; FinanceAnalyzer.IStockValues.GetAllDate()</summary>
        [global::System.Diagnostics.DebuggerHidden]
        global::System.Collections.Generic.ICollection<global::System.DateTime> global::FinanceAnalyzer.IStockValues.GetAllDate()
        {
            global::Microsoft.Stubs.Framework
              .StubDelegates.Func<global::System.Collections.Generic
                .ICollection<global::System.DateTime>> sh = this.GetAllDate;
            if (sh != (global::Microsoft.Stubs.Framework
              .StubDelegates.Func<global::System.Collections.Generic
                .ICollection<global::System.DateTime>>)null)
              return sh.Invoke();
            else 
            {
              global::Microsoft.Stubs.Framework.IStubBehavior stub = base.FallbackBehavior;
              return stub.Result<global::FinanceAnalyzer.Stubs.SIStockValues, 
              global::System.Collections.Generic
                .ICollection<global::System.DateTime>>(this);
            }
        }

        /// <summary>Stub of method System.Double FinanceAnalyzer.IStockValues.GetTotalValue(System.DateTime dt)</summary>
        [global::System.Diagnostics.DebuggerHidden]
        double global::FinanceAnalyzer.IStockValues.GetTotalValue(global::System.DateTime dt)
        {
            global::Microsoft.Stubs.Framework
              .StubDelegates.Func<global::System.DateTime, double> sh = this.GetTotalValue;
            if (sh != (global::Microsoft.Stubs.Framework
              .StubDelegates.Func<global::System.DateTime, double>)null)
              return sh.Invoke(dt);
            else 
            {
              global::Microsoft.Stubs.Framework.IStubBehavior stub = base.FallbackBehavior;
              return stub.Result<global::FinanceAnalyzer.Stubs.SIStockValues, double>(this);
            }
        }

        /// <summary>Stub of method System.Void FinanceAnalyzer.IStockValues.SetTotalValue(System.DateTime dt, System.Double val)</summary>
        [global::System.Diagnostics.DebuggerHidden]
        void global::FinanceAnalyzer.IStockValues.SetTotalValue(global::System.DateTime dt, double val)
        {
            global::Microsoft.Stubs.Framework
              .StubDelegates.Action<global::System.DateTime, double> sh = this.SetTotalValue;
            if (sh != (global::Microsoft.Stubs.Framework
              .StubDelegates.Action<global::System.DateTime, double>)null)
              sh.Invoke(dt, val);
            else 
            {
              global::Microsoft.Stubs.Framework.IStubBehavior stub = base.FallbackBehavior;
              stub.VoidResult<global::FinanceAnalyzer.Stubs.SIStockValues>(this);
            }
        }

        /// <summary>Stub of method System.Collections.Generic.ICollection`1&lt;System.DateTime&gt; FinanceAnalyzer.IStockValues.GetAllDate()</summary>
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<global::System.Collections.Generic.ICollection<global::System.DateTime>> GetAllDate;

        /// <summary>Stub of method System.Double FinanceAnalyzer.IStockValues.GetTotalValue(System.DateTime dt)</summary>
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<global::System.DateTime, double> GetTotalValue;

        /// <summary>Stub of method System.Void FinanceAnalyzer.IStockValues.SetTotalValue(System.DateTime dt, System.Double val)</summary>
        public global::Microsoft.Stubs.Framework.StubDelegates.Action<global::System.DateTime, double> SetTotalValue;

        /// <summary>Stub of property FinanceAnalyzer.IStockValues.TransactionCount</summary>
        int global::FinanceAnalyzer.IStockValues.TransactionCount
        {
            [global::System.Diagnostics.DebuggerHidden]
            get
            {
                this.AttachBackingFieldToTransactionCount();
                global::Microsoft.Stubs.Framework.StubDelegates.Func<int> sh
                   = this.TransactionCountGet;
                if (sh != (global::Microsoft.Stubs.Framework.StubDelegates.Func<int>)null)
                  return sh.Invoke();
                else 
                {
                  global::Microsoft.Stubs.Framework.IStubBehavior stub = base.FallbackBehavior;
                  return stub.Result<global::FinanceAnalyzer.Stubs.SIStockValues, int>(this);
                }
            }
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                this.AttachBackingFieldToTransactionCount();
                global::Microsoft.Stubs.Framework.StubDelegates.Action<int> sh
                   = this.TransactionCountSet;
                if (sh != (global::Microsoft.Stubs.Framework.StubDelegates.Action<int>)null)
                  sh.Invoke(value);
                else 
                {
                  global::Microsoft.Stubs.Framework.IStubBehavior stub = base.FallbackBehavior;
                  stub.VoidResult<global::FinanceAnalyzer.Stubs.SIStockValues>(this);
                }
            }
        }

        /// <summary>Stub of method System.Int32 FinanceAnalyzer.IStockValues.get_TransactionCount()</summary>
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<int> TransactionCountGet;

        /// <summary>Stub of method System.Void FinanceAnalyzer.IStockValues.set_TransactionCount(System.Int32 value)</summary>
        public global::Microsoft.Stubs.Framework.StubDelegates.Action<int> TransactionCountSet;
    }
}
namespace FinanceAnalyzer.Trace.Stubs
{
    /// <summary>Stub of ITracer</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Stubs", "0.16.40915.5")]
    [global::System.Serializable]
    [global::System.Diagnostics.DebuggerDisplay("Stub = ITracer")]
    [global::System.Diagnostics.DebuggerStepThrough]
    internal partial class SITracer
      : global::Microsoft.Stubs.Framework.StubBase
      , global::FinanceAnalyzer.Trace.ITracer
    {
        /// <summary>Initializes a new instance of type SITracer</summary>
        [global::System.Diagnostics.DebuggerHidden]
        public SITracer()
        {
        }
    }
}
namespace FinanceAnalyzer.KDJ.Stubs
{
    /// <summary>Stub of KdjCalculator</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Stubs", "0.16.40915.5")]
    [global::System.Serializable]
    [global::System.Diagnostics.DebuggerDisplay("Stub = KdjCalculator")]
    [global::System.Diagnostics.DebuggerStepThrough]
    internal partial class SKdjCalculator
      : global::FinanceAnalyzer.KDJ.KdjCalculator
      , global::Microsoft.Stubs.Framework.IStub
      , global::Microsoft.Stubs.Framework.IPartialStub
    {
        /// <summary>Initializes a new instance</summary>
        [global::System.Diagnostics.DebuggerHidden]
        protected SKdjCalculator()
        {
            this.InitializeStub();
        }

        /// <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        public bool CallBase
        {
            [global::System.Diagnostics.DebuggerHidden]
            get
            {
                return this.callBase;
            }
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                this.callBase = value;
            }
        }

        /// <summary>Gets or sets the fallback behavior.</summary>
        public global::Microsoft.Stubs.Framework.IStubBehavior FallbackBehavior
        {
            [global::System.Diagnostics.DebuggerHidden]
            get
            {
                return global::Microsoft.Stubs.Framework.StubFallbackBehavior.GetValueOrCurrent
                    (this.defaultStub);
            }
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                this.defaultStub = value;
            }
        }

        /// <summary>Initializes a new instance of type SKdjCalculator</summary>
        [global::System.Diagnostics.DebuggerHidden]
        private void InitializeStub()
        {
        }

        private bool callBase;

        private global::Microsoft.Stubs.Framework.IStubBehavior defaultStub;
    }
}
namespace FinanceAnalyzer.KDJ.Stubs
{
    /// <summary>Stub of KdjStorage</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Stubs", "0.16.40915.5")]
    [global::System.Serializable]
    [global::System.Diagnostics.DebuggerDisplay("Stub = KdjStorage")]
    [global::System.Diagnostics.DebuggerStepThrough]
    internal partial class SKdjStorage
      : global::FinanceAnalyzer.KDJ.KdjStorage
      , global::Microsoft.Stubs.Framework.IStub
      , global::Microsoft.Stubs.Framework.IPartialStub
    {
        /// <summary>Initializes a new instance</summary>
        [global::System.Diagnostics.DebuggerHidden]
        protected SKdjStorage()
        {
            this.InitializeStub();
        }

        /// <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        public bool CallBase
        {
            [global::System.Diagnostics.DebuggerHidden]
            get
            {
                return this.callBase;
            }
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                this.callBase = value;
            }
        }

        /// <summary>Gets or sets the fallback behavior.</summary>
        public global::Microsoft.Stubs.Framework.IStubBehavior FallbackBehavior
        {
            [global::System.Diagnostics.DebuggerHidden]
            get
            {
                return global::Microsoft.Stubs.Framework.StubFallbackBehavior.GetValueOrCurrent
                    (this.defaultStub);
            }
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                this.defaultStub = value;
            }
        }

        /// <summary>Initializes a new instance of type SKdjStorage</summary>
        [global::System.Diagnostics.DebuggerHidden]
        private void InitializeStub()
        {
        }

        private bool callBase;

        private global::Microsoft.Stubs.Framework.IStubBehavior defaultStub;
    }
}
namespace FinanceAnalyzer.Stubs
{
    /// <summary>Stub of LogMgr</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Stubs", "0.16.40915.5")]
    [global::System.Serializable]
    [global::System.Diagnostics.DebuggerDisplay("Stub = LogMgr")]
    [global::System.Diagnostics.DebuggerStepThrough]
    public partial class SLogMgr
      : global::FinanceAnalyzer.LogMgr
      , global::Microsoft.Stubs.Framework.IStub
      , global::Microsoft.Stubs.Framework.IPartialStub
    {
        /// <summary>Initializes a new instance</summary>
        [global::System.Diagnostics.DebuggerHidden]
        public SLogMgr()
        {
            this.InitializeStub();
        }

        /// <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        public bool CallBase
        {
            [global::System.Diagnostics.DebuggerHidden]
            get
            {
                return this.callBase;
            }
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                this.callBase = value;
            }
        }

        /// <summary>Gets or sets the fallback behavior.</summary>
        public global::Microsoft.Stubs.Framework.IStubBehavior FallbackBehavior
        {
            [global::System.Diagnostics.DebuggerHidden]
            get
            {
                return global::Microsoft.Stubs.Framework.StubFallbackBehavior.GetValueOrCurrent
                    (this.defaultStub);
            }
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                this.defaultStub = value;
            }
        }

        /// <summary>Initializes a new instance of type SLogMgr</summary>
        [global::System.Diagnostics.DebuggerHidden]
        private void InitializeStub()
        {
        }

        private bool callBase;

        private global::Microsoft.Stubs.Framework.IStubBehavior defaultStub;
    }
}
namespace FinanceAnalyzer.Strategy.Condition.Stubs
{
    /// <summary>Stub of PriceCondition</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Stubs", "0.16.40915.5")]
    [global::System.Serializable]
    [global::System.Diagnostics.DebuggerDisplay("Stub = PriceCondition")]
    [global::System.Diagnostics.DebuggerStepThrough]
    public partial class SPriceCondition
      : global::FinanceAnalyzer.Strategy.Condition.PriceCondition
      , global::Microsoft.Stubs.Framework.IStub
      , global::Microsoft.Stubs.Framework.IPartialStub
    {
        /// <summary>Initializes a new instance</summary>
        [global::System.Diagnostics.DebuggerHidden]
        public SPriceCondition(global::FinanceAnalyzer.IStockHolder holder)
        : base(holder)
        {
            this.InitializeStub();
        }

        /// <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        public bool CallBase
        {
            [global::System.Diagnostics.DebuggerHidden]
            get
            {
                return this.callBase;
            }
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                this.callBase = value;
            }
        }

        /// <summary>Gets or sets the fallback behavior.</summary>
        public global::Microsoft.Stubs.Framework.IStubBehavior FallbackBehavior
        {
            [global::System.Diagnostics.DebuggerHidden]
            get
            {
                return global::Microsoft.Stubs.Framework.StubFallbackBehavior.GetValueOrCurrent
                    (this.defaultStub);
            }
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                this.defaultStub = value;
            }
        }

        /// <summary>Initializes a new instance of type SPriceCondition</summary>
        [global::System.Diagnostics.DebuggerHidden]
        private void InitializeStub()
        {
        }

        private bool callBase;

        private global::Microsoft.Stubs.Framework.IStubBehavior defaultStub;
    }
}
namespace FinanceAnalyzer.Strategy.Rise.Stubs
{
    /// <summary>Stub of RiseJudger</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Stubs", "0.16.40915.5")]
    [global::System.Serializable]
    [global::System.Diagnostics.DebuggerDisplay("Stub = RiseJudger")]
    [global::System.Diagnostics.DebuggerStepThrough]
    public partial class SRiseJudger
      : global::FinanceAnalyzer.Strategy.Rise.RiseJudger
      , global::Microsoft.Stubs.Framework.IStub
      , global::Microsoft.Stubs.Framework.IPartialStub
    {
        /// <summary>Initializes a new instance</summary>
        [global::System.Diagnostics.DebuggerHidden]
        public SRiseJudger()
        {
            this.InitializeStub();
        }

        /// <summary>Stub of method System.Boolean FinanceAnalyzer.Strategy.Rise.IRiseJudger.AllDown(FinanceAnalyzer.DayStock day1, FinanceAnalyzer.DayStock day2, FinanceAnalyzer.DayStock day3)</summary>
        [global::System.Diagnostics.DebuggerHidden]
        public override bool AllDown(
            global::FinanceAnalyzer.DayStock day1,
            global::FinanceAnalyzer.DayStock day2,
            global::FinanceAnalyzer.DayStock day3
        )
        {
            global::Microsoft.Stubs.Framework
              .StubDelegates.Func<global::FinanceAnalyzer.DayStock, 
              global::FinanceAnalyzer.DayStock, 
              global::FinanceAnalyzer.DayStock, bool> sh
               = this.AllDownDayStockDayStockDayStock;
            if (sh != (global::Microsoft.Stubs.Framework
              .StubDelegates.Func<global::FinanceAnalyzer.DayStock, 
              global::FinanceAnalyzer.DayStock, 
              global::FinanceAnalyzer.DayStock, bool>)null)
              return sh.Invoke(day1, day2, day3);
            else 
            {
              global::Microsoft.Stubs.Framework.IStubBehavior stub = this.FallbackBehavior;
              return 
                stub.Result<global::FinanceAnalyzer.Strategy.Rise.Stubs.SRiseJudger, bool>
                    (this);
            }
        }

        /// <summary>Stub of method System.Boolean FinanceAnalyzer.Strategy.Rise.IRiseJudger.AllDown(FinanceAnalyzer.DayStock day1, FinanceAnalyzer.DayStock day2, FinanceAnalyzer.DayStock day3)</summary>
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<global::FinanceAnalyzer.DayStock, global::FinanceAnalyzer.DayStock, global::FinanceAnalyzer.DayStock, bool> AllDownDayStockDayStockDayStock;

        /// <summary>Stub of method System.Boolean FinanceAnalyzer.Strategy.Rise.IRiseJudger.AllRise(FinanceAnalyzer.DayStock day1, FinanceAnalyzer.DayStock day2, FinanceAnalyzer.DayStock day3)</summary>
        [global::System.Diagnostics.DebuggerHidden]
        public override bool AllRise(
            global::FinanceAnalyzer.DayStock day1,
            global::FinanceAnalyzer.DayStock day2,
            global::FinanceAnalyzer.DayStock day3
        )
        {
            global::Microsoft.Stubs.Framework
              .StubDelegates.Func<global::FinanceAnalyzer.DayStock, 
              global::FinanceAnalyzer.DayStock, 
              global::FinanceAnalyzer.DayStock, bool> sh
               = this.AllRiseDayStockDayStockDayStock;
            if (sh != (global::Microsoft.Stubs.Framework
              .StubDelegates.Func<global::FinanceAnalyzer.DayStock, 
              global::FinanceAnalyzer.DayStock, 
              global::FinanceAnalyzer.DayStock, bool>)null)
              return sh.Invoke(day1, day2, day3);
            else 
            {
              global::Microsoft.Stubs.Framework.IStubBehavior stub = this.FallbackBehavior;
              return 
                stub.Result<global::FinanceAnalyzer.Strategy.Rise.Stubs.SRiseJudger, bool>
                    (this);
            }
        }

        /// <summary>Stub of method System.Boolean FinanceAnalyzer.Strategy.Rise.IRiseJudger.AllRise(FinanceAnalyzer.DayStock day1, FinanceAnalyzer.DayStock day2, FinanceAnalyzer.DayStock day3)</summary>
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<global::FinanceAnalyzer.DayStock, global::FinanceAnalyzer.DayStock, global::FinanceAnalyzer.DayStock, bool> AllRiseDayStockDayStockDayStock;

        /// <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        public bool CallBase
        {
            [global::System.Diagnostics.DebuggerHidden]
            get
            {
                return this.callBase;
            }
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                this.callBase = value;
            }
        }

        /// <summary>Gets or sets the fallback behavior.</summary>
        public global::Microsoft.Stubs.Framework.IStubBehavior FallbackBehavior
        {
            [global::System.Diagnostics.DebuggerHidden]
            get
            {
                return global::Microsoft.Stubs.Framework.StubFallbackBehavior.GetValueOrCurrent
                    (this.defaultStub);
            }
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                this.defaultStub = value;
            }
        }

        /// <summary>Stub of method System.String FinanceAnalyzer.Strategy.Rise.IRiseJudger.GetName()</summary>
        [global::System.Diagnostics.DebuggerHidden]
        public override string GetName()
        {
            global::Microsoft.Stubs.Framework.StubDelegates.Func<string> sh
               = this.IRiseJudgerGetName;
            if (sh != (global::Microsoft.Stubs.Framework.StubDelegates.Func<string>)null)
              return sh.Invoke();
            else 
            {
              global::Microsoft.Stubs.Framework.IStubBehavior stub = this.FallbackBehavior;
              return 
                stub.Result<global::FinanceAnalyzer.Strategy.Rise.Stubs.SRiseJudger, string>
                    (this);
            }
        }

        /// <summary>Stub of method System.String FinanceAnalyzer.Strategy.Rise.IRiseJudger.GetName()</summary>
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<string> IRiseJudgerGetName;

        /// <summary>Initializes a new instance of type SRiseJudger</summary>
        [global::System.Diagnostics.DebuggerHidden]
        private void InitializeStub()
        {
        }

        private bool callBase;

        private global::Microsoft.Stubs.Framework.IStubBehavior defaultStub;
    }
}
namespace FinanceAnalyzer.Strategy.Rise.Stubs
{
    /// <summary>Stub of RiseJudgerOptim</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Stubs", "0.16.40915.5")]
    [global::System.Serializable]
    [global::System.Diagnostics.DebuggerDisplay("Stub = RiseJudgerOptim")]
    [global::System.Diagnostics.DebuggerStepThrough]
    public partial class SRiseJudgerOptim
      : global::FinanceAnalyzer.Strategy.Rise.RiseJudgerOptim
      , global::Microsoft.Stubs.Framework.IStub
      , global::Microsoft.Stubs.Framework.IPartialStub
    {
        /// <summary>Initializes a new instance</summary>
        [global::System.Diagnostics.DebuggerHidden]
        public SRiseJudgerOptim()
        {
            this.InitializeStub();
        }

        /// <summary>Stub of method System.Boolean FinanceAnalyzer.Strategy.Rise.IRiseJudger.AllDown(FinanceAnalyzer.DayStock day1, FinanceAnalyzer.DayStock day2, FinanceAnalyzer.DayStock day3)</summary>
        [global::System.Diagnostics.DebuggerHidden]
        public override bool AllDown(
            global::FinanceAnalyzer.DayStock day1,
            global::FinanceAnalyzer.DayStock day2,
            global::FinanceAnalyzer.DayStock day3
        )
        {
            global::Microsoft.Stubs.Framework
              .StubDelegates.Func<global::FinanceAnalyzer.DayStock, 
              global::FinanceAnalyzer.DayStock, 
              global::FinanceAnalyzer.DayStock, bool> sh
               = this.AllDownDayStockDayStockDayStock;
            if (sh != (global::Microsoft.Stubs.Framework
              .StubDelegates.Func<global::FinanceAnalyzer.DayStock, 
              global::FinanceAnalyzer.DayStock, 
              global::FinanceAnalyzer.DayStock, bool>)null)
              return sh.Invoke(day1, day2, day3);
            else 
            {
              global::Microsoft.Stubs.Framework.IStubBehavior stub = this.FallbackBehavior;
              return stub.Result
                  <global::FinanceAnalyzer.Strategy.Rise.Stubs.SRiseJudgerOptim, bool>(this);
            }
        }

        /// <summary>Stub of method System.Boolean FinanceAnalyzer.Strategy.Rise.IRiseJudger.AllDown(FinanceAnalyzer.DayStock day1, FinanceAnalyzer.DayStock day2, FinanceAnalyzer.DayStock day3)</summary>
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<global::FinanceAnalyzer.DayStock, global::FinanceAnalyzer.DayStock, global::FinanceAnalyzer.DayStock, bool> AllDownDayStockDayStockDayStock;

        /// <summary>Stub of method System.Boolean FinanceAnalyzer.Strategy.Rise.IRiseJudger.AllRise(FinanceAnalyzer.DayStock day1, FinanceAnalyzer.DayStock day2, FinanceAnalyzer.DayStock day3)</summary>
        [global::System.Diagnostics.DebuggerHidden]
        public override bool AllRise(
            global::FinanceAnalyzer.DayStock day1,
            global::FinanceAnalyzer.DayStock day2,
            global::FinanceAnalyzer.DayStock day3
        )
        {
            global::Microsoft.Stubs.Framework
              .StubDelegates.Func<global::FinanceAnalyzer.DayStock, 
              global::FinanceAnalyzer.DayStock, 
              global::FinanceAnalyzer.DayStock, bool> sh
               = this.AllRiseDayStockDayStockDayStock;
            if (sh != (global::Microsoft.Stubs.Framework
              .StubDelegates.Func<global::FinanceAnalyzer.DayStock, 
              global::FinanceAnalyzer.DayStock, 
              global::FinanceAnalyzer.DayStock, bool>)null)
              return sh.Invoke(day1, day2, day3);
            else 
            {
              global::Microsoft.Stubs.Framework.IStubBehavior stub = this.FallbackBehavior;
              return stub.Result
                  <global::FinanceAnalyzer.Strategy.Rise.Stubs.SRiseJudgerOptim, bool>(this);
            }
        }

        /// <summary>Stub of method System.Boolean FinanceAnalyzer.Strategy.Rise.IRiseJudger.AllRise(FinanceAnalyzer.DayStock day1, FinanceAnalyzer.DayStock day2, FinanceAnalyzer.DayStock day3)</summary>
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<global::FinanceAnalyzer.DayStock, global::FinanceAnalyzer.DayStock, global::FinanceAnalyzer.DayStock, bool> AllRiseDayStockDayStockDayStock;

        /// <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        public bool CallBase
        {
            [global::System.Diagnostics.DebuggerHidden]
            get
            {
                return this.callBase;
            }
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                this.callBase = value;
            }
        }

        /// <summary>Gets or sets the fallback behavior.</summary>
        public global::Microsoft.Stubs.Framework.IStubBehavior FallbackBehavior
        {
            [global::System.Diagnostics.DebuggerHidden]
            get
            {
                return global::Microsoft.Stubs.Framework.StubFallbackBehavior.GetValueOrCurrent
                    (this.defaultStub);
            }
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                this.defaultStub = value;
            }
        }

        /// <summary>Stub of method System.String FinanceAnalyzer.Strategy.Rise.IRiseJudger.GetName()</summary>
        [global::System.Diagnostics.DebuggerHidden]
        public override string GetName()
        {
            global::Microsoft.Stubs.Framework.StubDelegates.Func<string> sh
               = this.IRiseJudgerGetName;
            if (sh != (global::Microsoft.Stubs.Framework.StubDelegates.Func<string>)null)
              return sh.Invoke();
            else 
            {
              global::Microsoft.Stubs.Framework.IStubBehavior stub = this.FallbackBehavior;
              return 
                stub.Result<global::FinanceAnalyzer.Strategy.Rise.Stubs.SRiseJudgerOptim, 
                string>(this);
            }
        }

        /// <summary>Stub of method System.String FinanceAnalyzer.Strategy.Rise.IRiseJudger.GetName()</summary>
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<string> IRiseJudgerGetName;

        /// <summary>Initializes a new instance of type SRiseJudgerOptim</summary>
        [global::System.Diagnostics.DebuggerHidden]
        private void InitializeStub()
        {
        }

        private bool callBase;

        private global::Microsoft.Stubs.Framework.IStubBehavior defaultStub;
    }
}
namespace FinanceAnalyzer.Stubs
{
    /// <summary>Stub of Stock</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Stubs", "0.16.40915.5")]
    [global::System.Serializable]
    [global::System.Diagnostics.DebuggerDisplay("Stub = Stock")]
    [global::System.Diagnostics.DebuggerStepThrough]
    public partial class SStock
      : global::FinanceAnalyzer.Stock
      , global::Microsoft.Stubs.Framework.IStub
      , global::Microsoft.Stubs.Framework.IPartialStub
    {
        /// <summary>Initializes a new instance</summary>
        [global::System.Diagnostics.DebuggerHidden]
        public SStock()
        {
            this.InitializeStub();
        }

        /// <summary>Initializes a new instance</summary>
        [global::System.Diagnostics.DebuggerHidden]
        public SStock(
            int stockId,
            double price,
            int stockCount
        )
        : base(stockId, price, stockCount)
        {
            this.InitializeStub();
        }

        /// <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        public bool CallBase
        {
            [global::System.Diagnostics.DebuggerHidden]
            get
            {
                return this.callBase;
            }
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                this.callBase = value;
            }
        }

        /// <summary>Gets or sets the fallback behavior.</summary>
        public global::Microsoft.Stubs.Framework.IStubBehavior FallbackBehavior
        {
            [global::System.Diagnostics.DebuggerHidden]
            get
            {
                return global::Microsoft.Stubs.Framework.StubFallbackBehavior.GetValueOrCurrent
                    (this.defaultStub);
            }
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                this.defaultStub = value;
            }
        }

        /// <summary>Initializes a new instance of type SStock</summary>
        [global::System.Diagnostics.DebuggerHidden]
        private void InitializeStub()
        {
        }

        private bool callBase;

        private global::Microsoft.Stubs.Framework.IStubBehavior defaultStub;
    }
}
namespace FinanceAnalyzer.Stubs
{
    /// <summary>Stub of StockCommand</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Stubs", "0.16.40915.5")]
    [global::System.Serializable]
    [global::System.Diagnostics.DebuggerDisplay("Stub = StockCommand")]
    [global::System.Diagnostics.DebuggerStepThrough]
    public partial class SStockCommand
      : global::FinanceAnalyzer.StockCommand
      , global::Microsoft.Stubs.Framework.IStub
      , global::Microsoft.Stubs.Framework.IPartialStub
    {
        /// <summary>Initializes a new instance</summary>
        [global::System.Diagnostics.DebuggerHidden]
        public SStockCommand()
        {
            this.InitializeStub();
        }

        /// <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        public bool CallBase
        {
            [global::System.Diagnostics.DebuggerHidden]
            get
            {
                return this.callBase;
            }
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                this.callBase = value;
            }
        }

        /// <summary>Gets or sets the fallback behavior.</summary>
        public global::Microsoft.Stubs.Framework.IStubBehavior FallbackBehavior
        {
            [global::System.Diagnostics.DebuggerHidden]
            get
            {
                return global::Microsoft.Stubs.Framework.StubFallbackBehavior.GetValueOrCurrent
                    (this.defaultStub);
            }
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                this.defaultStub = value;
            }
        }

        /// <summary>Initializes a new instance of type SStockCommand</summary>
        [global::System.Diagnostics.DebuggerHidden]
        private void InitializeStub()
        {
        }

        private bool callBase;

        private global::Microsoft.Stubs.Framework.IStubBehavior defaultStub;
    }
}
namespace FinanceAnalyzer.DB.Stubs
{
    /// <summary>Stub of StockDBReader</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Stubs", "0.16.40915.5")]
    [global::System.Serializable]
    [global::System.Diagnostics.DebuggerDisplay("Stub = StockDBReader")]
    [global::System.Diagnostics.DebuggerStepThrough]
    public partial class SStockDBReader
      : global::FinanceAnalyzer.DB.StockDBReader
      , global::Microsoft.Stubs.Framework.IStub
      , global::Microsoft.Stubs.Framework.IPartialStub
    {
        /// <summary>Initializes a new instance</summary>
        [global::System.Diagnostics.DebuggerHidden]
        public SStockDBReader()
        {
            this.InitializeStub();
        }

        /// <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        public bool CallBase
        {
            [global::System.Diagnostics.DebuggerHidden]
            get
            {
                return this.callBase;
            }
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                this.callBase = value;
            }
        }

        /// <summary>Gets or sets the fallback behavior.</summary>
        public global::Microsoft.Stubs.Framework.IStubBehavior FallbackBehavior
        {
            [global::System.Diagnostics.DebuggerHidden]
            get
            {
                return global::Microsoft.Stubs.Framework.StubFallbackBehavior.GetValueOrCurrent
                    (this.defaultStub);
            }
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                this.defaultStub = value;
            }
        }

        /// <summary>Initializes a new instance of type SStockDBReader</summary>
        [global::System.Diagnostics.DebuggerHidden]
        private void InitializeStub()
        {
        }

        private bool callBase;

        private global::Microsoft.Stubs.Framework.IStubBehavior defaultStub;
    }
}
namespace FinanceAnalyzer.DB.Stubs
{
    /// <summary>Stub of StockDBSaver</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Stubs", "0.16.40915.5")]
    [global::System.Serializable]
    [global::System.Diagnostics.DebuggerDisplay("Stub = StockDBSaver")]
    [global::System.Diagnostics.DebuggerStepThrough]
    public partial class SStockDBSaver
      : global::FinanceAnalyzer.DB.StockDBSaver
      , global::Microsoft.Stubs.Framework.IStub
      , global::Microsoft.Stubs.Framework.IPartialStub
    {
        /// <summary>Initializes a new instance</summary>
        [global::System.Diagnostics.DebuggerHidden]
        public SStockDBSaver()
        {
            this.InitializeStub();
        }

        /// <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        public bool CallBase
        {
            [global::System.Diagnostics.DebuggerHidden]
            get
            {
                return this.callBase;
            }
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                this.callBase = value;
            }
        }

        /// <summary>Gets or sets the fallback behavior.</summary>
        public global::Microsoft.Stubs.Framework.IStubBehavior FallbackBehavior
        {
            [global::System.Diagnostics.DebuggerHidden]
            get
            {
                return global::Microsoft.Stubs.Framework.StubFallbackBehavior.GetValueOrCurrent
                    (this.defaultStub);
            }
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                this.defaultStub = value;
            }
        }

        /// <summary>Initializes a new instance of type SStockDBSaver</summary>
        [global::System.Diagnostics.DebuggerHidden]
        private void InitializeStub()
        {
        }

        private bool callBase;

        private global::Microsoft.Stubs.Framework.IStubBehavior defaultStub;
    }
}
namespace FinanceAnalyzer.DB.Stubs
{
    /// <summary>Stub of StockData</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Stubs", "0.16.40915.5")]
    [global::System.Serializable]
    [global::System.Diagnostics.DebuggerDisplay("Stub = StockData")]
    [global::System.Diagnostics.DebuggerStepThrough]
    public partial class SStockData
      : global::FinanceAnalyzer.DB.StockData
      , global::Microsoft.Stubs.Framework.IStub
      , global::Microsoft.Stubs.Framework.IPartialStub
    {
        /// <summary>Initializes a new instance</summary>
        [global::System.Diagnostics.DebuggerHidden]
        public SStockData()
        {
            this.InitializeStub();
        }

        /// <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        public bool CallBase
        {
            [global::System.Diagnostics.DebuggerHidden]
            get
            {
                return this.callBase;
            }
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                this.callBase = value;
            }
        }

        /// <summary>Gets or sets the fallback behavior.</summary>
        public global::Microsoft.Stubs.Framework.IStubBehavior FallbackBehavior
        {
            [global::System.Diagnostics.DebuggerHidden]
            get
            {
                return global::Microsoft.Stubs.Framework.StubFallbackBehavior.GetValueOrCurrent
                    (this.defaultStub);
            }
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                this.defaultStub = value;
            }
        }

        /// <summary>Initializes a new instance of type SStockData</summary>
        [global::System.Diagnostics.DebuggerHidden]
        private void InitializeStub()
        {
        }

        private bool callBase;

        private global::Microsoft.Stubs.Framework.IStubBehavior defaultStub;
    }
}
namespace FinanceAnalyzer.Stubs
{
    /// <summary>Stub of StockHolder</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Stubs", "0.16.40915.5")]
    [global::System.Serializable]
    [global::System.Diagnostics.DebuggerDisplay("Stub = StockHolder")]
    [global::System.Diagnostics.DebuggerStepThrough]
    public partial class SStockHolder
      : global::FinanceAnalyzer.StockHolder
      , global::Microsoft.Stubs.Framework.IStub
      , global::Microsoft.Stubs.Framework.IPartialStub
    {
        /// <summary>Initializes a new instance</summary>
        [global::System.Diagnostics.DebuggerHidden]
        public SStockHolder()
        {
            this.InitializeStub();
        }

        /// <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        public bool CallBase
        {
            [global::System.Diagnostics.DebuggerHidden]
            get
            {
                return this.callBase;
            }
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                this.callBase = value;
            }
        }

        /// <summary>Gets or sets the fallback behavior.</summary>
        public global::Microsoft.Stubs.Framework.IStubBehavior FallbackBehavior
        {
            [global::System.Diagnostics.DebuggerHidden]
            get
            {
                return global::Microsoft.Stubs.Framework.StubFallbackBehavior.GetValueOrCurrent
                    (this.defaultStub);
            }
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                this.defaultStub = value;
            }
        }

        /// <summary>Initializes a new instance of type SStockHolder</summary>
        [global::System.Diagnostics.DebuggerHidden]
        private void InitializeStub()
        {
        }

        private bool callBase;

        private global::Microsoft.Stubs.Framework.IStubBehavior defaultStub;
    }
}
namespace FinanceAnalyzer.Stubs
{
    /// <summary>Stub of StockImporter</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Stubs", "0.16.40915.5")]
    [global::System.Serializable]
    [global::System.Diagnostics.DebuggerDisplay("Stub = StockImporter")]
    [global::System.Diagnostics.DebuggerStepThrough]
    public partial class SStockImporter
      : global::FinanceAnalyzer.StockImporter
      , global::Microsoft.Stubs.Framework.IStub
      , global::Microsoft.Stubs.Framework.IPartialStub
    {
        /// <summary>Initializes a new instance</summary>
        [global::System.Diagnostics.DebuggerHidden]
        public SStockImporter()
        {
            this.InitializeStub();
        }

        /// <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        public bool CallBase
        {
            [global::System.Diagnostics.DebuggerHidden]
            get
            {
                return this.callBase;
            }
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                this.callBase = value;
            }
        }

        /// <summary>Gets or sets the fallback behavior.</summary>
        public global::Microsoft.Stubs.Framework.IStubBehavior FallbackBehavior
        {
            [global::System.Diagnostics.DebuggerHidden]
            get
            {
                return global::Microsoft.Stubs.Framework.StubFallbackBehavior.GetValueOrCurrent
                    (this.defaultStub);
            }
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                this.defaultStub = value;
            }
        }

        /// <summary>Initializes a new instance of type SStockImporter</summary>
        [global::System.Diagnostics.DebuggerHidden]
        private void InitializeStub()
        {
        }

        private bool callBase;

        private global::Microsoft.Stubs.Framework.IStubBehavior defaultStub;
    }
}
namespace FinanceAnalyzer.DB.Stubs
{
    /// <summary>Stub of StockImporter2</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Stubs", "0.16.40915.5")]
    [global::System.Serializable]
    [global::System.Diagnostics.DebuggerDisplay("Stub = StockImporter2")]
    [global::System.Diagnostics.DebuggerStepThrough]
    public partial class SStockImporter2
      : global::FinanceAnalyzer.DB.StockImporter2
      , global::Microsoft.Stubs.Framework.IStub
      , global::Microsoft.Stubs.Framework.IPartialStub
    {
        /// <summary>Initializes a new instance</summary>
        [global::System.Diagnostics.DebuggerHidden]
        public SStockImporter2()
        {
            this.InitializeStub();
        }

        /// <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        public bool CallBase
        {
            [global::System.Diagnostics.DebuggerHidden]
            get
            {
                return this.callBase;
            }
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                this.callBase = value;
            }
        }

        /// <summary>Gets or sets the fallback behavior.</summary>
        public global::Microsoft.Stubs.Framework.IStubBehavior FallbackBehavior
        {
            [global::System.Diagnostics.DebuggerHidden]
            get
            {
                return global::Microsoft.Stubs.Framework.StubFallbackBehavior.GetValueOrCurrent
                    (this.defaultStub);
            }
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                this.defaultStub = value;
            }
        }

        /// <summary>Initializes a new instance of type SStockImporter2</summary>
        [global::System.Diagnostics.DebuggerHidden]
        private void InitializeStub()
        {
        }

        private bool callBase;

        private global::Microsoft.Stubs.Framework.IStubBehavior defaultStub;
    }
}
namespace FinanceAnalyzer.Stubs
{
    /// <summary>Stub of StockOper</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Stubs", "0.16.40915.5")]
    [global::System.Serializable]
    [global::System.Diagnostics.DebuggerDisplay("Stub = StockOper")]
    [global::System.Diagnostics.DebuggerStepThrough]
    public partial class SStockOper
      : global::FinanceAnalyzer.StockOper
      , global::Microsoft.Stubs.Framework.IStub
      , global::Microsoft.Stubs.Framework.IPartialStub
    {
        /// <summary>Initializes a new instance</summary>
        [global::System.Diagnostics.DebuggerHidden]
        public SStockOper(
            double price,
            int count,
            global::FinanceAnalyzer.OperType type
        )
        : base(price, count, type)
        {
            this.InitializeStub();
        }

        /// <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        public bool CallBase
        {
            [global::System.Diagnostics.DebuggerHidden]
            get
            {
                return this.callBase;
            }
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                this.callBase = value;
            }
        }

        /// <summary>Gets or sets the fallback behavior.</summary>
        public global::Microsoft.Stubs.Framework.IStubBehavior FallbackBehavior
        {
            [global::System.Diagnostics.DebuggerHidden]
            get
            {
                return global::Microsoft.Stubs.Framework.StubFallbackBehavior.GetValueOrCurrent
                    (this.defaultStub);
            }
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                this.defaultStub = value;
            }
        }

        /// <summary>Initializes a new instance of type SStockOper</summary>
        [global::System.Diagnostics.DebuggerHidden]
        private void InitializeStub()
        {
        }

        private bool callBase;

        private global::Microsoft.Stubs.Framework.IStubBehavior defaultStub;
    }
}
namespace FinanceAnalyzer.Stubs
{
    /// <summary>Stub of StockPropDrawer</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Stubs", "0.16.40915.5")]
    [global::System.Serializable]
    [global::System.Diagnostics.DebuggerDisplay("Stub = StockPropDrawer")]
    [global::System.Diagnostics.DebuggerStepThrough]
    internal partial class SStockPropDrawer
      : global::FinanceAnalyzer.StockPropDrawer
      , global::Microsoft.Stubs.Framework.IStub
      , global::Microsoft.Stubs.Framework.IPartialStub
    {
        /// <summary>Initializes a new instance</summary>
        [global::System.Diagnostics.DebuggerHidden]
        protected SStockPropDrawer()
        {
            this.InitializeStub();
        }

        /// <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        public bool CallBase
        {
            [global::System.Diagnostics.DebuggerHidden]
            get
            {
                return this.callBase;
            }
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                this.callBase = value;
            }
        }

        /// <summary>Gets or sets the fallback behavior.</summary>
        public global::Microsoft.Stubs.Framework.IStubBehavior FallbackBehavior
        {
            [global::System.Diagnostics.DebuggerHidden]
            get
            {
                return global::Microsoft.Stubs.Framework.StubFallbackBehavior.GetValueOrCurrent
                    (this.defaultStub);
            }
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                this.defaultStub = value;
            }
        }

        /// <summary>Initializes a new instance of type SStockPropDrawer</summary>
        [global::System.Diagnostics.DebuggerHidden]
        private void InitializeStub()
        {
        }

        private bool callBase;

        private global::Microsoft.Stubs.Framework.IStubBehavior defaultStub;
    }
}
namespace FinanceAnalyzer.Stubs
{
    /// <summary>Stub of StockValues</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Stubs", "0.16.40915.5")]
    [global::System.Serializable]
    [global::System.Diagnostics.DebuggerDisplay("Stub = StockValues")]
    [global::System.Diagnostics.DebuggerStepThrough]
    public partial class SStockValues
      : global::FinanceAnalyzer.StockValues
      , global::Microsoft.Stubs.Framework.IStub
      , global::Microsoft.Stubs.Framework.IPartialStub
    {
        /// <summary>Initializes a new instance</summary>
        [global::System.Diagnostics.DebuggerHidden]
        public SStockValues()
        {
            this.InitializeStub();
        }

        /// <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        public bool CallBase
        {
            [global::System.Diagnostics.DebuggerHidden]
            get
            {
                return this.callBase;
            }
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                this.callBase = value;
            }
        }

        /// <summary>Gets or sets the fallback behavior.</summary>
        public global::Microsoft.Stubs.Framework.IStubBehavior FallbackBehavior
        {
            [global::System.Diagnostics.DebuggerHidden]
            get
            {
                return global::Microsoft.Stubs.Framework.StubFallbackBehavior.GetValueOrCurrent
                    (this.defaultStub);
            }
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                this.defaultStub = value;
            }
        }

        /// <summary>Initializes a new instance of type SStockValues</summary>
        [global::System.Diagnostics.DebuggerHidden]
        private void InitializeStub()
        {
        }

        private bool callBase;

        private global::Microsoft.Stubs.Framework.IStubBehavior defaultStub;
    }
}
namespace FinanceAnalyzer.Strategy.Stubs
{
    /// <summary>Stub of StrategyBamboo</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Stubs", "0.16.40915.5")]
    [global::System.Serializable]
    [global::System.Diagnostics.DebuggerDisplay("Stub = StrategyBamboo")]
    [global::System.Diagnostics.DebuggerStepThrough]
    internal partial class SStrategyBamboo
      : global::FinanceAnalyzer.Strategy.StrategyBamboo
      , global::Microsoft.Stubs.Framework.IStub
      , global::Microsoft.Stubs.Framework.IPartialStub
    {
        /// <summary>Initializes a new instance</summary>
        [global::System.Diagnostics.DebuggerHidden]
        protected SStrategyBamboo()
        {
            this.InitializeStub();
        }

        /// <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        public bool CallBase
        {
            [global::System.Diagnostics.DebuggerHidden]
            get
            {
                return this.callBase;
            }
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                this.callBase = value;
            }
        }

        /// <summary>Gets or sets the fallback behavior.</summary>
        public global::Microsoft.Stubs.Framework.IStubBehavior FallbackBehavior
        {
            [global::System.Diagnostics.DebuggerHidden]
            get
            {
                return global::Microsoft.Stubs.Framework.StubFallbackBehavior.GetValueOrCurrent
                    (this.defaultStub);
            }
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                this.defaultStub = value;
            }
        }

        /// <summary>Stub of method FinanceAnalyzer.StockCommand FinanceAnalyzer.Strategy.IFinanceStrategy.GetOper(System.DateTime day, FinanceAnalyzer.IAccount account)</summary>
        [global::System.Diagnostics.DebuggerHidden]
        public override global::FinanceAnalyzer.StockCommand GetOper(global::System.DateTime day, global::FinanceAnalyzer.IAccount account)
        {
            global::Microsoft.Stubs.Framework.StubDelegates
              .Func<global::System.DateTime, global::FinanceAnalyzer.IAccount, 
              global::FinanceAnalyzer.StockCommand> sh = this.GetOperDateTimeIAccount;
            if (sh != (global::Microsoft.Stubs.Framework
              .StubDelegates.Func<global::System.DateTime, 
              global::FinanceAnalyzer.IAccount, 
              global::FinanceAnalyzer.StockCommand>)null)
              return sh.Invoke(day, account);
            else 
            {
              global::Microsoft.Stubs.Framework.IStubBehavior stub = this.FallbackBehavior;
              return stub.Result<global::FinanceAnalyzer.Strategy.Stubs.SStrategyBamboo, 
              global::FinanceAnalyzer.StockCommand>(this);
            }
        }

        /// <summary>Stub of method FinanceAnalyzer.StockCommand FinanceAnalyzer.Strategy.IFinanceStrategy.GetOper(System.DateTime day, FinanceAnalyzer.IAccount account)</summary>
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<global::System.DateTime, global::FinanceAnalyzer.IAccount, global::FinanceAnalyzer.StockCommand> GetOperDateTimeIAccount;

        /// <summary>Stub of method System.Void FinanceAnalyzer.Strategy.IFinanceStrategy.HolderInit()</summary>
        [global::System.Diagnostics.DebuggerHidden]
        protected override void HolderInit()
        {
            global::Microsoft.Stubs.Framework.StubDelegates.Action sh
               = this.IFinanceStrategyHolderInit;
            if (sh != (global::Microsoft.Stubs.Framework.StubDelegates.Action)null)
              sh.Invoke();
            else 
            {
              if (this.callBase)
                base.HolderInit();
              else 
              {
                global::Microsoft.Stubs.Framework.IStubBehavior stub = this.FallbackBehavior
                  ;
                stub.VoidResult<global::FinanceAnalyzer.Strategy.Stubs.SStrategyBamboo>
                    (this);
              }
            }
        }

        /// <summary>Stub of method System.Void FinanceAnalyzer.Strategy.IFinanceStrategy.HolderInit()</summary>
        public global::Microsoft.Stubs.Framework.StubDelegates.Action IFinanceStrategyHolderInit;

        /// <summary>Initializes a new instance of type SStrategyBamboo</summary>
        [global::System.Diagnostics.DebuggerHidden]
        private void InitializeStub()
        {
        }

        /// <summary>Stub of property FinanceAnalyzer.Strategy.IFinanceStrategy.Name</summary>
        public override string Name
        {
            [global::System.Diagnostics.DebuggerHidden]
            get
            {
                global::Microsoft.Stubs.Framework.StubDelegates.Func<string> sh = this.NameGet;
                if (sh != (global::Microsoft.Stubs.Framework.StubDelegates.Func<string>)null)
                  return sh.Invoke();
                else 
                {
                  global::Microsoft.Stubs.Framework.IStubBehavior stub = this.FallbackBehavior;
                  return 
                    stub.Result<global::FinanceAnalyzer.Strategy.Stubs.SStrategyBamboo, string>
                        (this);
                }
            }
        }

        /// <summary>Stub of method System.String FinanceAnalyzer.Strategy.IFinanceStrategy.get_Name()</summary>
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<string> NameGet;

        private bool callBase;

        private global::Microsoft.Stubs.Framework.IStubBehavior defaultStub;
    }
}
namespace FinanceAnalyzer.Strategy.Stubs
{
    /// <summary>Stub of StrategyBear</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Stubs", "0.16.40915.5")]
    [global::System.Serializable]
    [global::System.Diagnostics.DebuggerDisplay("Stub = StrategyBear")]
    [global::System.Diagnostics.DebuggerStepThrough]
    public partial class SStrategyBear
      : global::FinanceAnalyzer.Strategy.StrategyBear
      , global::Microsoft.Stubs.Framework.IStub
      , global::Microsoft.Stubs.Framework.IPartialStub
    {
        /// <summary>Initializes a new instance</summary>
        [global::System.Diagnostics.DebuggerHidden]
        public SStrategyBear()
        {
            this.InitializeStub();
        }

        /// <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        public bool CallBase
        {
            [global::System.Diagnostics.DebuggerHidden]
            get
            {
                return this.callBase;
            }
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                this.callBase = value;
            }
        }

        /// <summary>Gets or sets the fallback behavior.</summary>
        public global::Microsoft.Stubs.Framework.IStubBehavior FallbackBehavior
        {
            [global::System.Diagnostics.DebuggerHidden]
            get
            {
                return global::Microsoft.Stubs.Framework.StubFallbackBehavior.GetValueOrCurrent
                    (this.defaultStub);
            }
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                this.defaultStub = value;
            }
        }

        /// <summary>Stub of method FinanceAnalyzer.StockCommand FinanceAnalyzer.Strategy.IFinanceStrategy.GetOper(System.DateTime day, FinanceAnalyzer.IAccount account)</summary>
        [global::System.Diagnostics.DebuggerHidden]
        public override global::FinanceAnalyzer.StockCommand GetOper(global::System.DateTime day, global::FinanceAnalyzer.IAccount account)
        {
            global::Microsoft.Stubs.Framework.StubDelegates
              .Func<global::System.DateTime, global::FinanceAnalyzer.IAccount, 
              global::FinanceAnalyzer.StockCommand> sh = this.GetOperDateTimeIAccount;
            if (sh != (global::Microsoft.Stubs.Framework
              .StubDelegates.Func<global::System.DateTime, 
              global::FinanceAnalyzer.IAccount, 
              global::FinanceAnalyzer.StockCommand>)null)
              return sh.Invoke(day, account);
            else 
            {
              global::Microsoft.Stubs.Framework.IStubBehavior stub = this.FallbackBehavior;
              return stub.Result<global::FinanceAnalyzer.Strategy.Stubs.SStrategyBear, 
              global::FinanceAnalyzer.StockCommand>(this);
            }
        }

        /// <summary>Stub of method FinanceAnalyzer.StockCommand FinanceAnalyzer.Strategy.IFinanceStrategy.GetOper(System.DateTime day, FinanceAnalyzer.IAccount account)</summary>
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<global::System.DateTime, global::FinanceAnalyzer.IAccount, global::FinanceAnalyzer.StockCommand> GetOperDateTimeIAccount;

        /// <summary>Stub of method System.Void FinanceAnalyzer.Strategy.IFinanceStrategy.HolderInit()</summary>
        [global::System.Diagnostics.DebuggerHidden]
        protected override void HolderInit()
        {
            global::Microsoft.Stubs.Framework.StubDelegates.Action sh
               = this.IFinanceStrategyHolderInit;
            if (sh != (global::Microsoft.Stubs.Framework.StubDelegates.Action)null)
              sh.Invoke();
            else 
            {
              if (this.callBase)
                base.HolderInit();
              else 
              {
                global::Microsoft.Stubs.Framework.IStubBehavior stub = this.FallbackBehavior
                  ;
                stub.VoidResult<global::FinanceAnalyzer.Strategy.Stubs.SStrategyBear>(this);
              }
            }
        }

        /// <summary>Stub of method System.Void FinanceAnalyzer.Strategy.IFinanceStrategy.HolderInit()</summary>
        public global::Microsoft.Stubs.Framework.StubDelegates.Action IFinanceStrategyHolderInit;

        /// <summary>Initializes a new instance of type SStrategyBear</summary>
        [global::System.Diagnostics.DebuggerHidden]
        private void InitializeStub()
        {
        }

        /// <summary>Stub of property FinanceAnalyzer.Strategy.IFinanceStrategy.Name</summary>
        public override string Name
        {
            [global::System.Diagnostics.DebuggerHidden]
            get
            {
                global::Microsoft.Stubs.Framework.StubDelegates.Func<string> sh = this.NameGet;
                if (sh != (global::Microsoft.Stubs.Framework.StubDelegates.Func<string>)null)
                  return sh.Invoke();
                else 
                {
                  global::Microsoft.Stubs.Framework.IStubBehavior stub = this.FallbackBehavior;
                  return 
                    stub.Result<global::FinanceAnalyzer.Strategy.Stubs.SStrategyBear, string>
                        (this);
                }
            }
        }

        /// <summary>Stub of method System.String FinanceAnalyzer.Strategy.IFinanceStrategy.get_Name()</summary>
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<string> NameGet;

        private bool callBase;

        private global::Microsoft.Stubs.Framework.IStubBehavior defaultStub;
    }
}
namespace FinanceAnalyzer.Strategy.Stubs
{
    /// <summary>Stub of StrategyFourday</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Stubs", "0.16.40915.5")]
    [global::System.Serializable]
    [global::System.Diagnostics.DebuggerDisplay("Stub = StrategyFourday")]
    [global::System.Diagnostics.DebuggerStepThrough]
    internal partial class SStrategyFourday
      : global::FinanceAnalyzer.Strategy.StrategyFourday
      , global::Microsoft.Stubs.Framework.IStub
      , global::Microsoft.Stubs.Framework.IPartialStub
    {
        /// <summary>Initializes a new instance</summary>
        [global::System.Diagnostics.DebuggerHidden]
        protected SStrategyFourday(global::FinanceAnalyzer.Strategy.Rise.IRiseJudger judger)
        : base(judger)
        {
            this.InitializeStub();
        }

        /// <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        public bool CallBase
        {
            [global::System.Diagnostics.DebuggerHidden]
            get
            {
                return this.callBase;
            }
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                this.callBase = value;
            }
        }

        /// <summary>Gets or sets the fallback behavior.</summary>
        public global::Microsoft.Stubs.Framework.IStubBehavior FallbackBehavior
        {
            [global::System.Diagnostics.DebuggerHidden]
            get
            {
                return global::Microsoft.Stubs.Framework.StubFallbackBehavior.GetValueOrCurrent
                    (this.defaultStub);
            }
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                this.defaultStub = value;
            }
        }

        /// <summary>Stub of method FinanceAnalyzer.StockCommand FinanceAnalyzer.Strategy.IFinanceStrategy.GetOper(System.DateTime day, FinanceAnalyzer.IAccount account)</summary>
        [global::System.Diagnostics.DebuggerHidden]
        public override global::FinanceAnalyzer.StockCommand GetOper(global::System.DateTime day, global::FinanceAnalyzer.IAccount account)
        {
            global::Microsoft.Stubs.Framework.StubDelegates
              .Func<global::System.DateTime, global::FinanceAnalyzer.IAccount, 
              global::FinanceAnalyzer.StockCommand> sh = this.GetOperDateTimeIAccount;
            if (sh != (global::Microsoft.Stubs.Framework
              .StubDelegates.Func<global::System.DateTime, 
              global::FinanceAnalyzer.IAccount, 
              global::FinanceAnalyzer.StockCommand>)null)
              return sh.Invoke(day, account);
            else 
            {
              global::Microsoft.Stubs.Framework.IStubBehavior stub = this.FallbackBehavior;
              return stub.Result<global::FinanceAnalyzer.Strategy.Stubs.SStrategyFourday, 
              global::FinanceAnalyzer.StockCommand>(this);
            }
        }

        /// <summary>Stub of method FinanceAnalyzer.StockCommand FinanceAnalyzer.Strategy.IFinanceStrategy.GetOper(System.DateTime day, FinanceAnalyzer.IAccount account)</summary>
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<global::System.DateTime, global::FinanceAnalyzer.IAccount, global::FinanceAnalyzer.StockCommand> GetOperDateTimeIAccount;

        /// <summary>Stub of method System.Void FinanceAnalyzer.Strategy.IFinanceStrategy.HolderInit()</summary>
        [global::System.Diagnostics.DebuggerHidden]
        protected override void HolderInit()
        {
            global::Microsoft.Stubs.Framework.StubDelegates.Action sh
               = this.IFinanceStrategyHolderInit;
            if (sh != (global::Microsoft.Stubs.Framework.StubDelegates.Action)null)
              sh.Invoke();
            else 
            {
              if (this.callBase)
                base.HolderInit();
              else 
              {
                global::Microsoft.Stubs.Framework.IStubBehavior stub = this.FallbackBehavior
                  ;
                stub.VoidResult<global::FinanceAnalyzer.Strategy.Stubs.SStrategyFourday>
                    (this);
              }
            }
        }

        /// <summary>Stub of method System.Void FinanceAnalyzer.Strategy.IFinanceStrategy.HolderInit()</summary>
        public global::Microsoft.Stubs.Framework.StubDelegates.Action IFinanceStrategyHolderInit;

        /// <summary>Initializes a new instance of type SStrategyFourday</summary>
        [global::System.Diagnostics.DebuggerHidden]
        private void InitializeStub()
        {
        }

        /// <summary>Stub of property FinanceAnalyzer.Strategy.IFinanceStrategy.Name</summary>
        public override string Name
        {
            [global::System.Diagnostics.DebuggerHidden]
            get
            {
                global::Microsoft.Stubs.Framework.StubDelegates.Func<string> sh = this.NameGet;
                if (sh != (global::Microsoft.Stubs.Framework.StubDelegates.Func<string>)null)
                  return sh.Invoke();
                else 
                {
                  global::Microsoft.Stubs.Framework.IStubBehavior stub = this.FallbackBehavior;
                  return 
                    stub.Result<global::FinanceAnalyzer.Strategy.Stubs.SStrategyFourday, string>
                        (this);
                }
            }
        }

        /// <summary>Stub of method System.String FinanceAnalyzer.Strategy.IFinanceStrategy.get_Name()</summary>
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<string> NameGet;

        private bool callBase;

        private global::Microsoft.Stubs.Framework.IStubBehavior defaultStub;
    }
}
namespace FinanceAnalyzer.Strategy.Stubs
{
    /// <summary>Stub of StrategyHold</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Stubs", "0.16.40915.5")]
    [global::System.Serializable]
    [global::System.Diagnostics.DebuggerDisplay("Stub = StrategyHold")]
    [global::System.Diagnostics.DebuggerStepThrough]
    internal partial class SStrategyHold
      : global::FinanceAnalyzer.Strategy.StrategyHold
      , global::Microsoft.Stubs.Framework.IStub
      , global::Microsoft.Stubs.Framework.IPartialStub
    {
        /// <summary>Initializes a new instance</summary>
        [global::System.Diagnostics.DebuggerHidden]
        protected SStrategyHold()
        {
            this.InitializeStub();
        }

        /// <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        public bool CallBase
        {
            [global::System.Diagnostics.DebuggerHidden]
            get
            {
                return this.callBase;
            }
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                this.callBase = value;
            }
        }

        /// <summary>Gets or sets the fallback behavior.</summary>
        public global::Microsoft.Stubs.Framework.IStubBehavior FallbackBehavior
        {
            [global::System.Diagnostics.DebuggerHidden]
            get
            {
                return global::Microsoft.Stubs.Framework.StubFallbackBehavior.GetValueOrCurrent
                    (this.defaultStub);
            }
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                this.defaultStub = value;
            }
        }

        /// <summary>Stub of method FinanceAnalyzer.StockCommand FinanceAnalyzer.Strategy.IFinanceStrategy.GetOper(System.DateTime day, FinanceAnalyzer.IAccount account)</summary>
        [global::System.Diagnostics.DebuggerHidden]
        public override global::FinanceAnalyzer.StockCommand GetOper(global::System.DateTime day, global::FinanceAnalyzer.IAccount account)
        {
            global::Microsoft.Stubs.Framework.StubDelegates
              .Func<global::System.DateTime, global::FinanceAnalyzer.IAccount, 
              global::FinanceAnalyzer.StockCommand> sh = this.GetOperDateTimeIAccount;
            if (sh != (global::Microsoft.Stubs.Framework
              .StubDelegates.Func<global::System.DateTime, 
              global::FinanceAnalyzer.IAccount, 
              global::FinanceAnalyzer.StockCommand>)null)
              return sh.Invoke(day, account);
            else 
            {
              global::Microsoft.Stubs.Framework.IStubBehavior stub = this.FallbackBehavior;
              return stub.Result<global::FinanceAnalyzer.Strategy.Stubs.SStrategyHold, 
              global::FinanceAnalyzer.StockCommand>(this);
            }
        }

        /// <summary>Stub of method FinanceAnalyzer.StockCommand FinanceAnalyzer.Strategy.IFinanceStrategy.GetOper(System.DateTime day, FinanceAnalyzer.IAccount account)</summary>
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<global::System.DateTime, global::FinanceAnalyzer.IAccount, global::FinanceAnalyzer.StockCommand> GetOperDateTimeIAccount;

        /// <summary>Stub of method System.Void FinanceAnalyzer.Strategy.IFinanceStrategy.HolderInit()</summary>
        [global::System.Diagnostics.DebuggerHidden]
        protected override void HolderInit()
        {
            global::Microsoft.Stubs.Framework.StubDelegates.Action sh
               = this.IFinanceStrategyHolderInit;
            if (sh != (global::Microsoft.Stubs.Framework.StubDelegates.Action)null)
              sh.Invoke();
            else 
            {
              if (this.callBase)
                base.HolderInit();
              else 
              {
                global::Microsoft.Stubs.Framework.IStubBehavior stub = this.FallbackBehavior
                  ;
                stub.VoidResult<global::FinanceAnalyzer.Strategy.Stubs.SStrategyHold>(this);
              }
            }
        }

        /// <summary>Stub of method System.Void FinanceAnalyzer.Strategy.IFinanceStrategy.HolderInit()</summary>
        public global::Microsoft.Stubs.Framework.StubDelegates.Action IFinanceStrategyHolderInit;

        /// <summary>Initializes a new instance of type SStrategyHold</summary>
        [global::System.Diagnostics.DebuggerHidden]
        private void InitializeStub()
        {
        }

        /// <summary>Stub of property FinanceAnalyzer.Strategy.IFinanceStrategy.Name</summary>
        public override string Name
        {
            [global::System.Diagnostics.DebuggerHidden]
            get
            {
                global::Microsoft.Stubs.Framework.StubDelegates.Func<string> sh = this.NameGet;
                if (sh != (global::Microsoft.Stubs.Framework.StubDelegates.Func<string>)null)
                  return sh.Invoke();
                else 
                {
                  global::Microsoft.Stubs.Framework.IStubBehavior stub = this.FallbackBehavior;
                  return 
                    stub.Result<global::FinanceAnalyzer.Strategy.Stubs.SStrategyHold, string>
                        (this);
                }
            }
        }

        /// <summary>Stub of method System.String FinanceAnalyzer.Strategy.IFinanceStrategy.get_Name()</summary>
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<string> NameGet;

        private bool callBase;

        private global::Microsoft.Stubs.Framework.IStubBehavior defaultStub;
    }
}
namespace FinanceAnalyzer.Strategy.Stubs
{
    /// <summary>Stub of StrategyKd</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Stubs", "0.16.40915.5")]
    [global::System.Serializable]
    [global::System.Diagnostics.DebuggerDisplay("Stub = StrategyKd")]
    [global::System.Diagnostics.DebuggerStepThrough]
    public partial class SStrategyKd
      : global::FinanceAnalyzer.Strategy.StrategyKd
      , global::Microsoft.Stubs.Framework.IStub
      , global::Microsoft.Stubs.Framework.IPartialStub
    {
        /// <summary>Initializes a new instance</summary>
        [global::System.Diagnostics.DebuggerHidden]
        public SStrategyKd()
        {
            this.InitializeStub();
        }

        /// <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        public bool CallBase
        {
            [global::System.Diagnostics.DebuggerHidden]
            get
            {
                return this.callBase;
            }
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                this.callBase = value;
            }
        }

        /// <summary>Gets or sets the fallback behavior.</summary>
        public global::Microsoft.Stubs.Framework.IStubBehavior FallbackBehavior
        {
            [global::System.Diagnostics.DebuggerHidden]
            get
            {
                return global::Microsoft.Stubs.Framework.StubFallbackBehavior.GetValueOrCurrent
                    (this.defaultStub);
            }
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                this.defaultStub = value;
            }
        }

        /// <summary>Stub of method FinanceAnalyzer.StockCommand FinanceAnalyzer.Strategy.IFinanceStrategy.GetOper(System.DateTime day, FinanceAnalyzer.IAccount account)</summary>
        [global::System.Diagnostics.DebuggerHidden]
        public override global::FinanceAnalyzer.StockCommand GetOper(global::System.DateTime day, global::FinanceAnalyzer.IAccount account)
        {
            global::Microsoft.Stubs.Framework.StubDelegates
              .Func<global::System.DateTime, global::FinanceAnalyzer.IAccount, 
              global::FinanceAnalyzer.StockCommand> sh = this.GetOperDateTimeIAccount;
            if (sh != (global::Microsoft.Stubs.Framework
              .StubDelegates.Func<global::System.DateTime, 
              global::FinanceAnalyzer.IAccount, 
              global::FinanceAnalyzer.StockCommand>)null)
              return sh.Invoke(day, account);
            else 
            {
              global::Microsoft.Stubs.Framework.IStubBehavior stub = this.FallbackBehavior;
              return stub.Result<global::FinanceAnalyzer.Strategy.Stubs.SStrategyKd, 
              global::FinanceAnalyzer.StockCommand>(this);
            }
        }

        /// <summary>Stub of method FinanceAnalyzer.StockCommand FinanceAnalyzer.Strategy.IFinanceStrategy.GetOper(System.DateTime day, FinanceAnalyzer.IAccount account)</summary>
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<global::System.DateTime, global::FinanceAnalyzer.IAccount, global::FinanceAnalyzer.StockCommand> GetOperDateTimeIAccount;

        /// <summary>Stub of method System.Void FinanceAnalyzer.Strategy.IFinanceStrategy.HolderInit()</summary>
        [global::System.Diagnostics.DebuggerHidden]
        protected override void HolderInit()
        {
            global::Microsoft.Stubs.Framework.StubDelegates.Action sh
               = this.IFinanceStrategyHolderInit;
            if (sh != (global::Microsoft.Stubs.Framework.StubDelegates.Action)null)
              sh.Invoke();
            else 
            {
              if (this.callBase)
                base.HolderInit();
              else 
              {
                global::Microsoft.Stubs.Framework.IStubBehavior stub = this.FallbackBehavior
                  ;
                stub.VoidResult<global::FinanceAnalyzer.Strategy.Stubs.SStrategyKd>(this);
              }
            }
        }

        /// <summary>Stub of method System.Void FinanceAnalyzer.Strategy.IFinanceStrategy.HolderInit()</summary>
        public global::Microsoft.Stubs.Framework.StubDelegates.Action IFinanceStrategyHolderInit;

        /// <summary>Initializes a new instance of type SStrategyKd</summary>
        [global::System.Diagnostics.DebuggerHidden]
        private void InitializeStub()
        {
        }

        /// <summary>Stub of property FinanceAnalyzer.Strategy.IFinanceStrategy.Name</summary>
        public override string Name
        {
            [global::System.Diagnostics.DebuggerHidden]
            get
            {
                global::Microsoft.Stubs.Framework.StubDelegates.Func<string> sh = this.NameGet;
                if (sh != (global::Microsoft.Stubs.Framework.StubDelegates.Func<string>)null)
                  return sh.Invoke();
                else 
                {
                  global::Microsoft.Stubs.Framework.IStubBehavior stub = this.FallbackBehavior;
                  return stub.Result<global::FinanceAnalyzer.Strategy.Stubs.SStrategyKd, string>
                      (this);
                }
            }
        }

        /// <summary>Stub of method System.String FinanceAnalyzer.Strategy.IFinanceStrategy.get_Name()</summary>
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<string> NameGet;

        private bool callBase;

        private global::Microsoft.Stubs.Framework.IStubBehavior defaultStub;
    }
}
namespace FinanceAnalyzer.Strategy.Stubs
{
    /// <summary>Stub of StrategyMinMax</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Stubs", "0.16.40915.5")]
    [global::System.Serializable]
    [global::System.Diagnostics.DebuggerDisplay("Stub = StrategyMinMax")]
    [global::System.Diagnostics.DebuggerStepThrough]
    public partial class SStrategyMinMax
      : global::FinanceAnalyzer.Strategy.StrategyMinMax
      , global::Microsoft.Stubs.Framework.IStub
      , global::Microsoft.Stubs.Framework.IPartialStub
    {
        /// <summary>Initializes a new instance</summary>
        [global::System.Diagnostics.DebuggerHidden]
        public SStrategyMinMax()
        {
            this.InitializeStub();
        }

        /// <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        public bool CallBase
        {
            [global::System.Diagnostics.DebuggerHidden]
            get
            {
                return this.callBase;
            }
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                this.callBase = value;
            }
        }

        /// <summary>Gets or sets the fallback behavior.</summary>
        public global::Microsoft.Stubs.Framework.IStubBehavior FallbackBehavior
        {
            [global::System.Diagnostics.DebuggerHidden]
            get
            {
                return global::Microsoft.Stubs.Framework.StubFallbackBehavior.GetValueOrCurrent
                    (this.defaultStub);
            }
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                this.defaultStub = value;
            }
        }

        /// <summary>Stub of method FinanceAnalyzer.StockCommand FinanceAnalyzer.Strategy.IFinanceStrategy.GetOper(System.DateTime day, FinanceAnalyzer.IAccount account)</summary>
        [global::System.Diagnostics.DebuggerHidden]
        public override global::FinanceAnalyzer.StockCommand GetOper(global::System.DateTime day, global::FinanceAnalyzer.IAccount account)
        {
            global::Microsoft.Stubs.Framework.StubDelegates
              .Func<global::System.DateTime, global::FinanceAnalyzer.IAccount, 
              global::FinanceAnalyzer.StockCommand> sh = this.GetOperDateTimeIAccount;
            if (sh != (global::Microsoft.Stubs.Framework
              .StubDelegates.Func<global::System.DateTime, 
              global::FinanceAnalyzer.IAccount, 
              global::FinanceAnalyzer.StockCommand>)null)
              return sh.Invoke(day, account);
            else 
            {
              global::Microsoft.Stubs.Framework.IStubBehavior stub = this.FallbackBehavior;
              return stub.Result<global::FinanceAnalyzer.Strategy.Stubs.SStrategyMinMax, 
              global::FinanceAnalyzer.StockCommand>(this);
            }
        }

        /// <summary>Stub of method FinanceAnalyzer.StockCommand FinanceAnalyzer.Strategy.IFinanceStrategy.GetOper(System.DateTime day, FinanceAnalyzer.IAccount account)</summary>
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<global::System.DateTime, global::FinanceAnalyzer.IAccount, global::FinanceAnalyzer.StockCommand> GetOperDateTimeIAccount;

        /// <summary>Stub of method System.Void FinanceAnalyzer.Strategy.IFinanceStrategy.HolderInit()</summary>
        [global::System.Diagnostics.DebuggerHidden]
        protected override void HolderInit()
        {
            global::Microsoft.Stubs.Framework.StubDelegates.Action sh
               = this.IFinanceStrategyHolderInit;
            if (sh != (global::Microsoft.Stubs.Framework.StubDelegates.Action)null)
              sh.Invoke();
            else 
            {
              if (this.callBase)
                base.HolderInit();
              else 
              {
                global::Microsoft.Stubs.Framework.IStubBehavior stub = this.FallbackBehavior
                  ;
                stub.VoidResult<global::FinanceAnalyzer.Strategy.Stubs.SStrategyMinMax>
                    (this);
              }
            }
        }

        /// <summary>Stub of method System.Void FinanceAnalyzer.Strategy.IFinanceStrategy.HolderInit()</summary>
        public global::Microsoft.Stubs.Framework.StubDelegates.Action IFinanceStrategyHolderInit;

        /// <summary>Initializes a new instance of type SStrategyMinMax</summary>
        [global::System.Diagnostics.DebuggerHidden]
        private void InitializeStub()
        {
        }

        /// <summary>Stub of property FinanceAnalyzer.Strategy.IFinanceStrategy.Name</summary>
        public override string Name
        {
            [global::System.Diagnostics.DebuggerHidden]
            get
            {
                global::Microsoft.Stubs.Framework.StubDelegates.Func<string> sh = this.NameGet;
                if (sh != (global::Microsoft.Stubs.Framework.StubDelegates.Func<string>)null)
                  return sh.Invoke();
                else 
                {
                  global::Microsoft.Stubs.Framework.IStubBehavior stub = this.FallbackBehavior;
                  return 
                    stub.Result<global::FinanceAnalyzer.Strategy.Stubs.SStrategyMinMax, string>
                        (this);
                }
            }
        }

        /// <summary>Stub of method System.String FinanceAnalyzer.Strategy.IFinanceStrategy.get_Name()</summary>
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<string> NameGet;

        private bool callBase;

        private global::Microsoft.Stubs.Framework.IStubBehavior defaultStub;
    }
}
namespace FinanceAnalyzer.Strategy.Stubs
{
    /// <summary>Stub of StrategyPercent</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Stubs", "0.16.40915.5")]
    [global::System.Serializable]
    [global::System.Diagnostics.DebuggerDisplay("Stub = StrategyPercent")]
    [global::System.Diagnostics.DebuggerStepThrough]
    public partial class SStrategyPercent
      : global::FinanceAnalyzer.Strategy.StrategyPercent
      , global::Microsoft.Stubs.Framework.IStub
      , global::Microsoft.Stubs.Framework.IPartialStub
    {
        /// <summary>Initializes a new instance</summary>
        [global::System.Diagnostics.DebuggerHidden]
        public SStrategyPercent()
        {
            this.InitializeStub();
        }

        /// <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        public bool CallBase
        {
            [global::System.Diagnostics.DebuggerHidden]
            get
            {
                return this.callBase;
            }
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                this.callBase = value;
            }
        }

        /// <summary>Gets or sets the fallback behavior.</summary>
        public global::Microsoft.Stubs.Framework.IStubBehavior FallbackBehavior
        {
            [global::System.Diagnostics.DebuggerHidden]
            get
            {
                return global::Microsoft.Stubs.Framework.StubFallbackBehavior.GetValueOrCurrent
                    (this.defaultStub);
            }
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                this.defaultStub = value;
            }
        }

        /// <summary>Stub of method FinanceAnalyzer.StockCommand FinanceAnalyzer.Strategy.IFinanceStrategy.GetOper(System.DateTime day, FinanceAnalyzer.IAccount account)</summary>
        [global::System.Diagnostics.DebuggerHidden]
        public override global::FinanceAnalyzer.StockCommand GetOper(global::System.DateTime day, global::FinanceAnalyzer.IAccount account)
        {
            global::Microsoft.Stubs.Framework.StubDelegates
              .Func<global::System.DateTime, global::FinanceAnalyzer.IAccount, 
              global::FinanceAnalyzer.StockCommand> sh = this.GetOperDateTimeIAccount;
            if (sh != (global::Microsoft.Stubs.Framework
              .StubDelegates.Func<global::System.DateTime, 
              global::FinanceAnalyzer.IAccount, 
              global::FinanceAnalyzer.StockCommand>)null)
              return sh.Invoke(day, account);
            else 
            {
              global::Microsoft.Stubs.Framework.IStubBehavior stub = this.FallbackBehavior;
              return stub.Result<global::FinanceAnalyzer.Strategy.Stubs.SStrategyPercent, 
              global::FinanceAnalyzer.StockCommand>(this);
            }
        }

        /// <summary>Stub of method FinanceAnalyzer.StockCommand FinanceAnalyzer.Strategy.IFinanceStrategy.GetOper(System.DateTime day, FinanceAnalyzer.IAccount account)</summary>
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<global::System.DateTime, global::FinanceAnalyzer.IAccount, global::FinanceAnalyzer.StockCommand> GetOperDateTimeIAccount;

        /// <summary>Stub of method System.Void FinanceAnalyzer.Strategy.IFinanceStrategy.HolderInit()</summary>
        [global::System.Diagnostics.DebuggerHidden]
        protected override void HolderInit()
        {
            global::Microsoft.Stubs.Framework.StubDelegates.Action sh
               = this.IFinanceStrategyHolderInit;
            if (sh != (global::Microsoft.Stubs.Framework.StubDelegates.Action)null)
              sh.Invoke();
            else 
            {
              if (this.callBase)
                base.HolderInit();
              else 
              {
                global::Microsoft.Stubs.Framework.IStubBehavior stub = this.FallbackBehavior
                  ;
                stub.VoidResult<global::FinanceAnalyzer.Strategy.Stubs.SStrategyPercent>
                    (this);
              }
            }
        }

        /// <summary>Stub of method System.Void FinanceAnalyzer.Strategy.IFinanceStrategy.HolderInit()</summary>
        public global::Microsoft.Stubs.Framework.StubDelegates.Action IFinanceStrategyHolderInit;

        /// <summary>Initializes a new instance of type SStrategyPercent</summary>
        [global::System.Diagnostics.DebuggerHidden]
        private void InitializeStub()
        {
        }

        /// <summary>Stub of property FinanceAnalyzer.Strategy.IFinanceStrategy.Name</summary>
        public override string Name
        {
            [global::System.Diagnostics.DebuggerHidden]
            get
            {
                global::Microsoft.Stubs.Framework.StubDelegates.Func<string> sh = this.NameGet;
                if (sh != (global::Microsoft.Stubs.Framework.StubDelegates.Func<string>)null)
                  return sh.Invoke();
                else 
                {
                  global::Microsoft.Stubs.Framework.IStubBehavior stub = this.FallbackBehavior;
                  return 
                    stub.Result<global::FinanceAnalyzer.Strategy.Stubs.SStrategyPercent, string>
                        (this);
                }
            }
        }

        /// <summary>Stub of method System.String FinanceAnalyzer.Strategy.IFinanceStrategy.get_Name()</summary>
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<string> NameGet;

        private bool callBase;

        private global::Microsoft.Stubs.Framework.IStubBehavior defaultStub;
    }
}
namespace FinanceAnalyzer.Stubs
{
    /// <summary>Stub of StrategyResults</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Stubs", "0.16.40915.5")]
    [global::System.Serializable]
    [global::System.Diagnostics.DebuggerDisplay("Stub = StrategyResults")]
    [global::System.Diagnostics.DebuggerStepThrough]
    public partial class SStrategyResults
      : global::FinanceAnalyzer.StrategyResults
      , global::Microsoft.Stubs.Framework.IStub
      , global::Microsoft.Stubs.Framework.IPartialStub
    {
        /// <summary>Initializes a new instance</summary>
        [global::System.Diagnostics.DebuggerHidden]
        public SStrategyResults()
        {
            this.InitializeStub();
        }

        /// <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        public bool CallBase
        {
            [global::System.Diagnostics.DebuggerHidden]
            get
            {
                return this.callBase;
            }
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                this.callBase = value;
            }
        }

        /// <summary>Gets or sets the fallback behavior.</summary>
        public global::Microsoft.Stubs.Framework.IStubBehavior FallbackBehavior
        {
            [global::System.Diagnostics.DebuggerHidden]
            get
            {
                return global::Microsoft.Stubs.Framework.StubFallbackBehavior.GetValueOrCurrent
                    (this.defaultStub);
            }
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                this.defaultStub = value;
            }
        }

        /// <summary>Initializes a new instance of type SStrategyResults</summary>
        [global::System.Diagnostics.DebuggerHidden]
        private void InitializeStub()
        {
        }

        private bool callBase;

        private global::Microsoft.Stubs.Framework.IStubBehavior defaultStub;
    }
}
namespace FinanceAnalyzer.Strategy.Stubs
{
    /// <summary>Stub of StrategyThreeDay</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Stubs", "0.16.40915.5")]
    [global::System.Serializable]
    [global::System.Diagnostics.DebuggerDisplay("Stub = StrategyThreeDay")]
    [global::System.Diagnostics.DebuggerStepThrough]
    public partial class SStrategyThreeDay
      : global::FinanceAnalyzer.Strategy.StrategyThreeDay
      , global::Microsoft.Stubs.Framework.IStub
      , global::Microsoft.Stubs.Framework.IPartialStub
    {
        /// <summary>Initializes a new instance</summary>
        [global::System.Diagnostics.DebuggerHidden]
        public SStrategyThreeDay(global::FinanceAnalyzer.Strategy.Rise.IRiseJudger judger)
        : base(judger)
        {
            this.InitializeStub();
        }

        /// <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        public bool CallBase
        {
            [global::System.Diagnostics.DebuggerHidden]
            get
            {
                return this.callBase;
            }
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                this.callBase = value;
            }
        }

        /// <summary>Gets or sets the fallback behavior.</summary>
        public global::Microsoft.Stubs.Framework.IStubBehavior FallbackBehavior
        {
            [global::System.Diagnostics.DebuggerHidden]
            get
            {
                return global::Microsoft.Stubs.Framework.StubFallbackBehavior.GetValueOrCurrent
                    (this.defaultStub);
            }
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                this.defaultStub = value;
            }
        }

        /// <summary>Stub of method FinanceAnalyzer.StockCommand FinanceAnalyzer.Strategy.IFinanceStrategy.GetOper(System.DateTime day, FinanceAnalyzer.IAccount account)</summary>
        [global::System.Diagnostics.DebuggerHidden]
        public override global::FinanceAnalyzer.StockCommand GetOper(global::System.DateTime day, global::FinanceAnalyzer.IAccount account)
        {
            global::Microsoft.Stubs.Framework.StubDelegates
              .Func<global::System.DateTime, global::FinanceAnalyzer.IAccount, 
              global::FinanceAnalyzer.StockCommand> sh = this.GetOperDateTimeIAccount;
            if (sh != (global::Microsoft.Stubs.Framework
              .StubDelegates.Func<global::System.DateTime, 
              global::FinanceAnalyzer.IAccount, 
              global::FinanceAnalyzer.StockCommand>)null)
              return sh.Invoke(day, account);
            else 
            {
              global::Microsoft.Stubs.Framework.IStubBehavior stub = this.FallbackBehavior;
              return stub.Result<global::FinanceAnalyzer.Strategy.Stubs.SStrategyThreeDay, 
              global::FinanceAnalyzer.StockCommand>(this);
            }
        }

        /// <summary>Stub of method FinanceAnalyzer.StockCommand FinanceAnalyzer.Strategy.IFinanceStrategy.GetOper(System.DateTime day, FinanceAnalyzer.IAccount account)</summary>
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<global::System.DateTime, global::FinanceAnalyzer.IAccount, global::FinanceAnalyzer.StockCommand> GetOperDateTimeIAccount;

        /// <summary>Stub of method System.Void FinanceAnalyzer.Strategy.IFinanceStrategy.HolderInit()</summary>
        [global::System.Diagnostics.DebuggerHidden]
        protected override void HolderInit()
        {
            global::Microsoft.Stubs.Framework.StubDelegates.Action sh
               = this.IFinanceStrategyHolderInit;
            if (sh != (global::Microsoft.Stubs.Framework.StubDelegates.Action)null)
              sh.Invoke();
            else 
            {
              if (this.callBase)
                base.HolderInit();
              else 
              {
                global::Microsoft.Stubs.Framework.IStubBehavior stub = this.FallbackBehavior
                  ;
                stub.VoidResult<global::FinanceAnalyzer.Strategy.Stubs.SStrategyThreeDay>
                    (this);
              }
            }
        }

        /// <summary>Stub of method System.Void FinanceAnalyzer.Strategy.IFinanceStrategy.HolderInit()</summary>
        public global::Microsoft.Stubs.Framework.StubDelegates.Action IFinanceStrategyHolderInit;

        /// <summary>Initializes a new instance of type SStrategyThreeDay</summary>
        [global::System.Diagnostics.DebuggerHidden]
        private void InitializeStub()
        {
        }

        /// <summary>Stub of property FinanceAnalyzer.Strategy.IFinanceStrategy.Name</summary>
        public override string Name
        {
            [global::System.Diagnostics.DebuggerHidden]
            get
            {
                global::Microsoft.Stubs.Framework.StubDelegates.Func<string> sh = this.NameGet;
                if (sh != (global::Microsoft.Stubs.Framework.StubDelegates.Func<string>)null)
                  return sh.Invoke();
                else 
                {
                  global::Microsoft.Stubs.Framework.IStubBehavior stub = this.FallbackBehavior;
                  return stub
                    .Result<global::FinanceAnalyzer.Strategy.Stubs.SStrategyThreeDay, string>
                      (this);
                }
            }
        }

        /// <summary>Stub of method System.String FinanceAnalyzer.Strategy.IFinanceStrategy.get_Name()</summary>
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<string> NameGet;

        private bool callBase;

        private global::Microsoft.Stubs.Framework.IStubBehavior defaultStub;
    }
}
namespace FinanceAnalyzer.Strategy.Stubs
{
    /// <summary>Stub of StrategyThreeDayReverse</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Stubs", "0.16.40915.5")]
    [global::System.Serializable]
    [global::System.Diagnostics.DebuggerDisplay("Stub = StrategyThreeDayReverse")]
    [global::System.Diagnostics.DebuggerStepThrough]
    internal partial class SStrategyThreeDayReverse
      : global::FinanceAnalyzer.Strategy.StrategyThreeDayReverse
      , global::Microsoft.Stubs.Framework.IStub
      , global::Microsoft.Stubs.Framework.IPartialStub
    {
        /// <summary>Initializes a new instance</summary>
        [global::System.Diagnostics.DebuggerHidden]
        protected SStrategyThreeDayReverse(global::FinanceAnalyzer.Strategy.Rise.IRiseJudger judger)
        : base(judger)
        {
            this.InitializeStub();
        }

        /// <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        public bool CallBase
        {
            [global::System.Diagnostics.DebuggerHidden]
            get
            {
                return this.callBase;
            }
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                this.callBase = value;
            }
        }

        /// <summary>Gets or sets the fallback behavior.</summary>
        public global::Microsoft.Stubs.Framework.IStubBehavior FallbackBehavior
        {
            [global::System.Diagnostics.DebuggerHidden]
            get
            {
                return global::Microsoft.Stubs.Framework.StubFallbackBehavior.GetValueOrCurrent
                    (this.defaultStub);
            }
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                this.defaultStub = value;
            }
        }

        /// <summary>Stub of method FinanceAnalyzer.StockCommand FinanceAnalyzer.Strategy.IFinanceStrategy.GetOper(System.DateTime day, FinanceAnalyzer.IAccount account)</summary>
        [global::System.Diagnostics.DebuggerHidden]
        public override global::FinanceAnalyzer.StockCommand GetOper(global::System.DateTime day, global::FinanceAnalyzer.IAccount account)
        {
            global::Microsoft.Stubs.Framework.StubDelegates
              .Func<global::System.DateTime, global::FinanceAnalyzer.IAccount, 
              global::FinanceAnalyzer.StockCommand> sh = this.GetOperDateTimeIAccount;
            if (sh != (global::Microsoft.Stubs.Framework
              .StubDelegates.Func<global::System.DateTime, 
              global::FinanceAnalyzer.IAccount, 
              global::FinanceAnalyzer.StockCommand>)null)
              return sh.Invoke(day, account);
            else 
            {
              global::Microsoft.Stubs.Framework.IStubBehavior stub = this.FallbackBehavior;
              return stub
                .Result<global::FinanceAnalyzer.Strategy.Stubs.SStrategyThreeDayReverse, 
                global::FinanceAnalyzer.StockCommand>(this);
            }
        }

        /// <summary>Stub of method FinanceAnalyzer.StockCommand FinanceAnalyzer.Strategy.IFinanceStrategy.GetOper(System.DateTime day, FinanceAnalyzer.IAccount account)</summary>
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<global::System.DateTime, global::FinanceAnalyzer.IAccount, global::FinanceAnalyzer.StockCommand> GetOperDateTimeIAccount;

        /// <summary>Stub of method System.Void FinanceAnalyzer.Strategy.IFinanceStrategy.HolderInit()</summary>
        [global::System.Diagnostics.DebuggerHidden]
        protected override void HolderInit()
        {
            global::Microsoft.Stubs.Framework.StubDelegates.Action sh
               = this.IFinanceStrategyHolderInit;
            if (sh != (global::Microsoft.Stubs.Framework.StubDelegates.Action)null)
              sh.Invoke();
            else 
            {
              if (this.callBase)
                base.HolderInit();
              else 
              {
                global::Microsoft.Stubs.Framework.IStubBehavior stub = this.FallbackBehavior
                  ;
                stub.VoidResult
                    <global::FinanceAnalyzer.Strategy.Stubs.SStrategyThreeDayReverse>(this);
              }
            }
        }

        /// <summary>Stub of method System.Void FinanceAnalyzer.Strategy.IFinanceStrategy.HolderInit()</summary>
        public global::Microsoft.Stubs.Framework.StubDelegates.Action IFinanceStrategyHolderInit;

        /// <summary>Initializes a new instance of type SStrategyThreeDayReverse</summary>
        [global::System.Diagnostics.DebuggerHidden]
        private void InitializeStub()
        {
        }

        /// <summary>Stub of property FinanceAnalyzer.Strategy.IFinanceStrategy.Name</summary>
        public override string Name
        {
            [global::System.Diagnostics.DebuggerHidden]
            get
            {
                global::Microsoft.Stubs.Framework.StubDelegates.Func<string> sh = this.NameGet;
                if (sh != (global::Microsoft.Stubs.Framework.StubDelegates.Func<string>)null)
                  return sh.Invoke();
                else 
                {
                  global::Microsoft.Stubs.Framework.IStubBehavior stub = this.FallbackBehavior;
                  return stub
                    .Result<global::FinanceAnalyzer.Strategy.Stubs.SStrategyThreeDayReverse, 
                    string>(this);
                }
            }
        }

        /// <summary>Stub of method System.String FinanceAnalyzer.Strategy.IFinanceStrategy.get_Name()</summary>
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<string> NameGet;

        private bool callBase;

        private global::Microsoft.Stubs.Framework.IStubBehavior defaultStub;
    }
}
namespace FinanceAnalyzer.Strategy.Stubs
{
    /// <summary>Stub of StrategyThreedayOpti</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Stubs", "0.16.40915.5")]
    [global::System.Serializable]
    [global::System.Diagnostics.DebuggerDisplay("Stub = StrategyThreedayOpti")]
    [global::System.Diagnostics.DebuggerStepThrough]
    internal partial class SStrategyThreedayOpti
      : global::FinanceAnalyzer.Strategy.StrategyThreedayOpti
      , global::Microsoft.Stubs.Framework.IStub
      , global::Microsoft.Stubs.Framework.IPartialStub
    {
        /// <summary>Initializes a new instance</summary>
        [global::System.Diagnostics.DebuggerHidden]
        protected SStrategyThreedayOpti(global::FinanceAnalyzer.Strategy.Rise.IRiseJudger judger)
        : base(judger)
        {
            this.InitializeStub();
        }

        /// <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        public bool CallBase
        {
            [global::System.Diagnostics.DebuggerHidden]
            get
            {
                return this.callBase;
            }
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                this.callBase = value;
            }
        }

        /// <summary>Gets or sets the fallback behavior.</summary>
        public global::Microsoft.Stubs.Framework.IStubBehavior FallbackBehavior
        {
            [global::System.Diagnostics.DebuggerHidden]
            get
            {
                return global::Microsoft.Stubs.Framework.StubFallbackBehavior.GetValueOrCurrent
                    (this.defaultStub);
            }
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                this.defaultStub = value;
            }
        }

        /// <summary>Stub of method FinanceAnalyzer.StockCommand FinanceAnalyzer.Strategy.IFinanceStrategy.GetOper(System.DateTime day, FinanceAnalyzer.IAccount account)</summary>
        [global::System.Diagnostics.DebuggerHidden]
        public override global::FinanceAnalyzer.StockCommand GetOper(global::System.DateTime day, global::FinanceAnalyzer.IAccount account)
        {
            global::Microsoft.Stubs.Framework.StubDelegates
              .Func<global::System.DateTime, global::FinanceAnalyzer.IAccount, 
              global::FinanceAnalyzer.StockCommand> sh = this.GetOperDateTimeIAccount;
            if (sh != (global::Microsoft.Stubs.Framework
              .StubDelegates.Func<global::System.DateTime, 
              global::FinanceAnalyzer.IAccount, 
              global::FinanceAnalyzer.StockCommand>)null)
              return sh.Invoke(day, account);
            else 
            {
              global::Microsoft.Stubs.Framework.IStubBehavior stub = this.FallbackBehavior;
              return 
                stub.Result<global::FinanceAnalyzer.Strategy.Stubs.SStrategyThreedayOpti, 
                global::FinanceAnalyzer.StockCommand>(this);
            }
        }

        /// <summary>Stub of method FinanceAnalyzer.StockCommand FinanceAnalyzer.Strategy.IFinanceStrategy.GetOper(System.DateTime day, FinanceAnalyzer.IAccount account)</summary>
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<global::System.DateTime, global::FinanceAnalyzer.IAccount, global::FinanceAnalyzer.StockCommand> GetOperDateTimeIAccount;

        /// <summary>Stub of method System.Void FinanceAnalyzer.Strategy.IFinanceStrategy.HolderInit()</summary>
        [global::System.Diagnostics.DebuggerHidden]
        protected override void HolderInit()
        {
            global::Microsoft.Stubs.Framework.StubDelegates.Action sh
               = this.IFinanceStrategyHolderInit;
            if (sh != (global::Microsoft.Stubs.Framework.StubDelegates.Action)null)
              sh.Invoke();
            else 
            {
              if (this.callBase)
                base.HolderInit();
              else 
              {
                global::Microsoft.Stubs.Framework.IStubBehavior stub = this.FallbackBehavior
                  ;
                stub
                  .VoidResult<global::FinanceAnalyzer.Strategy.Stubs.SStrategyThreedayOpti>
                    (this);
              }
            }
        }

        /// <summary>Stub of method System.Void FinanceAnalyzer.Strategy.IFinanceStrategy.HolderInit()</summary>
        public global::Microsoft.Stubs.Framework.StubDelegates.Action IFinanceStrategyHolderInit;

        /// <summary>Initializes a new instance of type SStrategyThreedayOpti</summary>
        [global::System.Diagnostics.DebuggerHidden]
        private void InitializeStub()
        {
        }

        /// <summary>Stub of property FinanceAnalyzer.Strategy.IFinanceStrategy.Name</summary>
        public override string Name
        {
            [global::System.Diagnostics.DebuggerHidden]
            get
            {
                global::Microsoft.Stubs.Framework.StubDelegates.Func<string> sh = this.NameGet;
                if (sh != (global::Microsoft.Stubs.Framework.StubDelegates.Func<string>)null)
                  return sh.Invoke();
                else 
                {
                  global::Microsoft.Stubs.Framework.IStubBehavior stub = this.FallbackBehavior;
                  return 
                    stub.Result<global::FinanceAnalyzer.Strategy.Stubs.SStrategyThreedayOpti, 
                    string>(this);
                }
            }
        }

        /// <summary>Stub of method System.String FinanceAnalyzer.Strategy.IFinanceStrategy.get_Name()</summary>
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<string> NameGet;

        private bool callBase;

        private global::Microsoft.Stubs.Framework.IStubBehavior defaultStub;
    }
}
namespace FinanceAnalyzer.Stubs
{
    /// <summary>Stub of Transaction</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Stubs", "0.16.40915.5")]
    [global::System.Serializable]
    [global::System.Diagnostics.DebuggerDisplay("Stub = Transaction")]
    [global::System.Diagnostics.DebuggerStepThrough]
    public partial class STransaction
      : global::FinanceAnalyzer.Transaction
      , global::Microsoft.Stubs.Framework.IStub
      , global::Microsoft.Stubs.Framework.IPartialStub
    {
        /// <summary>Initializes a new instance</summary>
        [global::System.Diagnostics.DebuggerHidden]
        public STransaction()
        {
            this.InitializeStub();
        }

        /// <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        public bool CallBase
        {
            [global::System.Diagnostics.DebuggerHidden]
            get
            {
                return this.callBase;
            }
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                this.callBase = value;
            }
        }

        /// <summary>Gets or sets the fallback behavior.</summary>
        public global::Microsoft.Stubs.Framework.IStubBehavior FallbackBehavior
        {
            [global::System.Diagnostics.DebuggerHidden]
            get
            {
                return global::Microsoft.Stubs.Framework.StubFallbackBehavior.GetValueOrCurrent
                    (this.defaultStub);
            }
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                this.defaultStub = value;
            }
        }

        /// <summary>Initializes a new instance of type STransaction</summary>
        [global::System.Diagnostics.DebuggerHidden]
        private void InitializeStub()
        {
        }

        private bool callBase;

        private global::Microsoft.Stubs.Framework.IStubBehavior defaultStub;
    }
}
namespace FinanceAnalyzer.Strategy.Rise.Stubs
{
    /// <summary>Stub of TwoDaysUpJudger</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Stubs", "0.16.40915.5")]
    [global::System.Serializable]
    [global::System.Diagnostics.DebuggerDisplay("Stub = TwoDaysUpJudger")]
    [global::System.Diagnostics.DebuggerStepThrough]
    internal partial class STwoDaysUpJudger
      : global::FinanceAnalyzer.Strategy.Rise.TwoDaysUpJudger
      , global::Microsoft.Stubs.Framework.IStub
      , global::Microsoft.Stubs.Framework.IPartialStub
    {
        /// <summary>Initializes a new instance</summary>
        [global::System.Diagnostics.DebuggerHidden]
        protected STwoDaysUpJudger()
        {
            this.InitializeStub();
        }

        /// <summary>Stub of method System.Boolean FinanceAnalyzer.Strategy.Rise.IRiseJudger.AllDown(FinanceAnalyzer.DayStock day1, FinanceAnalyzer.DayStock day2, FinanceAnalyzer.DayStock day3)</summary>
        [global::System.Diagnostics.DebuggerHidden]
        public override bool AllDown(
            global::FinanceAnalyzer.DayStock day1,
            global::FinanceAnalyzer.DayStock day2,
            global::FinanceAnalyzer.DayStock day3
        )
        {
            global::Microsoft.Stubs.Framework
              .StubDelegates.Func<global::FinanceAnalyzer.DayStock, 
              global::FinanceAnalyzer.DayStock, 
              global::FinanceAnalyzer.DayStock, bool> sh
               = this.AllDownDayStockDayStockDayStock;
            if (sh != (global::Microsoft.Stubs.Framework
              .StubDelegates.Func<global::FinanceAnalyzer.DayStock, 
              global::FinanceAnalyzer.DayStock, 
              global::FinanceAnalyzer.DayStock, bool>)null)
              return sh.Invoke(day1, day2, day3);
            else 
            {
              global::Microsoft.Stubs.Framework.IStubBehavior stub = this.FallbackBehavior;
              return stub.Result
                  <global::FinanceAnalyzer.Strategy.Rise.Stubs.STwoDaysUpJudger, bool>(this);
            }
        }

        /// <summary>Stub of method System.Boolean FinanceAnalyzer.Strategy.Rise.IRiseJudger.AllDown(FinanceAnalyzer.DayStock day1, FinanceAnalyzer.DayStock day2, FinanceAnalyzer.DayStock day3)</summary>
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<global::FinanceAnalyzer.DayStock, global::FinanceAnalyzer.DayStock, global::FinanceAnalyzer.DayStock, bool> AllDownDayStockDayStockDayStock;

        /// <summary>Stub of method System.Boolean FinanceAnalyzer.Strategy.Rise.IRiseJudger.AllRise(FinanceAnalyzer.DayStock day1, FinanceAnalyzer.DayStock day2, FinanceAnalyzer.DayStock day3)</summary>
        [global::System.Diagnostics.DebuggerHidden]
        public override bool AllRise(
            global::FinanceAnalyzer.DayStock day1,
            global::FinanceAnalyzer.DayStock day2,
            global::FinanceAnalyzer.DayStock day3
        )
        {
            global::Microsoft.Stubs.Framework
              .StubDelegates.Func<global::FinanceAnalyzer.DayStock, 
              global::FinanceAnalyzer.DayStock, 
              global::FinanceAnalyzer.DayStock, bool> sh
               = this.AllRiseDayStockDayStockDayStock;
            if (sh != (global::Microsoft.Stubs.Framework
              .StubDelegates.Func<global::FinanceAnalyzer.DayStock, 
              global::FinanceAnalyzer.DayStock, 
              global::FinanceAnalyzer.DayStock, bool>)null)
              return sh.Invoke(day1, day2, day3);
            else 
            {
              global::Microsoft.Stubs.Framework.IStubBehavior stub = this.FallbackBehavior;
              return stub.Result
                  <global::FinanceAnalyzer.Strategy.Rise.Stubs.STwoDaysUpJudger, bool>(this);
            }
        }

        /// <summary>Stub of method System.Boolean FinanceAnalyzer.Strategy.Rise.IRiseJudger.AllRise(FinanceAnalyzer.DayStock day1, FinanceAnalyzer.DayStock day2, FinanceAnalyzer.DayStock day3)</summary>
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<global::FinanceAnalyzer.DayStock, global::FinanceAnalyzer.DayStock, global::FinanceAnalyzer.DayStock, bool> AllRiseDayStockDayStockDayStock;

        /// <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        public bool CallBase
        {
            [global::System.Diagnostics.DebuggerHidden]
            get
            {
                return this.callBase;
            }
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                this.callBase = value;
            }
        }

        /// <summary>Gets or sets the fallback behavior.</summary>
        public global::Microsoft.Stubs.Framework.IStubBehavior FallbackBehavior
        {
            [global::System.Diagnostics.DebuggerHidden]
            get
            {
                return global::Microsoft.Stubs.Framework.StubFallbackBehavior.GetValueOrCurrent
                    (this.defaultStub);
            }
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                this.defaultStub = value;
            }
        }

        /// <summary>Stub of method System.String FinanceAnalyzer.Strategy.Rise.IRiseJudger.GetName()</summary>
        [global::System.Diagnostics.DebuggerHidden]
        public override string GetName()
        {
            global::Microsoft.Stubs.Framework.StubDelegates.Func<string> sh
               = this.IRiseJudgerGetName;
            if (sh != (global::Microsoft.Stubs.Framework.StubDelegates.Func<string>)null)
              return sh.Invoke();
            else 
            {
              global::Microsoft.Stubs.Framework.IStubBehavior stub = this.FallbackBehavior;
              return 
                stub.Result<global::FinanceAnalyzer.Strategy.Rise.Stubs.STwoDaysUpJudger, 
                string>(this);
            }
        }

        /// <summary>Stub of method System.String FinanceAnalyzer.Strategy.Rise.IRiseJudger.GetName()</summary>
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<string> IRiseJudgerGetName;

        /// <summary>Initializes a new instance of type STwoDaysUpJudger</summary>
        [global::System.Diagnostics.DebuggerHidden]
        private void InitializeStub()
        {
        }

        private bool callBase;

        private global::Microsoft.Stubs.Framework.IStubBehavior defaultStub;
    }
}
namespace FinanceAnalyzer.Stubs
{
    /// <summary>Stub of UIFileLog</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Stubs", "0.16.40915.5")]
    [global::System.Serializable]
    [global::System.Diagnostics.DebuggerDisplay("Stub = UIFileLog")]
    [global::System.Diagnostics.DebuggerStepThrough]
    internal partial class SUIFileLog
      : global::FinanceAnalyzer.UIFileLog
      , global::Microsoft.Stubs.Framework.IStub
      , global::Microsoft.Stubs.Framework.IPartialStub
    {
        /// <summary>Initializes a new instance</summary>
        [global::System.Diagnostics.DebuggerHidden]
        protected SUIFileLog(string fileName)
        : base(fileName)
        {
            this.InitializeStub();
        }

        /// <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        public bool CallBase
        {
            [global::System.Diagnostics.DebuggerHidden]
            get
            {
                return this.callBase;
            }
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                this.callBase = value;
            }
        }

        /// <summary>Stub of method System.Void FinanceAnalyzer.UIFileLog.Close()</summary>
        [global::System.Diagnostics.DebuggerHidden]
        public override void Close()
        {
            global::Microsoft.Stubs.Framework.StubDelegates.Action sh = this.UIFileLogClose;
            if (sh != (global::Microsoft.Stubs.Framework.StubDelegates.Action)null)
              sh.Invoke();
            else 
            {
              if (this.callBase)
                base.Close();
              else 
              {
                global::Microsoft.Stubs.Framework.IStubBehavior stub = this.FallbackBehavior
                  ;
                stub.VoidResult<global::FinanceAnalyzer.Stubs.SUIFileLog>(this);
              }
            }
        }

        /// <summary>Gets or sets the fallback behavior.</summary>
        public global::Microsoft.Stubs.Framework.IStubBehavior FallbackBehavior
        {
            [global::System.Diagnostics.DebuggerHidden]
            get
            {
                return global::Microsoft.Stubs.Framework.StubFallbackBehavior.GetValueOrCurrent
                    (this.defaultStub);
            }
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                this.defaultStub = value;
            }
        }

        /// <summary>Initializes a new instance of type SUIFileLog</summary>
        [global::System.Diagnostics.DebuggerHidden]
        private void InitializeStub()
        {
        }

        /// <summary>Stub of method System.Void FinanceAnalyzer.UIFileLog.Log(System.String val)</summary>
        [global::System.Diagnostics.DebuggerHidden]
        public override void Log(string val)
        {
            global::Microsoft.Stubs.Framework.StubDelegates.Action<string> sh
               = this.LogString;
            if (sh != (global::Microsoft.Stubs.Framework.StubDelegates.Action<string>)null)
              sh.Invoke(val);
            else 
            {
              if (this.callBase)
                base.Log(val);
              else 
              {
                global::Microsoft.Stubs.Framework.IStubBehavior stub = this.FallbackBehavior
                  ;
                stub.VoidResult<global::FinanceAnalyzer.Stubs.SUIFileLog>(this);
              }
            }
        }

        /// <summary>Stub of method System.Void FinanceAnalyzer.UIFileLog.Log(System.String val)</summary>
        public global::Microsoft.Stubs.Framework.StubDelegates.Action<string> LogString;

        /// <summary>Stub of method System.Void FinanceAnalyzer.UIFileLog.Close()</summary>
        public global::Microsoft.Stubs.Framework.StubDelegates.Action UIFileLogClose;

        private bool callBase;

        private global::Microsoft.Stubs.Framework.IStubBehavior defaultStub;
    }
}
namespace FinanceAnalyzer.Stubs
{
    /// <summary>Stub of UILabelLog</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Stubs", "0.16.40915.5")]
    [global::System.Serializable]
    [global::System.Diagnostics.DebuggerDisplay("Stub = UILabelLog")]
    [global::System.Diagnostics.DebuggerStepThrough]
    internal partial class SUILabelLog
      : global::FinanceAnalyzer.UILabelLog
      , global::Microsoft.Stubs.Framework.IStub
      , global::Microsoft.Stubs.Framework.IPartialStub
    {
        /// <summary>Initializes a new instance</summary>
        [global::System.Diagnostics.DebuggerHidden]
        protected SUILabelLog()
        {
            this.InitializeStub();
        }

        /// <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        public bool CallBase
        {
            [global::System.Diagnostics.DebuggerHidden]
            get
            {
                return this.callBase;
            }
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                this.callBase = value;
            }
        }

        /// <summary>Stub of method System.Void FinanceAnalyzer.UILabelLog.Close()</summary>
        [global::System.Diagnostics.DebuggerHidden]
        public override void Close()
        {
            global::Microsoft.Stubs.Framework.StubDelegates.Action sh = this.UILabelLogClose
              ;
            if (sh != (global::Microsoft.Stubs.Framework.StubDelegates.Action)null)
              sh.Invoke();
            else 
            {
              if (this.callBase)
                base.Close();
              else 
              {
                global::Microsoft.Stubs.Framework.IStubBehavior stub = this.FallbackBehavior
                  ;
                stub.VoidResult<global::FinanceAnalyzer.Stubs.SUILabelLog>(this);
              }
            }
        }

        /// <summary>Gets or sets the fallback behavior.</summary>
        public global::Microsoft.Stubs.Framework.IStubBehavior FallbackBehavior
        {
            [global::System.Diagnostics.DebuggerHidden]
            get
            {
                return global::Microsoft.Stubs.Framework.StubFallbackBehavior.GetValueOrCurrent
                    (this.defaultStub);
            }
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                this.defaultStub = value;
            }
        }

        /// <summary>Initializes a new instance of type SUILabelLog</summary>
        [global::System.Diagnostics.DebuggerHidden]
        private void InitializeStub()
        {
        }

        /// <summary>Stub of method System.Void FinanceAnalyzer.UILabelLog.Log(System.String val)</summary>
        [global::System.Diagnostics.DebuggerHidden]
        public override void Log(string val)
        {
            global::Microsoft.Stubs.Framework.StubDelegates.Action<string> sh
               = this.LogString;
            if (sh != (global::Microsoft.Stubs.Framework.StubDelegates.Action<string>)null)
              sh.Invoke(val);
            else 
            {
              if (this.callBase)
                base.Log(val);
              else 
              {
                global::Microsoft.Stubs.Framework.IStubBehavior stub = this.FallbackBehavior
                  ;
                stub.VoidResult<global::FinanceAnalyzer.Stubs.SUILabelLog>(this);
              }
            }
        }

        /// <summary>Stub of method System.Void FinanceAnalyzer.UILabelLog.Log(System.String val)</summary>
        public global::Microsoft.Stubs.Framework.StubDelegates.Action<string> LogString;

        /// <summary>Stub of method System.Void FinanceAnalyzer.UILabelLog.Close()</summary>
        public global::Microsoft.Stubs.Framework.StubDelegates.Action UILabelLogClose;

        private bool callBase;

        private global::Microsoft.Stubs.Framework.IStubBehavior defaultStub;
    }
}
namespace FinanceAnalyzer.Log.Stubs
{
    /// <summary>Stub of UITraceLog</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Stubs", "0.16.40915.5")]
    [global::System.Serializable]
    [global::System.Diagnostics.DebuggerDisplay("Stub = UITraceLog")]
    [global::System.Diagnostics.DebuggerStepThrough]
    internal partial class SUITraceLog
      : global::FinanceAnalyzer.Log.UITraceLog
      , global::Microsoft.Stubs.Framework.IStub
      , global::Microsoft.Stubs.Framework.IPartialStub
    {
        /// <summary>Initializes a new instance</summary>
        [global::System.Diagnostics.DebuggerHidden]
        protected SUITraceLog()
        {
            this.InitializeStub();
        }

        /// <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        public bool CallBase
        {
            [global::System.Diagnostics.DebuggerHidden]
            get
            {
                return this.callBase;
            }
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                this.callBase = value;
            }
        }

        /// <summary>Gets or sets the fallback behavior.</summary>
        public global::Microsoft.Stubs.Framework.IStubBehavior FallbackBehavior
        {
            [global::System.Diagnostics.DebuggerHidden]
            get
            {
                return global::Microsoft.Stubs.Framework.StubFallbackBehavior.GetValueOrCurrent
                    (this.defaultStub);
            }
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                this.defaultStub = value;
            }
        }

        /// <summary>Initializes a new instance of type SUITraceLog</summary>
        [global::System.Diagnostics.DebuggerHidden]
        private void InitializeStub()
        {
        }

        /// <summary>Stub of method System.Void FinanceAnalyzer.Log.UITraceLog.Log(System.String val)</summary>
        [global::System.Diagnostics.DebuggerHidden]
        public override void Log(string val)
        {
            global::Microsoft.Stubs.Framework.StubDelegates.Action<string> sh
               = this.LogString;
            if (sh != (global::Microsoft.Stubs.Framework.StubDelegates.Action<string>)null)
              sh.Invoke(val);
            else 
            {
              if (this.callBase)
                base.Log(val);
              else 
              {
                global::Microsoft.Stubs.Framework.IStubBehavior stub = this.FallbackBehavior
                  ;
                stub.VoidResult<global::FinanceAnalyzer.Log.Stubs.SUITraceLog>(this);
              }
            }
        }

        /// <summary>Stub of method System.Void FinanceAnalyzer.Log.UITraceLog.Log(System.String val)</summary>
        public global::Microsoft.Stubs.Framework.StubDelegates.Action<string> LogString;

        private bool callBase;

        private global::Microsoft.Stubs.Framework.IStubBehavior defaultStub;
    }
}
namespace FinanceAnalyzer.Strategy.Rise.Stubs
{
    /// <summary>Stub of UpJudger</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Stubs", "0.16.40915.5")]
    [global::System.Serializable]
    [global::System.Diagnostics.DebuggerDisplay("Stub = UpJudger")]
    [global::System.Diagnostics.DebuggerStepThrough]
    public partial class SUpJudger
      : global::FinanceAnalyzer.Strategy.Rise.UpJudger
      , global::Microsoft.Stubs.Framework.IStub
      , global::Microsoft.Stubs.Framework.IPartialStub
    {
        /// <summary>Initializes a new instance</summary>
        [global::System.Diagnostics.DebuggerHidden]
        public SUpJudger()
        {
            this.InitializeStub();
        }

        /// <summary>Stub of method System.Boolean FinanceAnalyzer.Strategy.Rise.IRiseJudger.AllDown(FinanceAnalyzer.DayStock day1, FinanceAnalyzer.DayStock day2, FinanceAnalyzer.DayStock day3)</summary>
        [global::System.Diagnostics.DebuggerHidden]
        public override bool AllDown(
            global::FinanceAnalyzer.DayStock day1,
            global::FinanceAnalyzer.DayStock day2,
            global::FinanceAnalyzer.DayStock day3
        )
        {
            global::Microsoft.Stubs.Framework
              .StubDelegates.Func<global::FinanceAnalyzer.DayStock, 
              global::FinanceAnalyzer.DayStock, 
              global::FinanceAnalyzer.DayStock, bool> sh
               = this.AllDownDayStockDayStockDayStock;
            if (sh != (global::Microsoft.Stubs.Framework
              .StubDelegates.Func<global::FinanceAnalyzer.DayStock, 
              global::FinanceAnalyzer.DayStock, 
              global::FinanceAnalyzer.DayStock, bool>)null)
              return sh.Invoke(day1, day2, day3);
            else 
            {
              global::Microsoft.Stubs.Framework.IStubBehavior stub = this.FallbackBehavior;
              return 
                stub.Result<global::FinanceAnalyzer.Strategy.Rise.Stubs.SUpJudger, bool>
                    (this);
            }
        }

        /// <summary>Stub of method System.Boolean FinanceAnalyzer.Strategy.Rise.IRiseJudger.AllDown(FinanceAnalyzer.DayStock day1, FinanceAnalyzer.DayStock day2, FinanceAnalyzer.DayStock day3)</summary>
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<global::FinanceAnalyzer.DayStock, global::FinanceAnalyzer.DayStock, global::FinanceAnalyzer.DayStock, bool> AllDownDayStockDayStockDayStock;

        /// <summary>Stub of method System.Boolean FinanceAnalyzer.Strategy.Rise.IRiseJudger.AllRise(FinanceAnalyzer.DayStock day1, FinanceAnalyzer.DayStock day2, FinanceAnalyzer.DayStock day3)</summary>
        [global::System.Diagnostics.DebuggerHidden]
        public override bool AllRise(
            global::FinanceAnalyzer.DayStock day1,
            global::FinanceAnalyzer.DayStock day2,
            global::FinanceAnalyzer.DayStock day3
        )
        {
            global::Microsoft.Stubs.Framework
              .StubDelegates.Func<global::FinanceAnalyzer.DayStock, 
              global::FinanceAnalyzer.DayStock, 
              global::FinanceAnalyzer.DayStock, bool> sh
               = this.AllRiseDayStockDayStockDayStock;
            if (sh != (global::Microsoft.Stubs.Framework
              .StubDelegates.Func<global::FinanceAnalyzer.DayStock, 
              global::FinanceAnalyzer.DayStock, 
              global::FinanceAnalyzer.DayStock, bool>)null)
              return sh.Invoke(day1, day2, day3);
            else 
            {
              global::Microsoft.Stubs.Framework.IStubBehavior stub = this.FallbackBehavior;
              return 
                stub.Result<global::FinanceAnalyzer.Strategy.Rise.Stubs.SUpJudger, bool>
                    (this);
            }
        }

        /// <summary>Stub of method System.Boolean FinanceAnalyzer.Strategy.Rise.IRiseJudger.AllRise(FinanceAnalyzer.DayStock day1, FinanceAnalyzer.DayStock day2, FinanceAnalyzer.DayStock day3)</summary>
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<global::FinanceAnalyzer.DayStock, global::FinanceAnalyzer.DayStock, global::FinanceAnalyzer.DayStock, bool> AllRiseDayStockDayStockDayStock;

        /// <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        public bool CallBase
        {
            [global::System.Diagnostics.DebuggerHidden]
            get
            {
                return this.callBase;
            }
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                this.callBase = value;
            }
        }

        /// <summary>Gets or sets the fallback behavior.</summary>
        public global::Microsoft.Stubs.Framework.IStubBehavior FallbackBehavior
        {
            [global::System.Diagnostics.DebuggerHidden]
            get
            {
                return global::Microsoft.Stubs.Framework.StubFallbackBehavior.GetValueOrCurrent
                    (this.defaultStub);
            }
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                this.defaultStub = value;
            }
        }

        /// <summary>Stub of method System.String FinanceAnalyzer.Strategy.Rise.IRiseJudger.GetName()</summary>
        [global::System.Diagnostics.DebuggerHidden]
        public override string GetName()
        {
            global::Microsoft.Stubs.Framework.StubDelegates.Func<string> sh
               = this.IRiseJudgerGetName;
            if (sh != (global::Microsoft.Stubs.Framework.StubDelegates.Func<string>)null)
              return sh.Invoke();
            else 
            {
              global::Microsoft.Stubs.Framework.IStubBehavior stub = this.FallbackBehavior;
              return 
                stub.Result<global::FinanceAnalyzer.Strategy.Rise.Stubs.SUpJudger, string>
                    (this);
            }
        }

        /// <summary>Stub of method System.String FinanceAnalyzer.Strategy.Rise.IRiseJudger.GetName()</summary>
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<string> IRiseJudgerGetName;

        /// <summary>Initializes a new instance of type SUpJudger</summary>
        [global::System.Diagnostics.DebuggerHidden]
        private void InitializeStub()
        {
        }

        private bool callBase;

        private global::Microsoft.Stubs.Framework.IStubBehavior defaultStub;
    }
}
namespace FinanceAnalyzer.Strategy.Rise.Stubs
{
    /// <summary>Stub of UpJudgerOptim</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Stubs", "0.16.40915.5")]
    [global::System.Serializable]
    [global::System.Diagnostics.DebuggerDisplay("Stub = UpJudgerOptim")]
    [global::System.Diagnostics.DebuggerStepThrough]
    public partial class SUpJudgerOptim
      : global::FinanceAnalyzer.Strategy.Rise.UpJudgerOptim
      , global::Microsoft.Stubs.Framework.IStub
      , global::Microsoft.Stubs.Framework.IPartialStub
    {
        /// <summary>Initializes a new instance</summary>
        [global::System.Diagnostics.DebuggerHidden]
        public SUpJudgerOptim()
        {
            this.InitializeStub();
        }

        /// <summary>Stub of method System.Boolean FinanceAnalyzer.Strategy.Rise.IRiseJudger.AllDown(FinanceAnalyzer.DayStock day1, FinanceAnalyzer.DayStock day2, FinanceAnalyzer.DayStock day3)</summary>
        [global::System.Diagnostics.DebuggerHidden]
        public override bool AllDown(
            global::FinanceAnalyzer.DayStock day1,
            global::FinanceAnalyzer.DayStock day2,
            global::FinanceAnalyzer.DayStock day3
        )
        {
            global::Microsoft.Stubs.Framework
              .StubDelegates.Func<global::FinanceAnalyzer.DayStock, 
              global::FinanceAnalyzer.DayStock, 
              global::FinanceAnalyzer.DayStock, bool> sh
               = this.AllDownDayStockDayStockDayStock;
            if (sh != (global::Microsoft.Stubs.Framework
              .StubDelegates.Func<global::FinanceAnalyzer.DayStock, 
              global::FinanceAnalyzer.DayStock, 
              global::FinanceAnalyzer.DayStock, bool>)null)
              return sh.Invoke(day1, day2, day3);
            else 
            {
              global::Microsoft.Stubs.Framework.IStubBehavior stub = this.FallbackBehavior;
              return stub
                .Result<global::FinanceAnalyzer.Strategy.Rise.Stubs.SUpJudgerOptim, bool>
                  (this);
            }
        }

        /// <summary>Stub of method System.Boolean FinanceAnalyzer.Strategy.Rise.IRiseJudger.AllDown(FinanceAnalyzer.DayStock day1, FinanceAnalyzer.DayStock day2, FinanceAnalyzer.DayStock day3)</summary>
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<global::FinanceAnalyzer.DayStock, global::FinanceAnalyzer.DayStock, global::FinanceAnalyzer.DayStock, bool> AllDownDayStockDayStockDayStock;

        /// <summary>Stub of method System.Boolean FinanceAnalyzer.Strategy.Rise.IRiseJudger.AllRise(FinanceAnalyzer.DayStock day1, FinanceAnalyzer.DayStock day2, FinanceAnalyzer.DayStock day3)</summary>
        [global::System.Diagnostics.DebuggerHidden]
        public override bool AllRise(
            global::FinanceAnalyzer.DayStock day1,
            global::FinanceAnalyzer.DayStock day2,
            global::FinanceAnalyzer.DayStock day3
        )
        {
            global::Microsoft.Stubs.Framework
              .StubDelegates.Func<global::FinanceAnalyzer.DayStock, 
              global::FinanceAnalyzer.DayStock, 
              global::FinanceAnalyzer.DayStock, bool> sh
               = this.AllRiseDayStockDayStockDayStock;
            if (sh != (global::Microsoft.Stubs.Framework
              .StubDelegates.Func<global::FinanceAnalyzer.DayStock, 
              global::FinanceAnalyzer.DayStock, 
              global::FinanceAnalyzer.DayStock, bool>)null)
              return sh.Invoke(day1, day2, day3);
            else 
            {
              global::Microsoft.Stubs.Framework.IStubBehavior stub = this.FallbackBehavior;
              return stub
                .Result<global::FinanceAnalyzer.Strategy.Rise.Stubs.SUpJudgerOptim, bool>
                  (this);
            }
        }

        /// <summary>Stub of method System.Boolean FinanceAnalyzer.Strategy.Rise.IRiseJudger.AllRise(FinanceAnalyzer.DayStock day1, FinanceAnalyzer.DayStock day2, FinanceAnalyzer.DayStock day3)</summary>
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<global::FinanceAnalyzer.DayStock, global::FinanceAnalyzer.DayStock, global::FinanceAnalyzer.DayStock, bool> AllRiseDayStockDayStockDayStock;

        /// <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        public bool CallBase
        {
            [global::System.Diagnostics.DebuggerHidden]
            get
            {
                return this.callBase;
            }
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                this.callBase = value;
            }
        }

        /// <summary>Gets or sets the fallback behavior.</summary>
        public global::Microsoft.Stubs.Framework.IStubBehavior FallbackBehavior
        {
            [global::System.Diagnostics.DebuggerHidden]
            get
            {
                return global::Microsoft.Stubs.Framework.StubFallbackBehavior.GetValueOrCurrent
                    (this.defaultStub);
            }
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                this.defaultStub = value;
            }
        }

        /// <summary>Stub of method System.String FinanceAnalyzer.Strategy.Rise.IRiseJudger.GetName()</summary>
        [global::System.Diagnostics.DebuggerHidden]
        public override string GetName()
        {
            global::Microsoft.Stubs.Framework.StubDelegates.Func<string> sh
               = this.IRiseJudgerGetName;
            if (sh != (global::Microsoft.Stubs.Framework.StubDelegates.Func<string>)null)
              return sh.Invoke();
            else 
            {
              global::Microsoft.Stubs.Framework.IStubBehavior stub = this.FallbackBehavior;
              return stub.Result
                  <global::FinanceAnalyzer.Strategy.Rise.Stubs.SUpJudgerOptim, string>(this);
            }
        }

        /// <summary>Stub of method System.String FinanceAnalyzer.Strategy.Rise.IRiseJudger.GetName()</summary>
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<string> IRiseJudgerGetName;

        /// <summary>Initializes a new instance of type SUpJudgerOptim</summary>
        [global::System.Diagnostics.DebuggerHidden]
        private void InitializeStub()
        {
        }

        private bool callBase;

        private global::Microsoft.Stubs.Framework.IStubBehavior defaultStub;
    }
}

